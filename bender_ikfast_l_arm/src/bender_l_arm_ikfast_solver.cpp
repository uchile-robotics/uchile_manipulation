/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-01-19 12:02:20.771040
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKsin(j[5]);
x1=IKsin(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[3]);
x4=(x1*x2*x3);
x5=IKsin(j[3]);
x6=IKcos(j[0]);
x7=IKcos(j[2]);
x8=(x6*x7);
x9=((1.0)*x8);
x10=IKsin(j[1]);
x11=IKsin(j[2]);
x12=(x1*x11);
x13=((1.0)*x12);
x14=((((-1.0)*(1.0)*x4))+((x5*(((((-1.0)*(1.0)*x9))+(((-1.0)*(1.0)*x10*x13)))))));
x15=IKcos(j[5]);
x16=IKsin(j[4]);
x17=(x11*x6);
x18=((1.0)*x17);
x19=(x1*x7);
x20=(x10*x19);
x21=(x16*((x20+(((-1.0)*(1.0)*x18)))));
x22=IKcos(j[4]);
x23=(x1*x2*x5);
x24=(x10*x12);
x25=(x3*((x24+x8)));
x26=((((-1.0)*(1.0)*x23))+x25);
x27=(x22*x26);
x28=((1.0)*x19);
x29=((0.3466)*x2);
x30=(x10*x3);
x31=(x11*x2*x5);
x32=((((-1.0)*(1.0)*x30))+(((1.0)*x31)));
x33=(x2*x7);
x34=(x16*x33);
x35=(x10*x5);
x36=(x11*x2);
x37=(x3*x36);
x38=(x22*((x35+x37)));
x39=(x22*x33);
x40=(x2*x6);
x41=(x3*x40);
x42=(x10*x18);
x43=(((x5*((x42+(((-1.0)*(1.0)*x28))))))+x41);
x44=(x10*x9);
x45=(x16*(((((-1.0)*(1.0)*x13))+(((-1.0)*(1.0)*x44)))));
x46=(x40*x5);
x47=(x3*((x19+(((-1.0)*(1.0)*x42)))));
x48=(x46+x47);
x49=(x22*x48);
x50=(x10*x11*x6);
x51=(x10*x6*x7);
eerot[0]=(((x0*x14))+((x15*((x21+x27)))));
eerot[1]=(((x22*((x18+(((-1.0)*(1.0)*x10*x28))))))+((x16*x26)));
eerot[2]=(((x0*(((((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x21))))))+((x14*x15)));
eetrans[0]=((((0.0104)*x6))+(((0.0005)*x20))+((x3*(((((-1.0)*(0.0136)*x8))+(((-1.0)*(0.0136)*x24))))))+((x22*(((((-1.0)*(0.01822)*x25))+(((0.01822)*x23))))))+(((-1.0)*(0.0005)*x17))+((x16*(((((0.01822)*x17))+(((-1.0)*(0.01822)*x20))))))+(((0.03)*x1))+((x5*(((((0.3549)*x24))+(((0.3549)*x8))))))+(((0.3549)*x4))+((x1*x29))+(((-1.0)*(0.0159)*x8))+(((-1.0)*(0.0159)*x24))+((x22*(((((-1.0)*(0.0171)*x20))+(((0.0171)*x17))))))+(((0.0136)*x23))+((x16*(((((0.0171)*x25))+(((-1.0)*(0.0171)*x23)))))));
eerot[3]=(((x0*x32))+((x15*(((((-1.0)*(1.0)*x38))+(((-1.0)*(1.0)*x34)))))));
eerot[4]=(x39+((x16*(((((-1.0)*(1.0)*x35))+(((-1.0)*(1.0)*x37)))))));
eerot[5]=(((x0*((x34+x38))))+((x15*x32)));
eetrans[1]=((0.0339)+(((0.0136)*x37))+((x16*(((((-1.0)*(0.0171)*x35))+(((-1.0)*(0.0171)*x37))))))+((x22*(((((0.01822)*x35))+(((0.01822)*x37))))))+(((0.0159)*x36))+(((0.3466)*x10))+(((0.01822)*x34))+(((-1.0)*(0.0005)*x33))+(((0.3549)*x30))+(((0.0171)*x39))+(((-1.0)*(0.3549)*x31))+(((0.0136)*x35)));
eerot[6]=(((x0*x43))+((x15*((x49+x45)))));
eerot[7]=(((x16*x48))+((x22*((x13+x44)))));
eerot[8]=(((x0*(((((-1.0)*(1.0)*x49))+(((-1.0)*(1.0)*x45))))))+((x15*x43)));
eetrans[2]=((((-1.0)*(0.0159)*x19))+(((0.0104)*x1))+((x22*(((((0.0171)*x12))+(((0.0171)*x51))))))+((x3*(((((0.0136)*x50))+(((-1.0)*(0.0136)*x19))))))+(((-1.0)*(0.0005)*x51))+((x16*(((((0.01822)*x51))+(((0.01822)*x12))))))+(((0.0159)*x50))+(((-1.0)*(0.0136)*x46))+(((-1.0)*(0.3549)*x41))+((x16*(((((0.0171)*x47))+(((0.0171)*x46))))))+(((-1.0)*(1.0)*x29*x6))+((x5*(((((0.3549)*x19))+(((-1.0)*(0.3549)*x50))))))+(((-1.0)*(0.0005)*x12))+((x22*(((((-1.0)*(0.01822)*x46))+(((-1.0)*(0.01822)*x47))))))+(((-1.0)*(0.03)*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r02;
new_r02=((-1.0)*(((1.0)*r01)));
new_px=((((-1.0)*(0.0171)*r01))+px);
new_r10=r20;
new_r11=r22;
new_r12=((-1.0)*(((1.0)*r21)));
new_py=(pz+(((-1.0)*(0.0171)*r21)));
new_r20=((-1.0)*(((1.0)*r10)));
new_r21=((-1.0)*(((1.0)*r12)));
new_r22=r11;
new_pz=((0.0339)+(((-1.0)*(1.0)*py))+(((0.0171)*r11)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*py);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x54)));
rxp2_0=((((-1.0)*r22*x52))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x53))+((px*r22)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x55=((0.021294)*r01);
IkReal x56=((1.6280755914599e-5)*r21);
IkReal x57=((0.06)*px);
IkReal x58=((4.58742065781881e-5)*pz);
IkReal x59=((0.0019092)*r00);
IkReal x60=((3.0e-5)*r02);
IkReal x61=((-1.0)*x60);
IkReal x62=((0.000338639723023658)*r10);
IkReal x63=((3.03621188690133e-5)*r11);
IkReal x64=((1.45971725331795e-6)*r20);
IkReal x65=((0.0002656145186382)*r22);
IkReal x66=((0.0325615118291979)*rxp0_2);
IkReal x67=((0.00291943450663589)*rxp1_2);
IkReal x68=((0.000954183496826313)*rxp2_1);
IkReal x69=((-1.0)*x68);
IkReal x70=((0.0917484131563762)*npz*pz);
IkReal x71=((-1.0)*x70);
IkReal x72=(pp*r22);
IkReal x73=((0.0458742065781881)*x72);
IkReal x74=((0.001)*npz);
IkReal x75=((3.0e-5)*r12);
IkReal x76=((-1.0)*x75);
IkReal x77=((2.86255049047894e-5)*r22);
IkReal x78=((0.000954183496826313)*rxp2_0);
IkReal x79=((0.06364)*npx);
IkReal x80=((0.7098)*npy);
IkReal x81=((-1.0)*x80);
IkReal x82=((1.0)*pp);
IkReal x83=((-1.0)*x82);
IkReal x84=((0.06)*py);
IkReal x85=((0.000338639723023658)*r00);
IkReal x86=((-1.0)*x85);
IkReal x87=((3.03621188690133e-5)*r01);
IkReal x88=((0.0019092)*r10);
IkReal x89=((0.021294)*r11);
IkReal x90=((((3.25615118291979e-5)*r20))+(((0.042588)*r00)));
IkReal x91=((0.000677279446047317)*r11);
IkReal x92=((0.0651230236583958)*rxp1_2);
IkReal x93=((((-1.0)*(1.4196)*npx))+(((0.042588)*r10)));
IkReal x94=((0.000677279446047317)*r01);
IkReal x95=((-1.0)*x62);
IkReal x96=((-1.0)*x66);
IkReal x97=((-1.0)*x55);
IkReal x98=((-1.0)*x56);
IkReal x99=((((-1.0)*x89))+x83+x80+x84);
IkReal x100=((0.0217987421383648)*npz);
IkReal x101=((0.000653962264150943)*r12);
IkReal x102=((0.000624)*r22);
IkReal x103=((0.0208)*rxp2_0);
IkReal x104=((-1.0)*x103);
IkReal x105=((1.38727194968553)*npx);
IkReal x106=((15.4727471698113)*npy);
IkReal x107=((-1.0)*x106);
IkReal x108=((-1.0)*(((21.7987421383648)*pp)));
IkReal x109=((-1.0)*(((1.30792452830189)*py)));
IkReal x110=((0.00738192)*r00);
IkReal x111=((0.000661856)*r01);
IkReal x112=((0.041618158490566)*r10);
IkReal x113=((0.46418241509434)*r11);
IkReal x114=((-1.0)*x113);
IkReal x115=((0.041618158490566)*r00);
IkReal x116=((0.46418241509434)*r01);
IkReal x117=((0.00738192)*r10);
IkReal x118=((0.000661856)*r11);
IkReal x119=((3.182e-5)*r20);
IkReal x120=((0.0003549)*r21);
IkReal x121=((-1.0)*x120);
IkReal x122=((0.7098)*rxp0_2);
IkReal x123=((-1.0)*x122);
IkReal x124=((0.06364)*rxp1_2);
IkReal x125=((1.30792452830189)*px);
IkReal x126=((-1.0)*(((0.001)*pz)));
IkReal x127=((0.000653962264150943)*r02);
IkReal x128=((0.0208)*rxp2_1);
IkReal x129=((2.0)*npz);
IkReal x130=(pz*x129);
IkReal x131=((0.0136024150943396)+(((-1.0)*(0.0057900624)*r22))+x130+(((-1.0)*x128))+x125+x126+(((-1.0)*r22*x82))+(((-1.0)*x127)));
IkReal x132=((((-1.0)*(0.928364830188679)*r10))+(((-1.0)*(30.9454943396226)*npx)));
IkReal x133=((0.01476384)*r01);
IkReal x134=((((-1.0)*(0.0007098)*r20))+(((0.928364830188679)*r00)));
IkReal x135=((0.01476384)*r11);
IkReal x136=((1.4196)*rxp1_2);
IkReal x137=(x106+x109+x108+x113);
IkReal x138=((-1.0)*x110);
IkReal x139=((-1.0)*x116);
IkReal x140=((-1.0)*x117);
IkReal x141=((0.00738192)*r20);
IkReal x142=((0.000661856)*r21);
IkReal x143=((-1.0)*x142);
IkReal x144=((-1.0)*(((0.001)*py)));
IkReal x145=((3.182e-5)*r10);
IkReal x146=((-1.0)*x145);
IkReal x147=((0.0003549)*r11);
IkReal x148=((-1.0)*x147);
IkReal x149=((-1.0)*(((0.0075900624)*r12)));
IkReal x150=((0.7098)*rxp0_1);
IkReal x151=((-1.0)*x150);
IkReal x152=((0.06364)*rxp1_1);
IkReal x153=((0.0208)*rxp2_2);
IkReal x154=((-1.0)*x153);
IkReal x155=(py*x129);
IkReal x156=((-1.0)*r12*x82);
IkReal x157=((3.182e-5)*r00);
IkReal x158=((0.7098)*rxp0_0);
IkReal x159=((0.06364)*rxp1_0);
IkReal x160=((-1.0)*x159);
IkReal x161=((0.001)*px);
IkReal x162=((0.0003549)*r01);
IkReal x163=((0.0075900624)*r02);
IkReal x164=((0.021294)*r20);
IkReal x165=((0.0019092)*r21);
IkReal x166=((-1.0)*x165);
IkReal x167=((0.06)*rxp2_2);
IkReal x168=((-1.0)*x167);
IkReal x169=(pp*r02);
IkReal x170=(px*x129);
IkReal x171=((-1.0)*x170);
IkReal x172=((0.001323712)*r20);
IkReal x173=((0.01476384)*r21);
IkReal x174=((-1.0)*x173);
IkReal x175=((-1.0)*(((0.0007098)*r10)));
IkReal x176=((1.4196)*rxp1_1);
IkReal x177=((((0.12728)*rxp0_1))+x176+x175+(((6.364e-5)*r11)));
IkReal x178=((0.042588)*r21);
IkReal x179=((((-1.0)*(0.0038184)*r20))+(((-1.0)*x178)));
IkReal x180=((0.0007098)*r00);
IkReal x181=((6.364e-5)*r01);
IkReal x182=((0.12728)*rxp0_0);
IkReal x183=((1.4196)*rxp1_0);
IkReal x184=((-1.0)*x183);
IkReal x185=((-1.0)*x141);
IkReal x186=(x150+x156+x155+x149+x147+x145+x144+(((-1.0)*x152)));
IkReal x187=((-1.0)*x157);
IkReal x188=((-1.0)*x158);
IkReal x189=((-1.0)*x162);
IkReal x190=((-1.0)*x164);
IkReal x191=((-1.0)*x161);
IkReal x192=((-1.0)*x163);
IkReal x193=((-1.0)*r02*x82);
IkReal x194=((-1.0)*x180);
IkReal x195=((((-1.0)*(0.00334331217541835)*pz))+(((-1.0)*(1.24777841892672e-6)*r22))+(((-1.0)*(0.000677279446047317)*r12))+(((-1.0)*(0.0651230236583958)*rxp2_2))+(((-1.0)*(0.001632)*r02)));
IkReal x196=((6.0e-5)*r00);
IkReal x197=((0.000424844843854587)*r20);
IkReal x198=((0.00118654149105597)*r21);
IkReal x199=((0.00190836699365263)*rxp0_1);
IkReal x200=((0.183496826312752)*npx*pz);
IkReal x201=((0.0917484131563762)*pp*r20);
IkReal x202=((3.644e-5)+(((0.000677279446047317)*r02))+(((-1.0)*(0.001632)*r12))+(((0.0544)*npz)));
IkReal x203=((0.002)*npx);
IkReal x204=((6.0e-5)*r10);
IkReal x205=((5.72510098095788e-5)*r20);
IkReal x206=((0.00190836699365263)*rxp0_0);
IkReal x207=((0.000794346163522013)+(((0.0355755471698113)*r12))+(((-1.0)*(0.01476384)*r02))+(((1.18585157232704)*npz)));
IkReal x208=((0.0435974842767296)*npx);
IkReal x209=((0.00130792452830189)*r10);
IkReal x210=((0.001248)*r20);
IkReal x211=((0.0416)*rxp0_0);
IkReal x212=((((-1.0)*(0.01476384)*r12))+(((0.07288)*pz))+(((2.72e-5)*r22))+(((-1.0)*(0.0355755471698113)*r02))+(((1.4196)*rxp2_2)));
IkReal x213=((0.00130792452830189)*r00);
IkReal x214=((0.0092610832)*r20);
IkReal x215=((0.025865112)*r21);
IkReal x216=((0.0416)*rxp0_1);
IkReal x217=((4.0)*npx);
IkReal x218=(pz*x217);
IkReal x219=((2.0)*pp);
IkReal x220=(r20*x219);
IkReal x221=((8.0)*npy);
IkReal x222=((4.0)*pp);
IkReal x223=((0.01476384)*r22);
IkReal x224=((-1.0)*x223);
IkReal x225=((0.0416)*rxp0_2);
IkReal x226=((-1.0)*x225);
IkReal x227=((0.07288)*py);
IkReal x228=((0.0128610832)*r10);
IkReal x229=((0.025865112)*r11);
IkReal x230=((2.72e-5)*r12);
IkReal x231=((1.4196)*rxp2_1);
IkReal x232=(py*x217);
IkReal x233=(r10*x219);
IkReal x234=((((-1.0)*x233))+(((-1.0)*x228))+x227+x229+x230+x231+x232);
IkReal x235=((0.07288)*px);
IkReal x236=((-1.0)*x235);
IkReal x237=((2.72e-5)*r02);
IkReal x238=((-1.0)*x237);
IkReal x239=((1.4196)*rxp2_0);
IkReal x240=((-1.0)*x239);
IkReal x241=((0.0128610832)*r00);
IkReal x242=((0.025865112)*r01);
IkReal x243=((-1.0)*x242);
IkReal x244=((-1.0)*(((0.042588)*r22)));
IkReal x245=((0.12)*rxp0_2);
IkReal x246=((-1.0)*x245);
IkReal x247=(px*x217);
IkReal x248=((-1.0)*x247);
IkReal x249=(r00*x219);
IkReal x250=((0.0832)*rxp1_2);
IkReal x251=(((r11*x222))+(((-1.0)*py*x221))+(((0.051730224)*r10))+(((0.0257221664)*r11)));
IkReal x252=((0.051730224)*r00);
IkReal x253=((0.0257221664)*r01);
IkReal x254=((0.24)*rxp1_2);
IkReal x255=(px*x221);
IkReal x256=(r01*x222);
IkReal x257=((((-1.0)*x232))+(((-1.0)*x229))+x227+x228+x230+x231+x233);
IkReal x258=(x244+x242+x247+(((-1.0)*x249))+(((-1.0)*x241)));
IkReal x259=((0.0002772)*r00);
IkReal x260=((4.40832775533757e-6)*r11);
IkReal x261=((2.11938834391229e-7)*r20);
IkReal x262=((0.000423877668782458)*rxp1_2);
IkReal x263=((-0.000624)+(((-1.0)*(0.00022014547305251)*r22))+x68+x60+(((-1.0)*x73))+x70+x58+x57);
IkReal x264=((-1.0)*x74);
IkReal x265=((-1.0)*x77);
IkReal x266=((-1.0)*x78);
IkReal x267=((0.00924)*npx);
IkReal x268=((4.40832775533757e-6)*r01);
IkReal x269=((0.0002772)*r10);
IkReal x270=((-1.0)*x100);
IkReal x271=((-1.0)*x101);
IkReal x272=((-1.0)*x102);
IkReal x273=((0.201420377358491)*npx);
IkReal x274=((9.6096e-5)*r01);
IkReal x275=((0.00604261132075472)*r10);
IkReal x276=((0.00604261132075472)*r00);
IkReal x277=((9.6096e-5)*r11);
IkReal x278=((4.62e-6)*r20);
IkReal x279=((0.0047988944)*r22);
IkReal x280=((0.00924)*rxp1_2);
IkReal x281=((-1.0)*x130);
IkReal x282=((9.6096e-5)*r21);
IkReal x283=((4.62e-6)*r10);
IkReal x284=((-1.0)*x283);
IkReal x285=((0.0065988944)*r12);
IkReal x286=((0.00924)*rxp1_1);
IkReal x287=((-1.0)*x286);
IkReal x288=(pp*r12);
IkReal x289=((-1.0)*x155);
IkReal x290=((0.0065988944)*r02);
IkReal x291=((((-1.0)*x290))+x170+x161+x167+x193);
IkReal x292=((4.62e-6)*r00);
IkReal x293=((0.0002772)*r21);
IkReal x294=((0.00924)*rxp1_0);
IkReal x295=((0.000192192)*r20);
IkReal x296=((((9.24e-6)*r11))+(((-1.0)*x176))+(((-1.0)*(0.01848)*rxp0_1))+x175);
IkReal x297=((((0.0005544)*r20))+x178);
IkReal x298=((9.24e-6)*r01);
IkReal x299=((0.01848)*rxp0_0);
IkReal x300=((-1.0)*x282);
IkReal x301=(x151+x147+x144+x288+x289+x285+x286+x283);
IkReal x302=((-1.0)*x292);
IkReal x303=((-1.0)*x293);
IkReal x304=((-1.0)*x294);
op[0]=((-0.000624)+x69+x66+x61+x64+x65+x62+(((-1.0)*x63))+x71+x73+x59+x58+x55+x57+x56+(((-1.0)*x67)));
op[1]=((-0.0073742424)+x81+x86+x83+x87+x84+x89+x88+x74+x77+x76+x78+(((-1.0)*x79)));
op[2]=((((-1.0)*(0.00583886901327178)*rxp0_2))+(((-1.0)*(0.0038184)*r01))+x90+(((-1.0)*(6.07242377380265e-5)*r10))+(((-1.0)*x91))+(((-1.0)*x92))+(((-1.0)*(2.91943450663589e-6)*r21)));
op[3]=((((-1.0)*(0.0038184)*r11))+x93+x94+(((6.07242377380265e-5)*r00))+(((0.12728)*npy)));
op[4]=((-0.000624)+x69+x67+x61+x65+x63+x98+x95+x96+x97+(((-1.0)*x64))+(((-1.0)*x59))+x71+x73+x58+x57);
op[5]=((-0.0073742424)+x99+x85+(((-1.0)*x88))+(((-1.0)*x87))+x74+x77+x76+x79+x78);
op[6]=((-0.160749208543396)+(((-1.0)*x112))+x102+x104+x100+x101+x107+x109+x108+(((-1.0)*x111))+(((-1.0)*x105))+x114+x110);
op[7]=(x131+x124+x121+x123+(((-1.0)*x118))+(((-1.0)*x119))+x115+x117+x116);
op[8]=(x132+(((2.77454389937107)*npy))+(((0.0832363169811321)*r11))+(((-1.0)*(0.001323712)*r00))+(((-1.0)*x133)));
op[9]=(x136+x134+(((6.364e-5)*r21))+(((-1.0)*(0.0832363169811321)*r01))+(((-1.0)*(0.001323712)*r10))+(((-1.0)*x135))+(((0.12728)*rxp0_2)));
op[10]=((-0.160749208543396)+x138+x137+x102+x105+x104+x100+x101+x112+x111);
op[11]=(x139+x131+x120+x122+x140+(((-1.0)*x124))+(((-1.0)*x115))+x119+x118);
op[12]=(x156+x155+x152+x151+x154+x149+x148+x141+x146+x143+x144);
op[13]=(x158+x157+x171+x160+x161+x163+x164+x166+x169+x168+x162);
op[14]=((((-1.0)*x172))+x177+x174);
op[15]=(x179+(((-1.0)*x182))+(((-1.0)*x181))+x184+x180);
op[16]=(x154+x142+x185+x186);
op[17]=(x159+x171+x161+x163+x165+x169+x168+x190+x188+x189+x187);
op[18]=(x159+x170+x164+x166+x168+x192+x191+x193+x188+x189+x187);
op[19]=(x156+x155+x152+x151+x153+x149+x148+x142+x146+x144+x185);
op[20]=(x179+x194+x183+x181+x182);
op[21]=(x173+x172+x177);
op[22]=(x158+x157+x170+x160+x165+x168+x162+x192+x191+x193+x190);
op[23]=(x153+x141+x143+x186);
op[24]=((((-1.0)*x200))+(((-1.0)*x198))+(((-1.0)*x196))+x201+x195+x197+(((-1.0)*x199)));
op[25]=(x203+x206+x205+x202+(((-1.0)*x204)));
op[26]=((((-1.0)*(0.00237308298211194)*r20))+(((-1.0)*(0.000849689687709175)*r21))+(((0.00381673398730525)*rxp1_1))+(((0.366993652625505)*npy*pz))+(((0.00012)*r01))+(((-1.0)*(0.183496826312752)*pp*r21)));
op[27]=((((-1.0)*(0.004)*npy))+(((-1.0)*(0.00381673398730525)*rxp1_0))+(((-1.0)*(0.000114502019619158)*r21))+(((0.00012)*r11)));
op[28]=((((-1.0)*x197))+(((-1.0)*x201))+x200+x195+x196+x199+x198);
op[29]=((((-1.0)*x205))+(((-1.0)*x206))+x204+x202+(((-1.0)*x203)));
op[30]=(x210+x209+x208+x207+(((-1.0)*x211)));
op[31]=((((-1.0)*x214))+(((-1.0)*x216))+(((-1.0)*x220))+(((-1.0)*x213))+x212+x218+x215);
op[32]=((((-1.0)*(0.002496)*r21))+(((-1.0)*(0.0871949685534591)*npy))+(((0.0832)*rxp1_0))+(((-1.0)*(0.00261584905660377)*r11)));
op[33]=((((0.0185221664)*r21))+(((0.051730224)*r20))+((r21*x222))+(((-1.0)*pz*x221))+(((0.0832)*rxp1_1))+(((0.00261584905660377)*r01)));
op[34]=((((-1.0)*x208))+(((-1.0)*x209))+x211+(((-1.0)*x210))+x207);
op[35]=((((-1.0)*x215))+(((-1.0)*x218))+x213+x214+x212+x216+x220);
op[36]=(x226+x224+x234);
op[37]=(x249+x244+x248+x241+x243+x246+x240+x236+x238);
op[38]=(x250+x251);
op[39]=((((-1.0)*x256))+(((-1.0)*x253))+(((-1.0)*x252))+x254+x255);
op[40]=(x257+x225+x224);
op[41]=(x245+x240+x258+x236+x238);
op[42]=(x246+x258+x237+x235+x239);
op[43]=(x225+x223+x234);
op[44]=((((-1.0)*x255))+x256+x254+x252+x253);
op[45]=((((-1.0)*x250))+x251);
op[46]=(x249+x244+x248+x241+x243+x245+x237+x235+x239);
op[47]=(x257+x226+x223);
op[48]=(x262+x260+x263+x261+x95+x96+x259+x55+x56);
op[49]=((-0.0063830744)+x269+x265+x264+x266+x81+x83+x85+x84+x89+(((-1.0)*x268))+x75+(((-1.0)*x267)));
op[50]=(x91+x92+x90+(((0.000847755337564916)*rxp0_2))+(((8.81665551067513e-6)*r10))+(((-1.0)*(0.0005544)*r01))+(((-1.0)*(4.23877668782458e-7)*r21)));
op[51]=((((-1.0)*x94))+(((0.01848)*npy))+x93+(((-1.0)*(0.0005544)*r11))+(((-1.0)*(8.81665551067513e-6)*r00)));
op[52]=((((-1.0)*x259))+(((-1.0)*x261))+x263+(((-1.0)*x260))+x66+x62+x98+x97+(((-1.0)*x262)));
op[53]=((-0.0063830744)+x268+x265+x264+x267+x266+x99+(((-1.0)*x269))+x86+x75);
op[54]=((-0.139142992895597)+x138+x103+x107+x109+x108+(((-1.0)*x275))+(((-1.0)*x273))+x272+x274+x270+x271+x114);
op[55]=((0.0136024150943396)+x128+x125+x126+x127+x121+x122+x140+(((-1.0)*x280))+x279+x276+x277+x72+x281+(((-1.0)*x278))+x116);
op[56]=(x133+x132+(((0.000192192)*r00))+(((0.402840754716981)*npy))+(((0.0120852226415094)*r11)));
op[57]=(x135+x134+(((9.24e-6)*r21))+(((0.000192192)*r10))+(((-1.0)*(0.01848)*rxp0_2))+(((-1.0)*x136))+(((-1.0)*(0.0120852226415094)*r01)));
op[58]=((-0.139142992895597)+x137+x103+(((-1.0)*x274))+x272+x273+x275+x270+x271+x110);
op[59]=((0.0136024150943396)+x139+(((-1.0)*x277))+x128+x125+x126+x127+x120+x123+(((-1.0)*x276))+x279+x278+x72+x281+x280+x117);
op[60]=(x150+x153+x148+x144+x288+x287+x289+x285+x284+x282+x185);
op[61]=(x291+x292+x293+x294+x162+x190+x188);
op[62]=(x295+x296+x173);
op[63]=(x297+x299+(((-1.0)*x298))+x183+x180);
op[64]=(x301+x300+x153+x141);
op[65]=(x291+x303+x302+x304+x158+x164+x189);
op[66]=(x290+x293+x302+x304+x158+x171+x167+x169+x191+x190+x189);
op[67]=(x300+x150+x154+x148+x141+x144+x288+x287+x289+x285+x284);
op[68]=(x297+x298+(((-1.0)*x299))+x194+x184);
op[69]=(x296+(((-1.0)*x295))+x174);
op[70]=(x292+x290+x294+x303+x171+x164+x167+x169+x162+x191+x188);
op[71]=(x301+x154+x282+x185);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j6array[16], cj6array[16], sj6array[16], j7array[16], cj7array[16], sj7array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ij6 += 3)
{
IkReal htj6 = zeror[ij6+0], htj7 = zeror[ij6+1], htj2 = zeror[ij6+2];
if(isnan(htj6)||isnan(htj7)||isnan(htj2)){
continue;
}
j6array[numsolutions]=((2.0)*(atan(htj6)));
j7array[numsolutions]=((2.0)*(atan(htj7)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x305=htj6*htj6;
CheckValue<IkReal> x306=IKPowWithIntegerCheck(((1.0)+x305),-1);
if(!x306.valid){
continue;
}
cj6array[numsolutions]=((x306.value)*(((1.0)+(((-1.0)*x305)))));
CheckValue<IkReal> x307=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x307.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x307.value));
}
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x308=htj7*htj7;
CheckValue<IkReal> x309=IKPowWithIntegerCheck(((1.0)+x308),-1);
if(!x309.valid){
continue;
}
cj7array[numsolutions]=((x309.value)*(((1.0)+(((-1.0)*x308)))));
CheckValue<IkReal> x310=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x310.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x310.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x311=htj2*htj2;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((1.0)+x311),-1);
if(!x312.valid){
continue;
}
cj2array[numsolutions]=((x312.value)*(((1.0)+(((-1.0)*x311)))));
CheckValue<IkReal> x313=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x313.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x313.value));
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j6valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj6 = 16;
_nj7 = 1;
_nj2 = 1;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
_ij7[0] = 0; _ij7[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( !j6valid[iij6] ) { continue; }
if( IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(cj7array[ij6]-cj7array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij6]-sj7array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij6]-cj2array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij6]-sj2array[iij6]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j6valid[iij6]=false; _ij6[1] = iij6; _ij7[1] = 0; _ij2[1] = 0;  break; 
}
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

    j7 = j7array[ij6]; cj7 = cj7array[ij6]; sj7 = sj7array[ij6];

    j2 = j2array[ij6]; cj2 = cj2array[ij6]; sj2 = sj2array[ij6];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[1];
IkReal x314=((4.0)*cj2);
IkReal x315=(cj7*r01*x314);
IkReal x316=(r00*sj7*x314);
IkReal x317=((4.0)*sj2);
IkReal x318=(cj7*r11*x317);
IkReal x319=(r10*sj7*x317);
IkReal x320=(cj2*r02*sj6);
IkReal x321=(r12*sj2*sj6);
IkReal x322=(cj2*cj6*cj7*r00);
IkReal x323=(cj2*cj6*r01*sj7);
IkReal x324=(cj6*cj7*r10*sj2);
IkReal x325=(cj6*r11*sj2*sj7);
j5eval[0]=((((0.5)*(IKabs(((((-16.0)*x325))+(((-16.0)*x323))+(((-16.0)*x320))+(((-16.0)*x321))+(((16.0)*x324))+(((16.0)*x322)))))))+(IKabs(((((-1.0)*x315))+(((-1.0)*x318))+(((-1.0)*x319))+(((-1.0)*x316)))))+(IKabs(((((-8.0)*x323))+(((8.0)*x324))+(((-8.0)*x325))+(((-8.0)*x321))+(((8.0)*x322))+(((-8.0)*x320)))))+(((0.5)*(IKabs((x315+x316+x319+x318))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j3, j4, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x326=((4.0)*cj2);
IkReal x327=(cj7*r01*x326);
IkReal x328=(r00*sj7*x326);
IkReal x329=((4.0)*sj2);
IkReal x330=(cj7*r11*x329);
IkReal x331=(r10*sj7*x329);
IkReal x332=((((-1.0)*x328))+(((-1.0)*x327))+(((-1.0)*x330))+(((-1.0)*x331)));
IkReal x333=(cj2*r02*sj6);
IkReal x334=(r12*sj2*sj6);
IkReal x335=(cj2*cj6*cj7*r00);
IkReal x336=(cj2*cj6*r01*sj7);
IkReal x337=(cj6*cj7*r10*sj2);
IkReal x338=(cj6*r11*sj2*sj7);
IkReal x339=((((8.0)*x337))+(((8.0)*x335))+(((-8.0)*x333))+(((-8.0)*x334))+(((-8.0)*x336))+(((-8.0)*x338)));
IkReal x340=(x331+x330+x328+x327);
op[0]=x332;
op[1]=x339;
op[2]=x332;
op[3]=((((-16.0)*x334))+(((-16.0)*x333))+(((-16.0)*x336))+(((16.0)*x335))+(((16.0)*x337))+(((-16.0)*x338)));
op[4]=x340;
op[5]=x339;
op[6]=x340;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x341=((1.0)*r02);
IkReal x342=((1.0)*cj7);
IkReal x343=(cj5*cj6);
if( IKabs((((sj6*((r01*sj7))))+(((-1.0)*cj6*x341))+(((-1.0)*r00*sj6*x342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj7*x343))+(((-1.0)*(1.0)*r00*sj5*sj7))+(((-1.0)*r01*sj5*x342))+(((-1.0)*cj5*sj6*x341))+((cj7*r00*x343)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*((r01*sj7))))+(((-1.0)*cj6*x341))+(((-1.0)*r00*sj6*x342))))+IKsqr(((((-1.0)*r01*sj7*x343))+(((-1.0)*(1.0)*r00*sj5*sj7))+(((-1.0)*r01*sj5*x342))+(((-1.0)*cj5*sj6*x341))+((cj7*r00*x343))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*((r01*sj7))))+(((-1.0)*cj6*x341))+(((-1.0)*r00*sj6*x342))), ((((-1.0)*r01*sj7*x343))+(((-1.0)*(1.0)*r00*sj5*sj7))+(((-1.0)*r01*sj5*x342))+(((-1.0)*cj5*sj6*x341))+((cj7*r00*x343))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x344=(r01*sj7);
IkReal x345=IKsin(j4);
IkReal x346=(cj7*r00);
IkReal x347=IKcos(j4);
IkReal x348=(r02*sj6);
IkReal x349=(cj7*r01);
IkReal x350=(r00*sj7);
IkReal x351=((0.0136)*cj6);
evalcond[0]=((((-1.0)*x345))+(((-1.0)*sj6*x346))+(((-1.0)*cj6*r02))+((sj6*x344)));
evalcond[1]=((((-1.0)*cj5*cj6*x346))+((cj5*cj6*x344))+((cj5*x348))+((sj5*x350))+((sj5*x349))+x347);
evalcond[2]=((0.0104)+(((-1.0)*(1.0)*px))+(((-0.0159)*x347))+(((-0.0005)*x345))+(((-0.3549)*x349))+(((-0.3549)*x350))+(((-1.0)*x346*x351))+(((-0.01822)*x346))+((x344*x351))+(((0.0136)*x348))+(((0.01822)*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=1.0;
j2=0;
IkReal x352=(cj7*sj6);
IkReal x353=(sj6*sj7);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs(((((-1.0)*(1.0)*cj6*r12))+((r11*x353))+(((-1.0)*r10*x352)))))+(IKabs(((((-1.0)*r21*x353))+((r20*x352))+((cj6*r22))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=1.0;
j2=0;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x354=(sj6*sj7);
IkReal x355=(cj7*sj6);
if( IKabs(((((-1.0)*(1.0)*cj6*r12))+((r11*x354))+(((-1.0)*r10*x355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x355))+(((-1.0)*r21*x354))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*cj6*r12))+((r11*x354))+(((-1.0)*r10*x355))))+IKsqr((((r20*x355))+(((-1.0)*r21*x354))+((cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*(1.0)*cj6*r12))+((r11*x354))+(((-1.0)*r10*x355))), (((r20*x355))+(((-1.0)*r21*x354))+((cj6*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x356=IKcos(j3);
IkReal x357=((1.0)*cj6);
IkReal x358=(sj6*sj7);
IkReal x359=((1.0)*cj7*sj6);
IkReal x360=IKsin(j3);
IkReal x361=(sj5*sj6);
IkReal x362=((1.0)*cj5*cj7);
IkReal x363=((1.0)*cj5*sj7);
IkReal x364=(cj6*sj5*sj7);
IkReal x365=((1.0)*cj6*cj7*sj5);
IkReal x366=((0.01822)*cj7);
IkReal x367=((0.3549)*cj7);
IkReal x368=((0.3549)*sj7);
IkReal x369=((0.01822)*sj7);
IkReal x370=((0.0136)*sj6);
IkReal x371=((0.0136)*cj6*cj7);
IkReal x372=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x358))+(((-1.0)*r22*x357))+x356+(((-1.0)*r20*x359)));
evalcond[1]=((((-1.0)*r10*x359))+(((-1.0)*x360))+((r11*x358))+(((-1.0)*r12*x357)));
evalcond[2]=(((r22*x361))+(((-1.0)*r20*x363))+(((-1.0)*r21*x362))+x360+(((-1.0)*r20*x365))+((r21*x364)));
evalcond[3]=((((-1.0)*r10*x363))+(((-1.0)*r11*x362))+((r12*x361))+x356+(((-1.0)*r10*x365))+((r11*x364)));
evalcond[4]=((((-1.0)*r20*x371))+((r21*x372))+(((-1.0)*(1.0)*pz))+((r21*x369))+(((0.0005)*x356))+(((-1.0)*r21*x367))+((r22*x370))+(((-1.0)*r20*x368))+(((-1.0)*r20*x366))+(((-0.3466)*x360)));
evalcond[5]=((-0.03)+(((-0.3466)*x356))+(((-1.0)*(1.0)*py))+((r11*x369))+(((-1.0)*r11*x367))+((r12*x370))+(((-1.0)*r10*x368))+(((-0.0005)*x360))+(((-1.0)*r10*x366))+((r11*x372))+(((-1.0)*r10*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x373=(cj7*sj6);
IkReal x374=(sj6*sj7);
if( IKabs((((cj6*r12))+((r10*x373))+(((-1.0)*r11*x374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x374))+(((-1.0)*r20*x373))+(((-1.0)*(1.0)*cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r12))+((r10*x373))+(((-1.0)*r11*x374))))+IKsqr((((r21*x374))+(((-1.0)*r20*x373))+(((-1.0)*(1.0)*cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj6*r12))+((r10*x373))+(((-1.0)*r11*x374))), (((r21*x374))+(((-1.0)*r20*x373))+(((-1.0)*(1.0)*cj6*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x375=IKsin(j3);
IkReal x376=((1.0)*cj6);
IkReal x377=(sj6*sj7);
IkReal x378=((1.0)*cj7*sj6);
IkReal x379=IKcos(j3);
IkReal x380=(sj5*sj6);
IkReal x381=((1.0)*cj5*cj7);
IkReal x382=((1.0)*cj5*sj7);
IkReal x383=(cj6*sj5*sj7);
IkReal x384=((1.0)*cj6*cj7*sj5);
IkReal x385=((0.01822)*cj7);
IkReal x386=((0.3549)*cj7);
IkReal x387=((0.3549)*sj7);
IkReal x388=((0.01822)*sj7);
IkReal x389=((0.0136)*sj6);
IkReal x390=((0.0136)*cj6*cj7);
IkReal x391=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r12*x376))+((r11*x377))+(((-1.0)*r10*x378))+x375);
evalcond[1]=((((-1.0)*x379))+((r21*x377))+(((-1.0)*r20*x378))+(((-1.0)*r22*x376)));
evalcond[2]=(((r21*x383))+(((-1.0)*r20*x382))+(((-1.0)*r21*x381))+((r22*x380))+x375+(((-1.0)*r20*x384)));
evalcond[3]=(((r12*x380))+(((-1.0)*r11*x381))+((r11*x383))+(((-1.0)*r10*x382))+x379+(((-1.0)*r10*x384)));
evalcond[4]=((((-1.0)*r20*x390))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x385))+(((-0.3466)*x375))+((r21*x391))+((r21*x388))+((r22*x389))+(((-1.0)*r20*x387))+(((-1.0)*r21*x386))+(((-0.0005)*x379)));
evalcond[5]=((-0.03)+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x390))+(((-1.0)*r10*x385))+((r12*x389))+(((-1.0)*r11*x386))+((r11*x391))+((r11*x388))+(((0.0005)*x375))+(((-0.3466)*x379))+(((-1.0)*r10*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x392=(cj5*sj6);
IkReal x393=(cj7*sj5);
IkReal x394=(sj5*sj7);
IkReal x395=(cj5*cj6*sj7);
IkReal x396=(cj5*cj6*cj7);
IkReal x397=((1.0)*r21);
if( IKabs((((r12*x392))+(((-1.0)*r10*x396))+((r11*x393))+((r11*x395))+((r10*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x393*x397))+(((-1.0)*x395*x397))+(((-1.0)*r22*x392))+(((-1.0)*r20*x394))+((r20*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x392))+(((-1.0)*r10*x396))+((r11*x393))+((r11*x395))+((r10*x394))))+IKsqr(((((-1.0)*x393*x397))+(((-1.0)*x395*x397))+(((-1.0)*r22*x392))+(((-1.0)*r20*x394))+((r20*x396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r12*x392))+(((-1.0)*r10*x396))+((r11*x393))+((r11*x395))+((r10*x394))), ((((-1.0)*x393*x397))+(((-1.0)*x395*x397))+(((-1.0)*r22*x392))+(((-1.0)*r20*x394))+((r20*x396))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x398=IKcos(j3);
IkReal x399=(cj5*sj6);
IkReal x400=(cj7*sj5);
IkReal x401=(sj5*sj7);
IkReal x402=(cj5*cj6*sj7);
IkReal x403=((1.0)*cj5*cj6*cj7);
IkReal x404=IKsin(j3);
IkReal x405=(sj5*sj6);
IkReal x406=((1.0)*cj5*cj7);
IkReal x407=((1.0)*cj5*sj7);
IkReal x408=(cj6*sj5*sj7);
IkReal x409=((1.0)*cj6*cj7*sj5);
IkReal x410=((0.01822)*cj7);
IkReal x411=((0.3549)*cj7);
IkReal x412=((0.3549)*sj7);
IkReal x413=((0.01822)*sj7);
IkReal x414=((0.0136)*sj6);
IkReal x415=((0.0136)*cj6*cj7);
IkReal x416=((0.0136)*cj6*sj7);
evalcond[0]=(x398+((r22*x399))+((r20*x401))+((r21*x400))+(((-1.0)*r20*x403))+((r21*x402)));
evalcond[1]=(((r22*x405))+(((-1.0)*r20*x407))+(((-1.0)*r20*x409))+x404+((r21*x408))+(((-1.0)*r21*x406)));
evalcond[2]=(x398+(((-1.0)*r10*x409))+(((-1.0)*r10*x407))+((r12*x405))+(((-1.0)*r11*x406))+((r11*x408)));
evalcond[3]=(((r10*x401))+(((-1.0)*x404))+((r11*x400))+((r11*x402))+((r12*x399))+(((-1.0)*r10*x403)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-1.0)*r21*x411))+((r21*x416))+(((-0.3466)*x404))+(((-1.0)*r20*x410))+((r22*x414))+(((-0.0159)*x398))+(((-1.0)*r20*x415))+(((-1.0)*r20*x412))+((r21*x413)));
evalcond[5]=((-0.03)+((r11*x416))+((r11*x413))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x411))+(((0.0159)*x404))+((r12*x414))+(((-1.0)*r10*x415))+(((-1.0)*r10*x412))+(((-0.3466)*x398))+(((-1.0)*r10*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x417=(cj5*sj6);
IkReal x418=((1.0)*r11);
IkReal x419=(cj7*sj5);
IkReal x420=(sj5*sj7);
IkReal x421=(cj5*cj6*cj7);
IkReal x422=(cj5*cj6*sj7);
if( IKabs(((((-1.0)*r12*x417))+((r10*x421))+(((-1.0)*x418*x419))+(((-1.0)*r10*x420))+(((-1.0)*x418*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x419))+((r22*x417))+(((-1.0)*r20*x421))+((r20*x420))+((r21*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x417))+((r10*x421))+(((-1.0)*x418*x419))+(((-1.0)*r10*x420))+(((-1.0)*x418*x422))))+IKsqr((((r21*x419))+((r22*x417))+(((-1.0)*r20*x421))+((r20*x420))+((r21*x422))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r12*x417))+((r10*x421))+(((-1.0)*x418*x419))+(((-1.0)*r10*x420))+(((-1.0)*x418*x422))), (((r21*x419))+((r22*x417))+(((-1.0)*r20*x421))+((r20*x420))+((r21*x422))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x423=IKsin(j3);
IkReal x424=(cj5*sj6);
IkReal x425=(cj7*sj5);
IkReal x426=(sj5*sj7);
IkReal x427=(cj5*cj6*sj7);
IkReal x428=((1.0)*cj5*cj6*cj7);
IkReal x429=(sj5*sj6);
IkReal x430=((1.0)*cj5*cj7);
IkReal x431=((1.0)*cj5*sj7);
IkReal x432=(cj6*sj5*sj7);
IkReal x433=((1.0)*cj6*cj7*sj5);
IkReal x434=IKcos(j3);
IkReal x435=((0.01822)*cj7);
IkReal x436=((0.3549)*cj7);
IkReal x437=((0.3549)*sj7);
IkReal x438=((0.01822)*sj7);
IkReal x439=((0.0136)*sj6);
IkReal x440=((0.0136)*cj6*cj7);
IkReal x441=((0.0136)*cj6*sj7);
evalcond[0]=(((r11*x427))+((r10*x426))+((r12*x424))+x423+((r11*x425))+(((-1.0)*r10*x428)));
evalcond[1]=(((r22*x429))+x423+(((-1.0)*r21*x430))+((r21*x432))+(((-1.0)*r20*x431))+(((-1.0)*r20*x433)));
evalcond[2]=(((r21*x427))+(((-1.0)*r20*x428))+((r22*x424))+(((-1.0)*x434))+((r20*x426))+((r21*x425)));
evalcond[3]=(((r11*x432))+(((-1.0)*r11*x430))+x434+(((-1.0)*r10*x431))+((r12*x429))+(((-1.0)*r10*x433)));
evalcond[4]=(((r22*x439))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x437))+(((-0.3466)*x423))+(((-1.0)*r20*x435))+((r21*x438))+(((0.0159)*x434))+(((-1.0)*r20*x440))+((r21*x441))+(((-1.0)*r21*x436)));
evalcond[5]=((-0.03)+(((-1.0)*r10*x435))+(((-1.0)*(1.0)*py))+(((-0.3466)*x434))+((r11*x438))+(((-1.0)*r10*x437))+(((-0.0159)*x423))+((r12*x439))+(((-1.0)*r11*x436))+(((-1.0)*r10*x440))+((r11*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x442=(cj5*cj6);
CheckValue<IkReal> x443=IKPowWithIntegerCheck(sj4,-1);
if(!x443.valid){
continue;
}
CheckValue<IkReal> x444=IKPowWithIntegerCheck(cj4,-1);
if(!x444.valid){
continue;
}
if( IKabs(((x443.value)*((((cj7*r11*sj5))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x442))+((r11*sj7*x442))+((r10*sj5*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x444.value)*((((cj7*r20*sj6))+(((-1.0)*(1.0)*r21*sj6*sj7))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x443.value)*((((cj7*r11*sj5))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x442))+((r11*sj7*x442))+((r10*sj5*sj7))))))+IKsqr(((x444.value)*((((cj7*r20*sj6))+(((-1.0)*(1.0)*r21*sj6*sj7))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x443.value)*((((cj7*r11*sj5))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x442))+((r11*sj7*x442))+((r10*sj5*sj7))))), ((x444.value)*((((cj7*r20*sj6))+(((-1.0)*(1.0)*r21*sj6*sj7))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x445=IKcos(j3);
IkReal x446=(cj4*x445);
IkReal x447=((1.0)*cj6);
IkReal x448=(sj6*sj7);
IkReal x449=((1.0)*cj7*sj6);
IkReal x450=IKsin(j3);
IkReal x451=(cj4*x450);
IkReal x452=(sj5*sj6);
IkReal x453=((1.0)*cj5*cj7);
IkReal x454=((1.0)*cj5*sj7);
IkReal x455=(cj6*sj5*sj7);
IkReal x456=((1.0)*cj6*cj7*sj5);
IkReal x457=(sj4*x445);
IkReal x458=(cj5*sj6);
IkReal x459=(cj7*sj5);
IkReal x460=(sj5*sj7);
IkReal x461=(cj5*cj6*sj7);
IkReal x462=((1.0)*cj5*cj6*cj7);
IkReal x463=(sj4*x450);
IkReal x464=((0.01822)*cj7);
IkReal x465=((0.3549)*cj7);
IkReal x466=((0.3549)*sj7);
IkReal x467=((0.01822)*sj7);
IkReal x468=((0.0136)*sj6);
IkReal x469=((0.0136)*cj6*cj7);
IkReal x470=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x448))+(((-1.0)*r22*x447))+x446+(((-1.0)*r20*x449)));
evalcond[1]=((((-1.0)*x451))+(((-1.0)*r12*x447))+((r11*x448))+(((-1.0)*r10*x449)));
evalcond[2]=((((-1.0)*r20*x456))+((r21*x455))+(((-1.0)*r20*x454))+((r22*x452))+x450+(((-1.0)*r21*x453)));
evalcond[3]=(((r20*x460))+((r21*x461))+((r22*x458))+x457+((r21*x459))+(((-1.0)*r20*x462)));
evalcond[4]=((((-1.0)*r10*x456))+(((-1.0)*r10*x454))+(((-1.0)*r11*x453))+((r12*x452))+x445+((r11*x455)));
evalcond[5]=(((r10*x460))+(((-1.0)*x463))+(((-1.0)*r10*x462))+((r12*x458))+((r11*x459))+((r11*x461)));
evalcond[6]=((((-1.0)*(1.0)*pz))+(((-0.0159)*x457))+((r21*x470))+(((-0.3466)*x450))+(((0.0005)*x446))+(((-1.0)*r20*x464))+(((-1.0)*r20*x466))+((r22*x468))+(((-1.0)*r20*x469))+(((-1.0)*r21*x465))+((r21*x467)));
evalcond[7]=((-0.03)+((r12*x468))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x466))+(((-0.0005)*x451))+(((-1.0)*r11*x465))+(((-0.3466)*x445))+(((-1.0)*r10*x464))+((r11*x467))+(((0.0159)*x463))+(((-1.0)*r10*x469))+((r11*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x471=((1.0)*sj6);
IkReal x472=(cj6*sj5);
IkReal x473=(cj7*r20);
CheckValue<IkReal> x474=IKPowWithIntegerCheck(cj4,-1);
if(!x474.valid){
continue;
}
if( IKabs((((cj5*r20*sj7))+((x472*x473))+(((-1.0)*r21*sj7*x472))+(((-1.0)*r22*sj5*x471))+((cj5*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x474.value)*(((((-1.0)*r21*sj7*x471))+((sj6*x473))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*sj7))+((x472*x473))+(((-1.0)*r21*sj7*x472))+(((-1.0)*r22*sj5*x471))+((cj5*cj7*r21))))+IKsqr(((x474.value)*(((((-1.0)*r21*sj7*x471))+((sj6*x473))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20*sj7))+((x472*x473))+(((-1.0)*r21*sj7*x472))+(((-1.0)*r22*sj5*x471))+((cj5*cj7*r21))), ((x474.value)*(((((-1.0)*r21*sj7*x471))+((sj6*x473))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x475=IKcos(j3);
IkReal x476=(cj4*x475);
IkReal x477=((1.0)*cj6);
IkReal x478=(sj6*sj7);
IkReal x479=((1.0)*cj7*sj6);
IkReal x480=IKsin(j3);
IkReal x481=(cj4*x480);
IkReal x482=(sj5*sj6);
IkReal x483=((1.0)*cj5*cj7);
IkReal x484=((1.0)*cj5*sj7);
IkReal x485=(cj6*sj5*sj7);
IkReal x486=((1.0)*cj6*cj7*sj5);
IkReal x487=(sj4*x475);
IkReal x488=(cj5*sj6);
IkReal x489=(cj7*sj5);
IkReal x490=(sj5*sj7);
IkReal x491=(cj5*cj6*sj7);
IkReal x492=((1.0)*cj5*cj6*cj7);
IkReal x493=(sj4*x480);
IkReal x494=((0.01822)*cj7);
IkReal x495=((0.3549)*cj7);
IkReal x496=((0.3549)*sj7);
IkReal x497=((0.01822)*sj7);
IkReal x498=((0.0136)*sj6);
IkReal x499=((0.0136)*cj6*cj7);
IkReal x500=((0.0136)*cj6*sj7);
evalcond[0]=(x476+(((-1.0)*r20*x479))+((r21*x478))+(((-1.0)*r22*x477)));
evalcond[1]=((((-1.0)*x481))+((r11*x478))+(((-1.0)*r10*x479))+(((-1.0)*r12*x477)));
evalcond[2]=((((-1.0)*r20*x484))+((r21*x485))+(((-1.0)*r20*x486))+(((-1.0)*r21*x483))+((r22*x482))+x480);
evalcond[3]=(((r20*x490))+((r21*x489))+(((-1.0)*r20*x492))+((r22*x488))+x487+((r21*x491)));
evalcond[4]=(x475+((r11*x485))+(((-1.0)*r10*x486))+(((-1.0)*r10*x484))+((r12*x482))+(((-1.0)*r11*x483)));
evalcond[5]=(((r12*x488))+(((-1.0)*r10*x492))+((r10*x490))+(((-1.0)*x493))+((r11*x489))+((r11*x491)));
evalcond[6]=((((-0.0159)*x487))+((r22*x498))+(((-1.0)*(1.0)*pz))+(((0.0005)*x476))+((r21*x500))+(((-1.0)*r21*x495))+(((-1.0)*r20*x499))+(((-1.0)*r20*x496))+(((-1.0)*r20*x494))+((r21*x497))+(((-0.3466)*x480)));
evalcond[7]=((-0.03)+(((-1.0)*(1.0)*py))+(((0.0159)*x493))+(((-0.3466)*x475))+((r11*x500))+((r12*x498))+(((-1.0)*r11*x495))+((r11*x497))+(((-1.0)*r10*x494))+(((-1.0)*r10*x496))+(((-1.0)*r10*x499))+(((-0.0005)*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x501=(sj6*sj7);
IkReal x502=(cj7*sj6);
CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj6*r12))+((r11*x501))+(((-1.0)*r10*x502)))),IkReal((((r20*x502))+((cj6*r22))+(((-1.0)*r21*x501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x504.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x503.value)+(((1.5707963267949)*(x504.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x505=IKcos(j3);
IkReal x506=(cj4*x505);
IkReal x507=((1.0)*cj6);
IkReal x508=(sj6*sj7);
IkReal x509=((1.0)*cj7*sj6);
IkReal x510=IKsin(j3);
IkReal x511=(cj4*x510);
IkReal x512=(sj5*sj6);
IkReal x513=((1.0)*cj5*cj7);
IkReal x514=((1.0)*cj5*sj7);
IkReal x515=(cj6*sj5*sj7);
IkReal x516=((1.0)*cj6*cj7*sj5);
IkReal x517=(sj4*x505);
IkReal x518=(cj5*sj6);
IkReal x519=(cj7*sj5);
IkReal x520=(sj5*sj7);
IkReal x521=(cj5*cj6*sj7);
IkReal x522=((1.0)*cj5*cj6*cj7);
IkReal x523=(sj4*x510);
IkReal x524=((0.01822)*cj7);
IkReal x525=((0.3549)*cj7);
IkReal x526=((0.3549)*sj7);
IkReal x527=((0.01822)*sj7);
IkReal x528=((0.0136)*sj6);
IkReal x529=((0.0136)*cj6*cj7);
IkReal x530=((0.0136)*cj6*sj7);
evalcond[0]=(x506+((r21*x508))+(((-1.0)*r20*x509))+(((-1.0)*r22*x507)));
evalcond[1]=((((-1.0)*r10*x509))+(((-1.0)*r12*x507))+((r11*x508))+(((-1.0)*x511)));
evalcond[2]=((((-1.0)*r20*x516))+((r21*x515))+(((-1.0)*r20*x514))+(((-1.0)*r21*x513))+x510+((r22*x512)));
evalcond[3]=(((r20*x520))+(((-1.0)*r20*x522))+((r21*x519))+((r22*x518))+((r21*x521))+x517);
evalcond[4]=((((-1.0)*r10*x516))+(((-1.0)*r11*x513))+x505+((r12*x512))+(((-1.0)*r10*x514))+((r11*x515)));
evalcond[5]=(((r12*x518))+((r10*x520))+(((-1.0)*x523))+(((-1.0)*r10*x522))+((r11*x521))+((r11*x519)));
evalcond[6]=(((r21*x530))+(((-1.0)*(1.0)*pz))+(((0.0005)*x506))+((r22*x528))+(((-0.0159)*x517))+(((-0.3466)*x510))+((r21*x527))+(((-1.0)*r20*x524))+(((-1.0)*r20*x529))+(((-1.0)*r20*x526))+(((-1.0)*r21*x525)));
evalcond[7]=((-0.03)+(((-1.0)*(1.0)*py))+((r12*x528))+(((-1.0)*r10*x529))+(((-1.0)*r10*x524))+(((-1.0)*r10*x526))+((r11*x530))+((r11*x527))+(((-1.0)*r11*x525))+(((0.0159)*x523))+(((-0.3466)*x505))+(((-0.0005)*x511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x531=(r01*sj7);
IkReal x532=(cj5*cj6);
if( IKabs((((sj6*((cj7*r00))))+((cj6*r02))+(((-1.0)*sj6*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r02*sj6))+((r00*sj5*sj7))+((cj7*r01*sj5))+(((-1.0)*cj7*r00*x532))+((x531*x532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*((cj7*r00))))+((cj6*r02))+(((-1.0)*sj6*x531))))+IKsqr((((cj5*r02*sj6))+((r00*sj5*sj7))+((cj7*r01*sj5))+(((-1.0)*cj7*r00*x532))+((x531*x532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*((cj7*r00))))+((cj6*r02))+(((-1.0)*sj6*x531))), (((cj5*r02*sj6))+((r00*sj5*sj7))+((cj7*r01*sj5))+(((-1.0)*cj7*r00*x532))+((x531*x532))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x533=IKsin(j4);
IkReal x534=(r01*sj7);
IkReal x535=(cj7*r00);
IkReal x536=(r02*sj6);
IkReal x537=(cj7*r01);
IkReal x538=(r00*sj7);
IkReal x539=IKcos(j4);
IkReal x540=((0.0136)*cj6);
evalcond[0]=(x533+((sj6*x534))+(((-1.0)*sj6*x535))+(((-1.0)*cj6*r02)));
evalcond[1]=(((cj5*x536))+(((-1.0)*x539))+(((-1.0)*cj5*cj6*x535))+((sj5*x538))+((cj5*cj6*x534))+((sj5*x537)));
evalcond[2]=((-0.0104)+((x534*x540))+(((0.0005)*x533))+(((-1.0)*(1.0)*px))+(((-0.01822)*x535))+(((0.0159)*x539))+(((-1.0)*x535*x540))+(((-0.3549)*x538))+(((-0.3549)*x537))+(((0.01822)*x534))+(((0.0136)*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x541=(cj7*sj6);
IkReal x542=((1.0)*sj6*sj7);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs((((r20*x541))+(((-1.0)*r21*x542))+((cj6*r22)))))+(IKabs((((cj6*r12))+((r10*x541))+(((-1.0)*r11*x542))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x543=(cj7*sj6);
IkReal x544=((1.0)*sj6*sj7);
if( IKabs((((r10*x543))+((cj6*r12))+(((-1.0)*r11*x544)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x543))+(((-1.0)*r21*x544))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x543))+((cj6*r12))+(((-1.0)*r11*x544))))+IKsqr((((r20*x543))+(((-1.0)*r21*x544))+((cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r10*x543))+((cj6*r12))+(((-1.0)*r11*x544))), (((r20*x543))+(((-1.0)*r21*x544))+((cj6*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x545=IKcos(j3);
IkReal x546=((1.0)*cj6);
IkReal x547=(sj6*sj7);
IkReal x548=((1.0)*cj7*sj6);
IkReal x549=IKsin(j3);
IkReal x550=(sj5*sj6);
IkReal x551=((1.0)*cj5*cj7);
IkReal x552=((1.0)*cj5*sj7);
IkReal x553=(cj6*sj5*sj7);
IkReal x554=((1.0)*cj6*cj7*sj5);
IkReal x555=((0.01822)*cj7);
IkReal x556=((0.3549)*cj7);
IkReal x557=((0.3549)*sj7);
IkReal x558=((0.01822)*sj7);
IkReal x559=((0.0136)*sj6);
IkReal x560=((0.0136)*cj6*cj7);
IkReal x561=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r20*x548))+(((-1.0)*r22*x546))+((r21*x547))+x545);
evalcond[1]=(((r11*x547))+(((-1.0)*r12*x546))+(((-1.0)*r10*x548))+x549);
evalcond[2]=(((r21*x553))+(((-1.0)*r20*x552))+(((-1.0)*r21*x551))+(((-1.0)*r20*x554))+((r22*x550))+x549);
evalcond[3]=((((-1.0)*r10*x552))+(((-1.0)*r10*x554))+((r11*x553))+(((-1.0)*x545))+(((-1.0)*r11*x551))+((r12*x550)));
evalcond[4]=((((-1.0)*(1.0)*pz))+((r21*x558))+(((-0.3466)*x549))+(((-1.0)*r20*x560))+(((-1.0)*r20*x557))+(((-1.0)*r21*x556))+(((0.0005)*x545))+(((-1.0)*r20*x555))+((r21*x561))+((r22*x559)));
evalcond[5]=((0.03)+(((0.0005)*x549))+((r11*x561))+(((-1.0)*(1.0)*py))+((r12*x559))+(((-1.0)*r11*x556))+(((-1.0)*r10*x555))+(((-1.0)*r10*x560))+(((-1.0)*r10*x557))+(((0.3466)*x545))+((r11*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x562=((1.0)*cj6);
IkReal x563=(sj6*sj7);
IkReal x564=((1.0)*cj7*sj6);
if( IKabs((((r11*x563))+(((-1.0)*r12*x562))+(((-1.0)*r10*x564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x562))+(((-1.0)*r20*x564))+((r21*x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x563))+(((-1.0)*r12*x562))+(((-1.0)*r10*x564))))+IKsqr(((((-1.0)*r22*x562))+(((-1.0)*r20*x564))+((r21*x563))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r11*x563))+(((-1.0)*r12*x562))+(((-1.0)*r10*x564))), ((((-1.0)*r22*x562))+(((-1.0)*r20*x564))+((r21*x563))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x565=((1.0)*cj6);
IkReal x566=(sj6*sj7);
IkReal x567=IKcos(j3);
IkReal x568=((-1.0)*x567);
IkReal x569=((1.0)*cj7*sj6);
IkReal x570=IKsin(j3);
IkReal x571=(sj5*sj6);
IkReal x572=((1.0)*cj5*cj7);
IkReal x573=((1.0)*cj5*sj7);
IkReal x574=(cj6*sj5*sj7);
IkReal x575=((1.0)*cj6*cj7*sj5);
IkReal x576=((0.01822)*cj7);
IkReal x577=((0.3549)*cj7);
IkReal x578=((0.3549)*sj7);
IkReal x579=((0.01822)*sj7);
IkReal x580=((0.0136)*sj6);
IkReal x581=((0.0136)*cj6*cj7);
IkReal x582=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r20*x569))+((r21*x566))+x568+(((-1.0)*r22*x565)));
evalcond[1]=(((r11*x566))+(((-1.0)*r12*x565))+(((-1.0)*r10*x569))+(((-1.0)*x570)));
evalcond[2]=(x570+(((-1.0)*r20*x573))+((r21*x574))+(((-1.0)*r20*x575))+(((-1.0)*r21*x572))+((r22*x571)));
evalcond[3]=(((r12*x571))+((r11*x574))+(((-1.0)*r11*x572))+(((-1.0)*r10*x575))+(((-1.0)*r10*x573))+x568);
evalcond[4]=((((-0.3466)*x570))+(((-1.0)*r20*x581))+(((-1.0)*r20*x578))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x577))+(((-1.0)*r20*x576))+((r21*x579))+(((-0.0005)*x567))+((r22*x580))+((r21*x582)));
evalcond[5]=((0.03)+(((-1.0)*r10*x578))+(((-1.0)*(1.0)*py))+((r11*x582))+(((0.3466)*x567))+((r12*x580))+(((-1.0)*r10*x576))+(((-1.0)*r10*x581))+((r11*x579))+(((-1.0)*r11*x577))+(((-0.0005)*x570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x583=(cj7*r21);
IkReal x584=(r20*sj7);
IkReal x585=((1.0)*r22*sj6);
IkReal x586=(cj6*cj7*r20);
IkReal x587=((1.0)*sj5);
IkReal x588=(cj6*r21*sj7);
if( IKabs(((((-1.0)*sj5*x585))+((cj5*x584))+(((-1.0)*x587*x588))+((cj5*x583))+((sj5*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*x588))+(((-1.0)*x584*x587))+(((-1.0)*cj5*x585))+(((-1.0)*x583*x587))+((cj5*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x585))+((cj5*x584))+(((-1.0)*x587*x588))+((cj5*x583))+((sj5*x586))))+IKsqr(((((-1.0)*cj5*x588))+(((-1.0)*x584*x587))+(((-1.0)*cj5*x585))+(((-1.0)*x583*x587))+((cj5*x586))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*sj5*x585))+((cj5*x584))+(((-1.0)*x587*x588))+((cj5*x583))+((sj5*x586))), ((((-1.0)*cj5*x588))+(((-1.0)*x584*x587))+(((-1.0)*cj5*x585))+(((-1.0)*x583*x587))+((cj5*x586))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x589=IKcos(j3);
IkReal x590=(cj5*sj6);
IkReal x591=(cj7*sj5);
IkReal x592=(sj5*sj7);
IkReal x593=(cj5*cj6*sj7);
IkReal x594=((1.0)*cj5*cj6*cj7);
IkReal x595=IKsin(j3);
IkReal x596=(sj5*sj6);
IkReal x597=((1.0)*cj5*cj7);
IkReal x598=((1.0)*cj5*sj7);
IkReal x599=(cj6*sj5*sj7);
IkReal x600=((1.0)*cj6*cj7*sj5);
IkReal x601=((0.01822)*cj7);
IkReal x602=((0.3549)*cj7);
IkReal x603=((0.3549)*sj7);
IkReal x604=((0.01822)*sj7);
IkReal x605=((0.0136)*sj6);
IkReal x606=((0.0136)*cj6*cj7);
IkReal x607=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x591))+(((-1.0)*r20*x594))+((r20*x592))+((r22*x590))+x589+((r21*x593)));
evalcond[1]=(((r11*x591))+((r12*x590))+(((-1.0)*r10*x594))+((r11*x593))+x595+((r10*x592)));
evalcond[2]=((((-1.0)*r20*x598))+(((-1.0)*r21*x597))+((r21*x599))+(((-1.0)*r20*x600))+x595+((r22*x596)));
evalcond[3]=((((-1.0)*r10*x600))+(((-1.0)*x589))+(((-1.0)*r11*x597))+(((-1.0)*r10*x598))+((r12*x596))+((r11*x599)));
evalcond[4]=((((-1.0)*r21*x602))+(((-1.0)*r20*x601))+(((-1.0)*(1.0)*pz))+((r22*x605))+(((-1.0)*r20*x603))+(((-1.0)*r20*x606))+(((-0.0159)*x589))+(((-0.3466)*x595))+((r21*x607))+((r21*x604)));
evalcond[5]=((0.03)+(((-0.0159)*x595))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x602))+(((-1.0)*r10*x606))+(((-1.0)*r10*x603))+(((-1.0)*r10*x601))+((r11*x604))+((r12*x605))+(((0.3466)*x589))+((r11*x607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x608=(cj5*sj6);
IkReal x609=(cj7*sj5);
IkReal x610=(sj5*sj7);
IkReal x611=(cj5*cj6*sj7);
IkReal x612=((1.0)*cj5*cj6*cj7);
if( IKabs((((r12*x608))+((r11*x609))+(((-1.0)*r10*x612))+((r11*x611))+((r10*x610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x608))+((r20*x610))+((r21*x611))+((r21*x609))+(((-1.0)*r20*x612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x608))+((r11*x609))+(((-1.0)*r10*x612))+((r11*x611))+((r10*x610))))+IKsqr((((r22*x608))+((r20*x610))+((r21*x611))+((r21*x609))+(((-1.0)*r20*x612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r12*x608))+((r11*x609))+(((-1.0)*r10*x612))+((r11*x611))+((r10*x610))), (((r22*x608))+((r20*x610))+((r21*x611))+((r21*x609))+(((-1.0)*r20*x612))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x613=IKsin(j3);
IkReal x614=(sj5*sj6);
IkReal x615=((1.0)*cj5*cj7);
IkReal x616=((1.0)*cj5*sj7);
IkReal x617=(cj6*sj5*sj7);
IkReal x618=((1.0)*cj6*cj7*sj5);
IkReal x619=(cj5*sj6);
IkReal x620=(cj7*sj5);
IkReal x621=(sj5*sj7);
IkReal x622=IKcos(j3);
IkReal x623=((-1.0)*x622);
IkReal x624=(cj5*cj6*sj7);
IkReal x625=x612;
IkReal x626=((0.01822)*cj7);
IkReal x627=((0.3549)*cj7);
IkReal x628=((0.3549)*sj7);
IkReal x629=((0.01822)*sj7);
IkReal x630=((0.0136)*sj6);
IkReal x631=((0.0136)*cj6*cj7);
IkReal x632=((0.0136)*cj6*sj7);
evalcond[0]=(x613+(((-1.0)*r21*x615))+(((-1.0)*r20*x616))+(((-1.0)*r20*x618))+((r22*x614))+((r21*x617)));
evalcond[1]=(((r20*x621))+((r22*x619))+(((-1.0)*r20*x625))+x623+((r21*x620))+((r21*x624)));
evalcond[2]=(((r12*x619))+(((-1.0)*x613))+((r11*x620))+(((-1.0)*r10*x625))+((r10*x621))+((r11*x624)));
evalcond[3]=(((r11*x617))+((r12*x614))+x623+(((-1.0)*r11*x615))+(((-1.0)*r10*x618))+(((-1.0)*r10*x616)));
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-0.3466)*x613))+(((-1.0)*r20*x628))+(((-1.0)*r20*x626))+(((-1.0)*r21*x627))+(((0.0159)*x622))+((r22*x630))+((r21*x632))+((r21*x629))+(((-1.0)*r20*x631)));
evalcond[5]=((0.03)+(((-1.0)*r11*x627))+(((0.0159)*x613))+(((-1.0)*(1.0)*py))+((r12*x630))+(((-1.0)*r10*x626))+((r11*x629))+(((-1.0)*r10*x628))+(((-1.0)*r10*x631))+(((0.3466)*x622))+((r11*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x633=((1.0)*sj6);
IkReal x634=((1.0)*sj5);
IkReal x635=(cj5*cj6);
CheckValue<IkReal> x636=IKPowWithIntegerCheck(sj4,-1);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(cj4,-1);
if(!x637.valid){
continue;
}
if( IKabs(((x636.value)*(((((-1.0)*cj7*r11*x634))+(((-1.0)*r11*sj7*x635))+((cj7*r10*x635))+(((-1.0)*cj5*r12*x633))+(((-1.0)*r10*sj7*x634)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x637.value)*((((cj7*r20*sj6))+(((-1.0)*r21*sj7*x633))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x636.value)*(((((-1.0)*cj7*r11*x634))+(((-1.0)*r11*sj7*x635))+((cj7*r10*x635))+(((-1.0)*cj5*r12*x633))+(((-1.0)*r10*sj7*x634))))))+IKsqr(((x637.value)*((((cj7*r20*sj6))+(((-1.0)*r21*sj7*x633))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x636.value)*(((((-1.0)*cj7*r11*x634))+(((-1.0)*r11*sj7*x635))+((cj7*r10*x635))+(((-1.0)*cj5*r12*x633))+(((-1.0)*r10*sj7*x634))))), ((x637.value)*((((cj7*r20*sj6))+(((-1.0)*r21*sj7*x633))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x638=IKcos(j3);
IkReal x639=(cj4*x638);
IkReal x640=((1.0)*cj6);
IkReal x641=(sj6*sj7);
IkReal x642=((1.0)*cj7*sj6);
IkReal x643=IKsin(j3);
IkReal x644=(cj4*x643);
IkReal x645=(sj5*sj6);
IkReal x646=((1.0)*cj5*cj7);
IkReal x647=((1.0)*cj5*sj7);
IkReal x648=(cj6*sj5*sj7);
IkReal x649=((1.0)*cj6*cj7*sj5);
IkReal x650=(sj4*x638);
IkReal x651=(cj5*sj6);
IkReal x652=(cj7*sj5);
IkReal x653=(sj5*sj7);
IkReal x654=(cj5*cj6*sj7);
IkReal x655=((1.0)*cj5*cj6*cj7);
IkReal x656=(sj4*x643);
IkReal x657=((0.01822)*cj7);
IkReal x658=((0.3549)*cj7);
IkReal x659=((0.3549)*sj7);
IkReal x660=((0.01822)*sj7);
IkReal x661=((0.0136)*sj6);
IkReal x662=((0.0136)*cj6*cj7);
IkReal x663=((0.0136)*cj6*sj7);
evalcond[0]=(x639+(((-1.0)*r20*x642))+(((-1.0)*r22*x640))+((r21*x641)));
evalcond[1]=((((-1.0)*r10*x642))+((r11*x641))+(((-1.0)*r12*x640))+x644);
evalcond[2]=(((r21*x648))+(((-1.0)*r20*x649))+((r22*x645))+(((-1.0)*r21*x646))+x643+(((-1.0)*r20*x647)));
evalcond[3]=(((r21*x652))+(((-1.0)*r20*x655))+((r21*x654))+x650+((r20*x653))+((r22*x651)));
evalcond[4]=(((r11*x652))+(((-1.0)*r10*x655))+((r12*x651))+x656+((r11*x654))+((r10*x653)));
evalcond[5]=(((r12*x645))+(((-1.0)*r10*x649))+((r11*x648))+(((-1.0)*r10*x647))+(((-1.0)*r11*x646))+(((-1.0)*x638)));
evalcond[6]=(((r22*x661))+(((0.0005)*x639))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x662))+(((-1.0)*r20*x657))+(((-0.0159)*x650))+(((-1.0)*r20*x659))+((r21*x663))+((r21*x660))+(((-0.3466)*x643))+(((-1.0)*r21*x658)));
evalcond[7]=((0.03)+((r11*x660))+(((-0.0159)*x656))+(((-1.0)*(1.0)*py))+((r12*x661))+((r11*x663))+(((0.0005)*x644))+(((-1.0)*r10*x657))+(((-1.0)*r11*x658))+(((-1.0)*r10*x662))+(((0.3466)*x638))+(((-1.0)*r10*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x664=((1.0)*sj6);
IkReal x665=(cj6*sj5);
IkReal x666=(cj7*r20);
CheckValue<IkReal> x667=IKPowWithIntegerCheck(cj4,-1);
if(!x667.valid){
continue;
}
if( IKabs(((((-1.0)*r21*sj7*x665))+((cj5*r20*sj7))+((x665*x666))+(((-1.0)*r22*sj5*x664))+((cj5*cj7*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x667.value)*(((((-1.0)*r21*sj7*x664))+((sj6*x666))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj7*x665))+((cj5*r20*sj7))+((x665*x666))+(((-1.0)*r22*sj5*x664))+((cj5*cj7*r21))))+IKsqr(((x667.value)*(((((-1.0)*r21*sj7*x664))+((sj6*x666))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*sj7*x665))+((cj5*r20*sj7))+((x665*x666))+(((-1.0)*r22*sj5*x664))+((cj5*cj7*r21))), ((x667.value)*(((((-1.0)*r21*sj7*x664))+((sj6*x666))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x668=IKcos(j3);
IkReal x669=(cj4*x668);
IkReal x670=((1.0)*cj6);
IkReal x671=(sj6*sj7);
IkReal x672=((1.0)*cj7*sj6);
IkReal x673=IKsin(j3);
IkReal x674=(cj4*x673);
IkReal x675=(sj5*sj6);
IkReal x676=((1.0)*cj5*cj7);
IkReal x677=((1.0)*cj5*sj7);
IkReal x678=(cj6*sj5*sj7);
IkReal x679=((1.0)*cj6*cj7*sj5);
IkReal x680=(sj4*x668);
IkReal x681=(cj5*sj6);
IkReal x682=(cj7*sj5);
IkReal x683=(sj5*sj7);
IkReal x684=(cj5*cj6*sj7);
IkReal x685=((1.0)*cj5*cj6*cj7);
IkReal x686=(sj4*x673);
IkReal x687=((0.01822)*cj7);
IkReal x688=((0.3549)*cj7);
IkReal x689=((0.3549)*sj7);
IkReal x690=((0.01822)*sj7);
IkReal x691=((0.0136)*sj6);
IkReal x692=((0.0136)*cj6*cj7);
IkReal x693=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x671))+(((-1.0)*r22*x670))+x669+(((-1.0)*r20*x672)));
evalcond[1]=(((r11*x671))+(((-1.0)*r12*x670))+(((-1.0)*r10*x672))+x674);
evalcond[2]=((((-1.0)*r20*x679))+(((-1.0)*r21*x676))+((r22*x675))+((r21*x678))+x673+(((-1.0)*r20*x677)));
evalcond[3]=(((r20*x683))+((r21*x682))+((r21*x684))+(((-1.0)*r20*x685))+x680+((r22*x681)));
evalcond[4]=(((r12*x681))+((r11*x682))+(((-1.0)*r10*x685))+((r11*x684))+x686+((r10*x683)));
evalcond[5]=((((-1.0)*r11*x676))+((r11*x678))+(((-1.0)*r10*x677))+(((-1.0)*r10*x679))+(((-1.0)*x668))+((r12*x675)));
evalcond[6]=((((0.0005)*x669))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x692))+((r22*x691))+((r21*x693))+(((-1.0)*r20*x689))+(((-0.0159)*x680))+(((-0.3466)*x673))+(((-1.0)*r20*x687))+((r21*x690))+(((-1.0)*r21*x688)));
evalcond[7]=((0.03)+(((-1.0)*r11*x688))+(((-1.0)*(1.0)*py))+((r12*x691))+(((-0.0159)*x686))+(((0.0005)*x674))+((r11*x693))+(((0.3466)*x668))+(((-1.0)*r10*x687))+((r11*x690))+(((-1.0)*r10*x692))+(((-1.0)*r10*x689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x694=(cj7*sj6);
IkReal x695=((1.0)*sj6*sj7);
CheckValue<IkReal> x696 = IKatan2WithCheck(IkReal((((cj6*r12))+((r10*x694))+(((-1.0)*r11*x695)))),IkReal((((r20*x694))+(((-1.0)*r21*x695))+((cj6*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x697.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x696.value)+(((1.5707963267949)*(x697.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x698=IKcos(j3);
IkReal x699=(cj4*x698);
IkReal x700=((1.0)*cj6);
IkReal x701=(sj6*sj7);
IkReal x702=((1.0)*cj7*sj6);
IkReal x703=IKsin(j3);
IkReal x704=(cj4*x703);
IkReal x705=(sj5*sj6);
IkReal x706=((1.0)*cj5*cj7);
IkReal x707=((1.0)*cj5*sj7);
IkReal x708=(cj6*sj5*sj7);
IkReal x709=((1.0)*cj6*cj7*sj5);
IkReal x710=(sj4*x698);
IkReal x711=(cj5*sj6);
IkReal x712=(cj7*sj5);
IkReal x713=(sj5*sj7);
IkReal x714=(cj5*cj6*sj7);
IkReal x715=((1.0)*cj5*cj6*cj7);
IkReal x716=(sj4*x703);
IkReal x717=((0.01822)*cj7);
IkReal x718=((0.3549)*cj7);
IkReal x719=((0.3549)*sj7);
IkReal x720=((0.01822)*sj7);
IkReal x721=((0.0136)*sj6);
IkReal x722=((0.0136)*cj6*cj7);
IkReal x723=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x701))+x699+(((-1.0)*r22*x700))+(((-1.0)*r20*x702)));
evalcond[1]=((((-1.0)*r12*x700))+((r11*x701))+x704+(((-1.0)*r10*x702)));
evalcond[2]=((((-1.0)*r21*x706))+(((-1.0)*r20*x707))+x703+((r21*x708))+((r22*x705))+(((-1.0)*r20*x709)));
evalcond[3]=(((r21*x712))+((r21*x714))+x710+(((-1.0)*r20*x715))+((r22*x711))+((r20*x713)));
evalcond[4]=((((-1.0)*r10*x715))+((r11*x712))+((r11*x714))+x716+((r12*x711))+((r10*x713)));
evalcond[5]=((((-1.0)*r11*x706))+(((-1.0)*r10*x709))+((r12*x705))+(((-1.0)*r10*x707))+((r11*x708))+(((-1.0)*x698)));
evalcond[6]=((((0.0005)*x699))+(((-1.0)*(1.0)*pz))+((r21*x720))+(((-0.3466)*x703))+(((-1.0)*r21*x718))+(((-0.0159)*x710))+((r22*x721))+(((-1.0)*r20*x717))+(((-1.0)*r20*x722))+((r21*x723))+(((-1.0)*r20*x719)));
evalcond[7]=((0.03)+((r11*x720))+(((-1.0)*(1.0)*py))+(((0.0005)*x704))+(((-1.0)*r10*x717))+(((0.3466)*x698))+(((-1.0)*r11*x718))+(((-0.0159)*x716))+(((-1.0)*r10*x719))+((r11*x723))+(((-1.0)*r10*x722))+((r12*x721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x724=((1.0)*r12);
IkReal x725=((1.0)*cj7);
IkReal x726=(cj5*cj6);
if( IKabs((((sj6*((r11*sj7))))+(((-1.0)*cj6*x724))+(((-1.0)*r10*sj6*x725)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj7*x726))+(((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*cj5*sj6*x724))+(((-1.0)*r11*sj5*x725))+((cj7*r10*x726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*((r11*sj7))))+(((-1.0)*cj6*x724))+(((-1.0)*r10*sj6*x725))))+IKsqr(((((-1.0)*r11*sj7*x726))+(((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*cj5*sj6*x724))+(((-1.0)*r11*sj5*x725))+((cj7*r10*x726))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*((r11*sj7))))+(((-1.0)*cj6*x724))+(((-1.0)*r10*sj6*x725))), ((((-1.0)*r11*sj7*x726))+(((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*cj5*sj6*x724))+(((-1.0)*r11*sj5*x725))+((cj7*r10*x726))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x727=(r11*sj7);
IkReal x728=IKsin(j4);
IkReal x729=(cj7*r10);
IkReal x730=IKcos(j4);
IkReal x731=(r12*sj6);
IkReal x732=(cj7*r11);
IkReal x733=(r10*sj7);
IkReal x734=((0.0136)*cj6);
evalcond[0]=((((-1.0)*cj6*r12))+((sj6*x727))+(((-1.0)*sj6*x729))+(((-1.0)*x728)));
evalcond[1]=(((cj5*x731))+x730+((sj5*x733))+(((-1.0)*cj5*cj6*x729))+((cj5*cj6*x727))+((sj5*x732)));
evalcond[2]=((0.0104)+(((-0.3549)*x732))+(((-1.0)*(1.0)*py))+((x727*x734))+(((-0.0005)*x728))+(((0.0136)*x731))+(((-1.0)*x729*x734))+(((-0.01822)*x729))+(((0.01822)*x727))+(((-0.3549)*x733))+(((-0.0159)*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x735=(cj7*sj6);
IkReal x736=((1.0)*sj6*sj7);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs(((((-1.0)*r21*x736))+((r20*x735))+((cj6*r22)))))+(IKabs((((cj6*r02))+((r00*x735))+(((-1.0)*r01*x736))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x737=(cj7*sj6);
IkReal x738=((1.0)*sj6*sj7);
if( IKabs((((cj6*r02))+((r00*x737))+(((-1.0)*r01*x738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x738))+((r20*x737))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r02))+((r00*x737))+(((-1.0)*r01*x738))))+IKsqr(((((-1.0)*r21*x738))+((r20*x737))+((cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj6*r02))+((r00*x737))+(((-1.0)*r01*x738))), ((((-1.0)*r21*x738))+((r20*x737))+((cj6*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x739=IKcos(j3);
IkReal x740=((1.0)*cj6);
IkReal x741=(sj6*sj7);
IkReal x742=((1.0)*cj7*sj6);
IkReal x743=IKsin(j3);
IkReal x744=(sj5*sj6);
IkReal x745=((1.0)*cj5*cj7);
IkReal x746=((1.0)*cj5*sj7);
IkReal x747=(cj6*sj5*sj7);
IkReal x748=((1.0)*cj6*cj7*sj5);
IkReal x749=((0.01822)*cj7);
IkReal x750=((0.3549)*cj7);
IkReal x751=((0.3549)*sj7);
IkReal x752=((0.01822)*sj7);
IkReal x753=((0.0136)*sj6);
IkReal x754=((0.0136)*cj6*cj7);
IkReal x755=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r20*x742))+((r21*x741))+x739+(((-1.0)*r22*x740)));
evalcond[1]=((((-1.0)*r00*x742))+(((-1.0)*r02*x740))+x743+((r01*x741)));
evalcond[2]=((((-1.0)*r21*x745))+(((-1.0)*r20*x748))+(((-1.0)*r20*x746))+((r21*x747))+x743+((r22*x744)));
evalcond[3]=(((r02*x744))+(((-1.0)*x739))+(((-1.0)*r00*x748))+((r01*x747))+(((-1.0)*r00*x746))+(((-1.0)*r01*x745)));
evalcond[4]=(((r21*x755))+(((-0.3466)*x743))+(((-1.0)*r21*x750))+((r22*x753))+(((-1.0)*r20*x754))+(((-1.0)*r20*x751))+(((-1.0)*(1.0)*pz))+((r21*x752))+(((-1.0)*r20*x749))+(((0.0005)*x739)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*px))+((r01*x755))+(((-1.0)*r00*x754))+((r01*x752))+((r02*x753))+(((-1.0)*r00*x749))+(((0.0005)*x743))+(((0.3466)*x739))+(((-1.0)*r01*x750))+(((-1.0)*r00*x751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x756=((1.0)*cj6);
IkReal x757=(sj6*sj7);
IkReal x758=((1.0)*cj7*sj6);
if( IKabs(((((-1.0)*r00*x758))+((r01*x757))+(((-1.0)*r02*x756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x756))+((r21*x757))+(((-1.0)*r20*x758)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x758))+((r01*x757))+(((-1.0)*r02*x756))))+IKsqr(((((-1.0)*r22*x756))+((r21*x757))+(((-1.0)*r20*x758))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x758))+((r01*x757))+(((-1.0)*r02*x756))), ((((-1.0)*r22*x756))+((r21*x757))+(((-1.0)*r20*x758))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x759=((1.0)*cj6);
IkReal x760=(sj6*sj7);
IkReal x761=IKcos(j3);
IkReal x762=((-1.0)*x761);
IkReal x763=((1.0)*cj7*sj6);
IkReal x764=IKsin(j3);
IkReal x765=(sj5*sj6);
IkReal x766=((1.0)*cj5*cj7);
IkReal x767=((1.0)*cj5*sj7);
IkReal x768=(cj6*sj5*sj7);
IkReal x769=((1.0)*cj6*cj7*sj5);
IkReal x770=((0.01822)*cj7);
IkReal x771=((0.3549)*cj7);
IkReal x772=((0.3549)*sj7);
IkReal x773=((0.01822)*sj7);
IkReal x774=((0.0136)*sj6);
IkReal x775=((0.0136)*cj6*cj7);
IkReal x776=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x760))+(((-1.0)*r22*x759))+x762+(((-1.0)*r20*x763)));
evalcond[1]=(((r01*x760))+(((-1.0)*x764))+(((-1.0)*r02*x759))+(((-1.0)*r00*x763)));
evalcond[2]=((((-1.0)*r20*x767))+(((-1.0)*r21*x766))+((r21*x768))+(((-1.0)*r20*x769))+x764+((r22*x765)));
evalcond[3]=((((-1.0)*r00*x767))+(((-1.0)*r01*x766))+((r02*x765))+((r01*x768))+x762+(((-1.0)*r00*x769)));
evalcond[4]=(((r21*x776))+(((-1.0)*r20*x775))+(((-1.0)*r20*x770))+(((-1.0)*(1.0)*pz))+((r21*x773))+(((-0.0005)*x761))+((r22*x774))+(((-1.0)*r20*x772))+(((-0.3466)*x764))+(((-1.0)*r21*x771)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x772))+(((-1.0)*r00*x770))+((r01*x773))+(((0.3466)*x761))+((r02*x774))+(((-1.0)*r00*x775))+(((-1.0)*r01*x771))+((r01*x776))+(((-0.0005)*x764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x777=(cj7*r21);
IkReal x778=(r20*sj7);
IkReal x779=((1.0)*r22*sj6);
IkReal x780=(cj6*cj7*r20);
IkReal x781=((1.0)*sj5);
IkReal x782=(cj6*r21*sj7);
if( IKabs((((cj5*x777))+(((-1.0)*sj5*x779))+((sj5*x780))+(((-1.0)*x781*x782))+((cj5*x778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x778*x781))+(((-1.0)*cj5*x782))+(((-1.0)*x777*x781))+(((-1.0)*cj5*x779))+((cj5*x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*x777))+(((-1.0)*sj5*x779))+((sj5*x780))+(((-1.0)*x781*x782))+((cj5*x778))))+IKsqr(((((-1.0)*x778*x781))+(((-1.0)*cj5*x782))+(((-1.0)*x777*x781))+(((-1.0)*cj5*x779))+((cj5*x780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*x777))+(((-1.0)*sj5*x779))+((sj5*x780))+(((-1.0)*x781*x782))+((cj5*x778))), ((((-1.0)*x778*x781))+(((-1.0)*cj5*x782))+(((-1.0)*x777*x781))+(((-1.0)*cj5*x779))+((cj5*x780))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x783=IKcos(j3);
IkReal x784=(cj5*sj6);
IkReal x785=(cj7*sj5);
IkReal x786=(sj5*sj7);
IkReal x787=(cj5*cj6*sj7);
IkReal x788=((1.0)*cj5*cj6*cj7);
IkReal x789=IKsin(j3);
IkReal x790=(sj5*sj6);
IkReal x791=((1.0)*cj5*cj7);
IkReal x792=((1.0)*cj5*sj7);
IkReal x793=(cj6*sj5*sj7);
IkReal x794=((1.0)*cj6*cj7*sj5);
IkReal x795=((0.01822)*cj7);
IkReal x796=((0.3549)*cj7);
IkReal x797=((0.3549)*sj7);
IkReal x798=((0.01822)*sj7);
IkReal x799=((0.0136)*sj6);
IkReal x800=((0.0136)*cj6*cj7);
IkReal x801=((0.0136)*cj6*sj7);
evalcond[0]=(x783+(((-1.0)*r20*x788))+((r21*x787))+((r20*x786))+((r21*x785))+((r22*x784)));
evalcond[1]=(x789+((r02*x784))+((r01*x787))+(((-1.0)*r00*x788))+((r01*x785))+((r00*x786)));
evalcond[2]=(x789+((r22*x790))+(((-1.0)*r20*x794))+((r21*x793))+(((-1.0)*r21*x791))+(((-1.0)*r20*x792)));
evalcond[3]=((((-1.0)*x783))+(((-1.0)*r00*x794))+(((-1.0)*r00*x792))+((r01*x793))+(((-1.0)*r01*x791))+((r02*x790)));
evalcond[4]=((((-0.3466)*x789))+(((-1.0)*r20*x800))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x796))+((r22*x799))+((r21*x801))+((r21*x798))+(((-1.0)*r20*x795))+(((-1.0)*r20*x797))+(((-0.0159)*x783)));
evalcond[5]=((0.03)+(((-1.0)*r01*x796))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x797))+((r02*x799))+(((-0.0159)*x789))+(((-1.0)*r00*x800))+(((-1.0)*r00*x795))+(((0.3466)*x783))+((r01*x798))+((r01*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x802=(cj5*sj6);
IkReal x803=(cj7*sj5);
IkReal x804=(sj5*sj7);
IkReal x805=(cj5*cj6*sj7);
IkReal x806=((1.0)*cj5*cj6*cj7);
if( IKabs((((r00*x804))+(((-1.0)*r00*x806))+((r01*x805))+((r01*x803))+((r02*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x804))+((r21*x803))+((r22*x802))+((r21*x805))+(((-1.0)*r20*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x804))+(((-1.0)*r00*x806))+((r01*x805))+((r01*x803))+((r02*x802))))+IKsqr((((r20*x804))+((r21*x803))+((r22*x802))+((r21*x805))+(((-1.0)*r20*x806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*x804))+(((-1.0)*r00*x806))+((r01*x805))+((r01*x803))+((r02*x802))), (((r20*x804))+((r21*x803))+((r22*x802))+((r21*x805))+(((-1.0)*r20*x806))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x807=IKsin(j3);
IkReal x808=(sj5*sj6);
IkReal x809=((1.0)*cj5*cj7);
IkReal x810=((1.0)*cj5*sj7);
IkReal x811=(cj6*sj5*sj7);
IkReal x812=((1.0)*cj6*cj7*sj5);
IkReal x813=(cj5*sj6);
IkReal x814=(cj7*sj5);
IkReal x815=(sj5*sj7);
IkReal x816=IKcos(j3);
IkReal x817=((-1.0)*x816);
IkReal x818=(cj5*cj6*sj7);
IkReal x819=x806;
IkReal x820=((0.01822)*cj7);
IkReal x821=((0.3549)*cj7);
IkReal x822=((0.3549)*sj7);
IkReal x823=((0.01822)*sj7);
IkReal x824=((0.0136)*sj6);
IkReal x825=((0.0136)*cj6*cj7);
IkReal x826=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r21*x809))+x807+((r22*x808))+(((-1.0)*r20*x812))+(((-1.0)*r20*x810))+((r21*x811)));
evalcond[1]=(((r21*x814))+((r21*x818))+((r22*x813))+x817+(((-1.0)*r20*x819))+((r20*x815)));
evalcond[2]=(((r02*x813))+(((-1.0)*r00*x819))+((r01*x814))+(((-1.0)*x807))+((r01*x818))+((r00*x815)));
evalcond[3]=((((-1.0)*r01*x809))+((r01*x811))+x817+((r02*x808))+(((-1.0)*r00*x812))+(((-1.0)*r00*x810)));
evalcond[4]=((((-1.0)*r20*x820))+(((-1.0)*r20*x825))+(((-1.0)*(1.0)*pz))+((r21*x823))+(((-0.3466)*x807))+((r22*x824))+(((-1.0)*r21*x821))+(((-1.0)*r20*x822))+(((0.0159)*x816))+((r21*x826)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*px))+(((0.3466)*x816))+(((-1.0)*r00*x825))+(((-1.0)*r00*x822))+(((-1.0)*r01*x821))+(((-1.0)*r00*x820))+((r01*x826))+((r02*x824))+(((0.0159)*x807))+((r01*x823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x827=((1.0)*sj6);
IkReal x828=((1.0)*sj5);
IkReal x829=(cj5*cj6);
CheckValue<IkReal> x830=IKPowWithIntegerCheck(sj4,-1);
if(!x830.valid){
continue;
}
CheckValue<IkReal> x831=IKPowWithIntegerCheck(cj4,-1);
if(!x831.valid){
continue;
}
if( IKabs(((x830.value)*(((((-1.0)*cj7*r01*x828))+(((-1.0)*r01*sj7*x829))+(((-1.0)*r00*sj7*x828))+(((-1.0)*cj5*r02*x827))+((cj7*r00*x829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x831.value)*((((cj7*r20*sj6))+(((-1.0)*r21*sj7*x827))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x830.value)*(((((-1.0)*cj7*r01*x828))+(((-1.0)*r01*sj7*x829))+(((-1.0)*r00*sj7*x828))+(((-1.0)*cj5*r02*x827))+((cj7*r00*x829))))))+IKsqr(((x831.value)*((((cj7*r20*sj6))+(((-1.0)*r21*sj7*x827))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x830.value)*(((((-1.0)*cj7*r01*x828))+(((-1.0)*r01*sj7*x829))+(((-1.0)*r00*sj7*x828))+(((-1.0)*cj5*r02*x827))+((cj7*r00*x829))))), ((x831.value)*((((cj7*r20*sj6))+(((-1.0)*r21*sj7*x827))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x832=IKcos(j3);
IkReal x833=(cj4*x832);
IkReal x834=((1.0)*cj6);
IkReal x835=(sj6*sj7);
IkReal x836=((1.0)*cj7*sj6);
IkReal x837=IKsin(j3);
IkReal x838=(cj4*x837);
IkReal x839=(sj5*sj6);
IkReal x840=((1.0)*cj5*cj7);
IkReal x841=((1.0)*cj5*sj7);
IkReal x842=(cj6*sj5*sj7);
IkReal x843=((1.0)*cj6*cj7*sj5);
IkReal x844=(sj4*x832);
IkReal x845=(cj5*sj6);
IkReal x846=(cj7*sj5);
IkReal x847=(sj5*sj7);
IkReal x848=(cj5*cj6*sj7);
IkReal x849=((1.0)*cj5*cj6*cj7);
IkReal x850=(sj4*x837);
IkReal x851=((0.01822)*cj7);
IkReal x852=((0.3549)*cj7);
IkReal x853=((0.3549)*sj7);
IkReal x854=((0.01822)*sj7);
IkReal x855=((0.0136)*sj6);
IkReal x856=((0.0136)*cj6*cj7);
IkReal x857=((0.0136)*cj6*sj7);
evalcond[0]=(x833+(((-1.0)*r20*x836))+(((-1.0)*r22*x834))+((r21*x835)));
evalcond[1]=(((r01*x835))+x838+(((-1.0)*r02*x834))+(((-1.0)*r00*x836)));
evalcond[2]=((((-1.0)*r20*x841))+x837+((r21*x842))+((r22*x839))+(((-1.0)*r20*x843))+(((-1.0)*r21*x840)));
evalcond[3]=(x844+((r20*x847))+((r22*x845))+(((-1.0)*r20*x849))+((r21*x848))+((r21*x846)));
evalcond[4]=(((r00*x847))+((r01*x848))+((r02*x845))+x850+(((-1.0)*r00*x849))+((r01*x846)));
evalcond[5]=((((-1.0)*r00*x843))+(((-1.0)*r00*x841))+(((-1.0)*r01*x840))+((r01*x842))+(((-1.0)*x832))+((r02*x839)));
evalcond[6]=(((r21*x857))+(((-0.0159)*x844))+(((-1.0)*r20*x856))+(((-1.0)*(1.0)*pz))+((r21*x854))+(((-1.0)*r21*x852))+(((-0.3466)*x837))+(((-1.0)*r20*x851))+((r22*x855))+(((0.0005)*x833))+(((-1.0)*r20*x853)));
evalcond[7]=((0.03)+(((0.3466)*x832))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x851))+((r02*x855))+(((-0.0159)*x850))+((r01*x857))+(((0.0005)*x838))+(((-1.0)*r00*x856))+((r01*x854))+(((-1.0)*r01*x852))+(((-1.0)*r00*x853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x858=((1.0)*sj6);
IkReal x859=(cj6*sj5);
IkReal x860=(cj7*r20);
CheckValue<IkReal> x861=IKPowWithIntegerCheck(cj4,-1);
if(!x861.valid){
continue;
}
if( IKabs((((cj5*r20*sj7))+((x859*x860))+(((-1.0)*r21*sj7*x859))+((cj5*cj7*r21))+(((-1.0)*r22*sj5*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x861.value)*((((sj6*x860))+(((-1.0)*r21*sj7*x858))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*sj7))+((x859*x860))+(((-1.0)*r21*sj7*x859))+((cj5*cj7*r21))+(((-1.0)*r22*sj5*x858))))+IKsqr(((x861.value)*((((sj6*x860))+(((-1.0)*r21*sj7*x858))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj5*r20*sj7))+((x859*x860))+(((-1.0)*r21*sj7*x859))+((cj5*cj7*r21))+(((-1.0)*r22*sj5*x858))), ((x861.value)*((((sj6*x860))+(((-1.0)*r21*sj7*x858))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x862=IKcos(j3);
IkReal x863=(cj4*x862);
IkReal x864=((1.0)*cj6);
IkReal x865=(sj6*sj7);
IkReal x866=((1.0)*cj7*sj6);
IkReal x867=IKsin(j3);
IkReal x868=(cj4*x867);
IkReal x869=(sj5*sj6);
IkReal x870=((1.0)*cj5*cj7);
IkReal x871=((1.0)*cj5*sj7);
IkReal x872=(cj6*sj5*sj7);
IkReal x873=((1.0)*cj6*cj7*sj5);
IkReal x874=(sj4*x862);
IkReal x875=(cj5*sj6);
IkReal x876=(cj7*sj5);
IkReal x877=(sj5*sj7);
IkReal x878=(cj5*cj6*sj7);
IkReal x879=((1.0)*cj5*cj6*cj7);
IkReal x880=(sj4*x867);
IkReal x881=((0.01822)*cj7);
IkReal x882=((0.3549)*cj7);
IkReal x883=((0.3549)*sj7);
IkReal x884=((0.01822)*sj7);
IkReal x885=((0.0136)*sj6);
IkReal x886=((0.0136)*cj6*cj7);
IkReal x887=((0.0136)*cj6*sj7);
evalcond[0]=(x863+(((-1.0)*r22*x864))+((r21*x865))+(((-1.0)*r20*x866)));
evalcond[1]=((((-1.0)*r02*x864))+((r01*x865))+x868+(((-1.0)*r00*x866)));
evalcond[2]=(((r21*x872))+((r22*x869))+x867+(((-1.0)*r20*x871))+(((-1.0)*r20*x873))+(((-1.0)*r21*x870)));
evalcond[3]=(((r21*x876))+((r22*x875))+((r20*x877))+((r21*x878))+(((-1.0)*r20*x879))+x874);
evalcond[4]=(((r00*x877))+((r01*x878))+(((-1.0)*r00*x879))+x880+((r01*x876))+((r02*x875)));
evalcond[5]=((((-1.0)*r01*x870))+(((-1.0)*x862))+((r02*x869))+(((-1.0)*r00*x871))+(((-1.0)*r00*x873))+((r01*x872)));
evalcond[6]=(((r22*x885))+(((0.0005)*x863))+((r21*x887))+(((-1.0)*(1.0)*pz))+(((-0.3466)*x867))+(((-1.0)*r21*x882))+(((-1.0)*r20*x881))+(((-0.0159)*x874))+(((-1.0)*r20*x886))+((r21*x884))+(((-1.0)*r20*x883)));
evalcond[7]=((0.03)+((r01*x884))+(((-1.0)*(1.0)*px))+(((0.3466)*x862))+(((-0.0159)*x880))+(((-1.0)*r00*x881))+((r01*x887))+(((0.0005)*x868))+(((-1.0)*r00*x883))+((r02*x885))+(((-1.0)*r00*x886))+(((-1.0)*r01*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x888=(cj7*sj6);
IkReal x889=((1.0)*sj6*sj7);
CheckValue<IkReal> x890=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x890.valid){
continue;
}
CheckValue<IkReal> x891 = IKatan2WithCheck(IkReal((((cj6*r02))+(((-1.0)*r01*x889))+((r00*x888)))),IkReal((((r20*x888))+(((-1.0)*r21*x889))+((cj6*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x891.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x890.value)))+(x891.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x892=IKcos(j3);
IkReal x893=(cj4*x892);
IkReal x894=((1.0)*cj6);
IkReal x895=(sj6*sj7);
IkReal x896=((1.0)*cj7*sj6);
IkReal x897=IKsin(j3);
IkReal x898=(cj4*x897);
IkReal x899=(sj5*sj6);
IkReal x900=((1.0)*cj5*cj7);
IkReal x901=((1.0)*cj5*sj7);
IkReal x902=(cj6*sj5*sj7);
IkReal x903=((1.0)*cj6*cj7*sj5);
IkReal x904=(sj4*x892);
IkReal x905=(cj5*sj6);
IkReal x906=(cj7*sj5);
IkReal x907=(sj5*sj7);
IkReal x908=(cj5*cj6*sj7);
IkReal x909=((1.0)*cj5*cj6*cj7);
IkReal x910=(sj4*x897);
IkReal x911=((0.01822)*cj7);
IkReal x912=((0.3549)*cj7);
IkReal x913=((0.3549)*sj7);
IkReal x914=((0.01822)*sj7);
IkReal x915=((0.0136)*sj6);
IkReal x916=((0.0136)*cj6*cj7);
IkReal x917=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r20*x896))+((r21*x895))+x893+(((-1.0)*r22*x894)));
evalcond[1]=((((-1.0)*r00*x896))+(((-1.0)*r02*x894))+((r01*x895))+x898);
evalcond[2]=((((-1.0)*r20*x901))+((r22*x899))+((r21*x902))+(((-1.0)*r20*x903))+(((-1.0)*r21*x900))+x897);
evalcond[3]=(((r21*x908))+x904+((r22*x905))+(((-1.0)*r20*x909))+((r21*x906))+((r20*x907)));
evalcond[4]=(((r01*x906))+x910+((r00*x907))+(((-1.0)*r00*x909))+((r01*x908))+((r02*x905)));
evalcond[5]=(((r02*x899))+(((-1.0)*r00*x903))+(((-1.0)*r01*x900))+(((-1.0)*r00*x901))+(((-1.0)*x892))+((r01*x902)));
evalcond[6]=((((-1.0)*r20*x916))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x913))+(((-0.0159)*x904))+(((0.0005)*x893))+(((-1.0)*r21*x912))+((r21*x914))+((r22*x915))+(((-1.0)*r20*x911))+((r21*x917))+(((-0.3466)*x897)));
evalcond[7]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x913))+(((-1.0)*r01*x912))+((r01*x917))+(((-0.0159)*x910))+(((0.0005)*x898))+(((0.3466)*x892))+(((-1.0)*r00*x911))+((r02*x915))+((r01*x914))+(((-1.0)*r00*x916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x918=(r11*sj7);
IkReal x919=(cj5*cj6);
if( IKabs(((((-1.0)*sj6*x918))+((cj6*r12))+((sj6*((cj7*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r11*sj5))+((x918*x919))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x919))+((r10*sj5*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj6*x918))+((cj6*r12))+((sj6*((cj7*r10))))))+IKsqr((((cj7*r11*sj5))+((x918*x919))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x919))+((r10*sj5*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj6*x918))+((cj6*r12))+((sj6*((cj7*r10))))), (((cj7*r11*sj5))+((x918*x919))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x919))+((r10*sj5*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x920=IKsin(j4);
IkReal x921=(r11*sj7);
IkReal x922=(cj7*r10);
IkReal x923=(r12*sj6);
IkReal x924=(cj7*r11);
IkReal x925=(r10*sj7);
IkReal x926=IKcos(j4);
IkReal x927=((0.0136)*cj6);
evalcond[0]=((((-1.0)*cj6*r12))+((sj6*x921))+(((-1.0)*sj6*x922))+x920);
evalcond[1]=(((sj5*x925))+(((-1.0)*cj5*cj6*x922))+((cj5*cj6*x921))+((sj5*x924))+(((-1.0)*x926))+((cj5*x923)));
evalcond[2]=((-0.0104)+(((-0.3549)*x924))+(((-1.0)*(1.0)*py))+(((-1.0)*x922*x927))+(((0.01822)*x921))+(((-0.3549)*x925))+(((0.0005)*x920))+(((-0.01822)*x922))+(((0.0159)*x926))+(((0.0136)*x923))+((x921*x927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x928=(cj7*sj6);
IkReal x929=(sj6*sj7);
j3eval[0]=cj4;
j3eval[1]=IKsign(cj4);
j3eval[2]=((IKabs((((r20*x928))+(((-1.0)*r21*x929))+((cj6*r22)))))+(IKabs(((((-1.0)*r00*x928))+(((-1.0)*(1.0)*cj6*r02))+((r01*x929))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j3eval[0]=sj4;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x930=(sj6*sj7);
IkReal x931=(cj7*sj6);
if( IKabs(((((-1.0)*r00*x931))+((r01*x930))+(((-1.0)*(1.0)*cj6*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x931))+(((-1.0)*r21*x930))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x931))+((r01*x930))+(((-1.0)*(1.0)*cj6*r02))))+IKsqr((((r20*x931))+(((-1.0)*r21*x930))+((cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x931))+((r01*x930))+(((-1.0)*(1.0)*cj6*r02))), (((r20*x931))+(((-1.0)*r21*x930))+((cj6*r22))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x932=IKcos(j3);
IkReal x933=((1.0)*cj6);
IkReal x934=(sj6*sj7);
IkReal x935=((1.0)*cj7*sj6);
IkReal x936=IKsin(j3);
IkReal x937=(sj5*sj6);
IkReal x938=((1.0)*cj5*cj7);
IkReal x939=((1.0)*cj5*sj7);
IkReal x940=(cj6*sj5*sj7);
IkReal x941=((1.0)*cj6*cj7*sj5);
IkReal x942=((0.01822)*cj7);
IkReal x943=((0.3549)*cj7);
IkReal x944=((0.3549)*sj7);
IkReal x945=((0.01822)*sj7);
IkReal x946=((0.0136)*sj6);
IkReal x947=((0.0136)*cj6*cj7);
IkReal x948=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r22*x933))+((r21*x934))+x932+(((-1.0)*r20*x935)));
evalcond[1]=((((-1.0)*r00*x935))+(((-1.0)*r02*x933))+(((-1.0)*x936))+((r01*x934)));
evalcond[2]=(((r21*x940))+(((-1.0)*r21*x938))+(((-1.0)*r20*x941))+(((-1.0)*r20*x939))+x936+((r22*x937)));
evalcond[3]=(((r02*x937))+((r01*x940))+(((-1.0)*r01*x938))+(((-1.0)*r00*x939))+(((-1.0)*r00*x941))+x932);
evalcond[4]=(((r21*x945))+(((-1.0)*(1.0)*pz))+(((0.0005)*x932))+(((-0.3466)*x936))+(((-1.0)*r21*x943))+(((-1.0)*r20*x944))+((r22*x946))+(((-1.0)*r20*x947))+((r21*x948))+(((-1.0)*r20*x942)));
evalcond[5]=((-0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x944))+((r02*x946))+(((-1.0)*r00*x947))+(((-0.0005)*x936))+(((-1.0)*r00*x942))+((r01*x945))+(((-1.0)*r01*x943))+(((-0.3466)*x932))+((r01*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x949=(cj7*sj6);
IkReal x950=(sj6*sj7);
if( IKabs((((cj6*r02))+(((-1.0)*r01*x950))+((r00*x949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x949))+(((-1.0)*(1.0)*cj6*r22))+((r21*x950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r02))+(((-1.0)*r01*x950))+((r00*x949))))+IKsqr(((((-1.0)*r20*x949))+(((-1.0)*(1.0)*cj6*r22))+((r21*x950))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((cj6*r02))+(((-1.0)*r01*x950))+((r00*x949))), ((((-1.0)*r20*x949))+(((-1.0)*(1.0)*cj6*r22))+((r21*x950))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x951=IKsin(j3);
IkReal x952=((1.0)*cj6);
IkReal x953=(sj6*sj7);
IkReal x954=((1.0)*cj7*sj6);
IkReal x955=IKcos(j3);
IkReal x956=(sj5*sj6);
IkReal x957=((1.0)*cj5*cj7);
IkReal x958=((1.0)*cj5*sj7);
IkReal x959=(cj6*sj5*sj7);
IkReal x960=((1.0)*cj6*cj7*sj5);
IkReal x961=((0.01822)*cj7);
IkReal x962=((0.3549)*cj7);
IkReal x963=((0.3549)*sj7);
IkReal x964=((0.01822)*sj7);
IkReal x965=((0.0136)*sj6);
IkReal x966=((0.0136)*cj6*cj7);
IkReal x967=((0.0136)*cj6*sj7);
evalcond[0]=(x951+(((-1.0)*r02*x952))+(((-1.0)*r00*x954))+((r01*x953)));
evalcond[1]=((((-1.0)*x955))+((r21*x953))+(((-1.0)*r20*x954))+(((-1.0)*r22*x952)));
evalcond[2]=((((-1.0)*r20*x958))+x951+(((-1.0)*r21*x957))+((r22*x956))+(((-1.0)*r20*x960))+((r21*x959)));
evalcond[3]=(x955+((r01*x959))+((r02*x956))+(((-1.0)*r00*x960))+(((-1.0)*r00*x958))+(((-1.0)*r01*x957)));
evalcond[4]=(((r21*x967))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x962))+(((-0.0005)*x955))+(((-1.0)*r20*x961))+(((-1.0)*r20*x963))+(((-1.0)*r20*x966))+((r21*x964))+(((-0.3466)*x951))+((r22*x965)));
evalcond[5]=((-0.03)+(((-0.3466)*x955))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x963))+((r02*x965))+((r01*x964))+((r01*x967))+(((0.0005)*x951))+(((-1.0)*r00*x961))+(((-1.0)*r00*x966))+(((-1.0)*r01*x962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x968=(cj5*sj6);
IkReal x969=(cj7*sj5);
IkReal x970=(sj5*sj7);
IkReal x971=(cj5*cj6*sj7);
IkReal x972=(cj5*cj6*cj7);
IkReal x973=((1.0)*r21);
if( IKabs(((((-1.0)*r00*x972))+((r01*x971))+((r02*x968))+((r00*x970))+((r01*x969)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x972))+(((-1.0)*r22*x968))+(((-1.0)*x969*x973))+(((-1.0)*x971*x973))+(((-1.0)*r20*x970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x972))+((r01*x971))+((r02*x968))+((r00*x970))+((r01*x969))))+IKsqr((((r20*x972))+(((-1.0)*r22*x968))+(((-1.0)*x969*x973))+(((-1.0)*x971*x973))+(((-1.0)*r20*x970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*x972))+((r01*x971))+((r02*x968))+((r00*x970))+((r01*x969))), (((r20*x972))+(((-1.0)*r22*x968))+(((-1.0)*x969*x973))+(((-1.0)*x971*x973))+(((-1.0)*r20*x970))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x974=IKcos(j3);
IkReal x975=(cj5*sj6);
IkReal x976=(cj7*sj5);
IkReal x977=(sj5*sj7);
IkReal x978=(cj5*cj6*sj7);
IkReal x979=((1.0)*cj5*cj6*cj7);
IkReal x980=IKsin(j3);
IkReal x981=(sj5*sj6);
IkReal x982=((1.0)*cj5*cj7);
IkReal x983=((1.0)*cj5*sj7);
IkReal x984=(cj6*sj5*sj7);
IkReal x985=((1.0)*cj6*cj7*sj5);
IkReal x986=((0.01822)*cj7);
IkReal x987=((0.3549)*cj7);
IkReal x988=((0.3549)*sj7);
IkReal x989=((0.01822)*sj7);
IkReal x990=((0.0136)*sj6);
IkReal x991=((0.0136)*cj6*cj7);
IkReal x992=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x978))+(((-1.0)*r20*x979))+((r20*x977))+((r21*x976))+x974+((r22*x975)));
evalcond[1]=((((-1.0)*r20*x983))+((r21*x984))+(((-1.0)*r20*x985))+((r22*x981))+x980+(((-1.0)*r21*x982)));
evalcond[2]=((((-1.0)*r01*x982))+(((-1.0)*r00*x985))+((r01*x984))+x974+(((-1.0)*r00*x983))+((r02*x981)));
evalcond[3]=((((-1.0)*r00*x979))+((r01*x978))+(((-1.0)*x980))+((r01*x976))+((r00*x977))+((r02*x975)));
evalcond[4]=((((-1.0)*r20*x986))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x987))+(((-0.3466)*x980))+(((-1.0)*r20*x988))+((r21*x989))+(((-1.0)*r20*x991))+((r21*x992))+(((-0.0159)*x974))+((r22*x990)));
evalcond[5]=((-0.03)+(((-1.0)*(1.0)*px))+((r01*x989))+(((-1.0)*r01*x987))+(((-0.3466)*x974))+(((-1.0)*r00*x991))+((r02*x990))+((r01*x992))+(((-1.0)*r00*x988))+(((0.0159)*x980))+(((-1.0)*r00*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x993=(cj5*sj6);
IkReal x994=((1.0)*r01);
IkReal x995=(cj7*sj5);
IkReal x996=(sj5*sj7);
IkReal x997=(cj5*cj6*cj7);
IkReal x998=(cj5*cj6*sj7);
if( IKabs(((((-1.0)*x994*x998))+((r00*x997))+(((-1.0)*x994*x995))+(((-1.0)*r02*x993))+(((-1.0)*r00*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x998))+((r22*x993))+((r21*x995))+(((-1.0)*r20*x997))+((r20*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x994*x998))+((r00*x997))+(((-1.0)*x994*x995))+(((-1.0)*r02*x993))+(((-1.0)*r00*x996))))+IKsqr((((r21*x998))+((r22*x993))+((r21*x995))+(((-1.0)*r20*x997))+((r20*x996))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x994*x998))+((r00*x997))+(((-1.0)*x994*x995))+(((-1.0)*r02*x993))+(((-1.0)*r00*x996))), (((r21*x998))+((r22*x993))+((r21*x995))+(((-1.0)*r20*x997))+((r20*x996))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x999=IKsin(j3);
IkReal x1000=(cj5*sj6);
IkReal x1001=(cj7*sj5);
IkReal x1002=(sj5*sj7);
IkReal x1003=(cj5*cj6*sj7);
IkReal x1004=((1.0)*cj5*cj6*cj7);
IkReal x1005=(sj5*sj6);
IkReal x1006=((1.0)*cj5*cj7);
IkReal x1007=((1.0)*cj5*sj7);
IkReal x1008=(cj6*sj5*sj7);
IkReal x1009=((1.0)*cj6*cj7*sj5);
IkReal x1010=IKcos(j3);
IkReal x1011=((0.01822)*cj7);
IkReal x1012=((0.3549)*cj7);
IkReal x1013=((0.3549)*sj7);
IkReal x1014=((0.01822)*sj7);
IkReal x1015=((0.0136)*sj6);
IkReal x1016=((0.0136)*cj6*cj7);
IkReal x1017=((0.0136)*cj6*sj7);
evalcond[0]=(((r00*x1002))+((r01*x1003))+(((-1.0)*r00*x1004))+((r02*x1000))+x999+((r01*x1001)));
evalcond[1]=((((-1.0)*r20*x1007))+((r21*x1008))+((r22*x1005))+(((-1.0)*r21*x1006))+(((-1.0)*r20*x1009))+x999);
evalcond[2]=(((r20*x1002))+((r21*x1003))+(((-1.0)*x1010))+((r22*x1000))+((r21*x1001))+(((-1.0)*r20*x1004)));
evalcond[3]=((((-1.0)*r00*x1007))+x1010+((r01*x1008))+(((-1.0)*r01*x1006))+((r02*x1005))+(((-1.0)*r00*x1009)));
evalcond[4]=((((-0.3466)*x999))+(((-1.0)*r21*x1012))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1016))+(((-1.0)*r20*x1011))+((r21*x1017))+(((0.0159)*x1010))+((r22*x1015))+((r21*x1014))+(((-1.0)*r20*x1013)));
evalcond[5]=((-0.03)+(((-0.3466)*x1010))+(((-1.0)*(1.0)*px))+((r02*x1015))+((r01*x1014))+(((-1.0)*r00*x1016))+(((-0.0159)*x999))+(((-1.0)*r01*x1012))+(((-1.0)*r00*x1013))+(((-1.0)*r00*x1011))+((r01*x1017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1018=(cj5*cj6);
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(sj4,-1);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020=IKPowWithIntegerCheck(cj4,-1);
if(!x1020.valid){
continue;
}
if( IKabs(((x1019.value)*(((((-1.0)*cj7*r00*x1018))+((cj5*r02*sj6))+((r00*sj5*sj7))+((cj7*r01*sj5))+((r01*sj7*x1018)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1020.value)*((((cj7*r20*sj6))+(((-1.0)*(1.0)*r21*sj6*sj7))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1019.value)*(((((-1.0)*cj7*r00*x1018))+((cj5*r02*sj6))+((r00*sj5*sj7))+((cj7*r01*sj5))+((r01*sj7*x1018))))))+IKsqr(((x1020.value)*((((cj7*r20*sj6))+(((-1.0)*(1.0)*r21*sj6*sj7))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1019.value)*(((((-1.0)*cj7*r00*x1018))+((cj5*r02*sj6))+((r00*sj5*sj7))+((cj7*r01*sj5))+((r01*sj7*x1018))))), ((x1020.value)*((((cj7*r20*sj6))+(((-1.0)*(1.0)*r21*sj6*sj7))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1021=IKcos(j3);
IkReal x1022=(cj4*x1021);
IkReal x1023=((1.0)*cj6);
IkReal x1024=(sj6*sj7);
IkReal x1025=((1.0)*cj7*sj6);
IkReal x1026=IKsin(j3);
IkReal x1027=(cj4*x1026);
IkReal x1028=(sj5*sj6);
IkReal x1029=((1.0)*cj5*cj7);
IkReal x1030=((1.0)*cj5*sj7);
IkReal x1031=(cj6*sj5*sj7);
IkReal x1032=((1.0)*cj6*cj7*sj5);
IkReal x1033=(sj4*x1021);
IkReal x1034=(cj5*sj6);
IkReal x1035=(cj7*sj5);
IkReal x1036=(sj5*sj7);
IkReal x1037=(cj5*cj6*sj7);
IkReal x1038=((1.0)*cj5*cj6*cj7);
IkReal x1039=(sj4*x1026);
IkReal x1040=((0.01822)*cj7);
IkReal x1041=((0.3549)*cj7);
IkReal x1042=((0.3549)*sj7);
IkReal x1043=((0.01822)*sj7);
IkReal x1044=((0.0136)*sj6);
IkReal x1045=((0.0136)*cj6*cj7);
IkReal x1046=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x1024))+x1022+(((-1.0)*r20*x1025))+(((-1.0)*r22*x1023)));
evalcond[1]=((((-1.0)*x1027))+(((-1.0)*r00*x1025))+((r01*x1024))+(((-1.0)*r02*x1023)));
evalcond[2]=((((-1.0)*r20*x1030))+(((-1.0)*r20*x1032))+((r21*x1031))+x1026+((r22*x1028))+(((-1.0)*r21*x1029)));
evalcond[3]=(((r21*x1035))+x1033+(((-1.0)*r20*x1038))+((r21*x1037))+((r20*x1036))+((r22*x1034)));
evalcond[4]=(((r02*x1028))+x1021+((r01*x1031))+(((-1.0)*r00*x1032))+(((-1.0)*r01*x1029))+(((-1.0)*r00*x1030)));
evalcond[5]=(((r02*x1034))+((r01*x1035))+(((-1.0)*r00*x1038))+((r00*x1036))+(((-1.0)*x1039))+((r01*x1037)));
evalcond[6]=((((-1.0)*r20*x1042))+(((0.0005)*x1022))+(((-1.0)*r20*x1045))+(((-1.0)*r21*x1041))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1040))+(((-0.3466)*x1026))+((r21*x1043))+((r22*x1044))+(((-0.0159)*x1033))+((r21*x1046)));
evalcond[7]=((-0.03)+(((-0.0005)*x1027))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1041))+((r01*x1043))+(((-1.0)*r00*x1045))+(((-1.0)*r00*x1040))+(((0.0159)*x1039))+((r02*x1044))+(((-0.3466)*x1021))+(((-1.0)*r00*x1042))+((r01*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1047=((1.0)*sj6);
IkReal x1048=(cj6*sj5);
IkReal x1049=(cj7*r20);
CheckValue<IkReal> x1050=IKPowWithIntegerCheck(cj4,-1);
if(!x1050.valid){
continue;
}
if( IKabs(((((-1.0)*r22*sj5*x1047))+((cj5*r20*sj7))+((x1048*x1049))+((cj5*cj7*r21))+(((-1.0)*r21*sj7*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1050.value)*((((sj6*x1049))+(((-1.0)*r21*sj7*x1047))+((cj6*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj5*x1047))+((cj5*r20*sj7))+((x1048*x1049))+((cj5*cj7*r21))+(((-1.0)*r21*sj7*x1048))))+IKsqr(((x1050.value)*((((sj6*x1049))+(((-1.0)*r21*sj7*x1047))+((cj6*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r22*sj5*x1047))+((cj5*r20*sj7))+((x1048*x1049))+((cj5*cj7*r21))+(((-1.0)*r21*sj7*x1048))), ((x1050.value)*((((sj6*x1049))+(((-1.0)*r21*sj7*x1047))+((cj6*r22))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1051=IKcos(j3);
IkReal x1052=(cj4*x1051);
IkReal x1053=((1.0)*cj6);
IkReal x1054=(sj6*sj7);
IkReal x1055=((1.0)*cj7*sj6);
IkReal x1056=IKsin(j3);
IkReal x1057=(cj4*x1056);
IkReal x1058=(sj5*sj6);
IkReal x1059=((1.0)*cj5*cj7);
IkReal x1060=((1.0)*cj5*sj7);
IkReal x1061=(cj6*sj5*sj7);
IkReal x1062=((1.0)*cj6*cj7*sj5);
IkReal x1063=(sj4*x1051);
IkReal x1064=(cj5*sj6);
IkReal x1065=(cj7*sj5);
IkReal x1066=(sj5*sj7);
IkReal x1067=(cj5*cj6*sj7);
IkReal x1068=((1.0)*cj5*cj6*cj7);
IkReal x1069=(sj4*x1056);
IkReal x1070=((0.01822)*cj7);
IkReal x1071=((0.3549)*cj7);
IkReal x1072=((0.3549)*sj7);
IkReal x1073=((0.01822)*sj7);
IkReal x1074=((0.0136)*sj6);
IkReal x1075=((0.0136)*cj6*cj7);
IkReal x1076=((0.0136)*cj6*sj7);
evalcond[0]=(x1052+(((-1.0)*r22*x1053))+((r21*x1054))+(((-1.0)*r20*x1055)));
evalcond[1]=((((-1.0)*r02*x1053))+((r01*x1054))+(((-1.0)*x1057))+(((-1.0)*r00*x1055)));
evalcond[2]=((((-1.0)*r21*x1059))+((r22*x1058))+((r21*x1061))+x1056+(((-1.0)*r20*x1062))+(((-1.0)*r20*x1060)));
evalcond[3]=((((-1.0)*r20*x1068))+x1063+((r20*x1066))+((r21*x1067))+((r21*x1065))+((r22*x1064)));
evalcond[4]=((((-1.0)*r00*x1060))+(((-1.0)*r00*x1062))+(((-1.0)*r01*x1059))+x1051+((r02*x1058))+((r01*x1061)));
evalcond[5]=(((r00*x1066))+(((-1.0)*r00*x1068))+((r01*x1065))+(((-1.0)*x1069))+((r01*x1067))+((r02*x1064)));
evalcond[6]=((((-0.3466)*x1056))+(((-0.0159)*x1063))+((r22*x1074))+(((-1.0)*r20*x1075))+((r21*x1076))+(((0.0005)*x1052))+(((-1.0)*(1.0)*pz))+((r21*x1073))+(((-1.0)*r21*x1071))+(((-1.0)*r20*x1070))+(((-1.0)*r20*x1072)));
evalcond[7]=((-0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1071))+(((0.0159)*x1069))+(((-1.0)*r00*x1075))+(((-1.0)*r00*x1070))+((r01*x1076))+(((-0.0005)*x1057))+((r02*x1074))+(((-1.0)*r00*x1072))+(((-0.3466)*x1051))+((r01*x1073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1077=(sj6*sj7);
IkReal x1078=(cj7*sj6);
CheckValue<IkReal> x1079 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj6*r02))+(((-1.0)*r00*x1078))+((r01*x1077)))),IkReal((((r20*x1078))+(((-1.0)*r21*x1077))+((cj6*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1079.valid){
continue;
}
CheckValue<IkReal> x1080=IKPowWithIntegerCheck(IKsign(cj4),-1);
if(!x1080.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1079.value)+(((1.5707963267949)*(x1080.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x1081=IKcos(j3);
IkReal x1082=(cj4*x1081);
IkReal x1083=((1.0)*cj6);
IkReal x1084=(sj6*sj7);
IkReal x1085=((1.0)*cj7*sj6);
IkReal x1086=IKsin(j3);
IkReal x1087=(cj4*x1086);
IkReal x1088=(sj5*sj6);
IkReal x1089=((1.0)*cj5*cj7);
IkReal x1090=((1.0)*cj5*sj7);
IkReal x1091=(cj6*sj5*sj7);
IkReal x1092=((1.0)*cj6*cj7*sj5);
IkReal x1093=(sj4*x1081);
IkReal x1094=(cj5*sj6);
IkReal x1095=(cj7*sj5);
IkReal x1096=(sj5*sj7);
IkReal x1097=(cj5*cj6*sj7);
IkReal x1098=((1.0)*cj5*cj6*cj7);
IkReal x1099=(sj4*x1086);
IkReal x1100=((0.01822)*cj7);
IkReal x1101=((0.3549)*cj7);
IkReal x1102=((0.3549)*sj7);
IkReal x1103=((0.01822)*sj7);
IkReal x1104=((0.0136)*sj6);
IkReal x1105=((0.0136)*cj6*cj7);
IkReal x1106=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r22*x1083))+((r21*x1084))+x1082+(((-1.0)*r20*x1085)));
evalcond[1]=((((-1.0)*r00*x1085))+(((-1.0)*x1087))+(((-1.0)*r02*x1083))+((r01*x1084)));
evalcond[2]=((((-1.0)*r20*x1092))+x1086+(((-1.0)*r21*x1089))+((r21*x1091))+((r22*x1088))+(((-1.0)*r20*x1090)));
evalcond[3]=(((r21*x1095))+(((-1.0)*r20*x1098))+((r20*x1096))+((r21*x1097))+x1093+((r22*x1094)));
evalcond[4]=((((-1.0)*r01*x1089))+((r01*x1091))+x1081+((r02*x1088))+(((-1.0)*r00*x1090))+(((-1.0)*r00*x1092)));
evalcond[5]=((((-1.0)*r00*x1098))+(((-1.0)*x1099))+((r00*x1096))+((r02*x1094))+((r01*x1095))+((r01*x1097)));
evalcond[6]=((((-1.0)*r20*x1102))+(((-0.0159)*x1093))+(((-1.0)*r21*x1101))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1100))+((r21*x1103))+(((0.0005)*x1082))+((r21*x1106))+(((-0.3466)*x1086))+(((-1.0)*r20*x1105))+((r22*x1104)));
evalcond[7]=((-0.03)+(((-1.0)*(1.0)*px))+((r02*x1104))+(((-1.0)*r00*x1100))+(((-1.0)*r00*x1105))+((r01*x1103))+(((-1.0)*r00*x1102))+(((-1.0)*r01*x1101))+(((-0.0005)*x1087))+(((-0.3466)*x1081))+(((0.0159)*x1099))+((r01*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1107=(cj5*cj7);
IkReal x1108=(cj5*sj7);
IkReal x1109=(sj5*sj6);
IkReal x1110=(cj6*cj7*sj5);
IkReal x1111=(cj6*sj5*sj7);
IkReal x1112=((1.0)*r00);
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(sj2,-1);
if(!x1113.valid){
continue;
}
if( IKabs(((((-1.0)*r22*x1109))+((r21*x1107))+((r20*x1110))+((r20*x1108))+(((-1.0)*r21*x1111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1113.value)*(((((-1.0)*x1108*x1112))+((r02*x1109))+(((-1.0)*r01*x1107))+(((-1.0)*x1110*x1112))+((r01*x1111)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1109))+((r21*x1107))+((r20*x1110))+((r20*x1108))+(((-1.0)*r21*x1111))))+IKsqr(((x1113.value)*(((((-1.0)*x1108*x1112))+((r02*x1109))+(((-1.0)*r01*x1107))+(((-1.0)*x1110*x1112))+((r01*x1111))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r22*x1109))+((r21*x1107))+((r20*x1110))+((r20*x1108))+(((-1.0)*r21*x1111))), ((x1113.value)*(((((-1.0)*x1108*x1112))+((r02*x1109))+(((-1.0)*r01*x1107))+(((-1.0)*x1110*x1112))+((r01*x1111))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1114=(sj5*sj6);
IkReal x1115=((1.0)*cj5*cj7);
IkReal x1116=((1.0)*cj5*sj7);
IkReal x1117=(cj6*sj5*sj7);
IkReal x1118=((1.0)*cj6*cj7*sj5);
IkReal x1119=IKcos(j3);
evalcond[0]=(((r21*x1117))+(IKsin(j3))+((r22*x1114))+(((-1.0)*r20*x1116))+(((-1.0)*r21*x1115))+(((-1.0)*r20*x1118)));
evalcond[1]=((((-1.0)*r11*x1115))+((cj2*x1119))+((r11*x1117))+(((-1.0)*r10*x1116))+(((-1.0)*r10*x1118))+((r12*x1114)));
evalcond[2]=((((-1.0)*r01*x1115))+((r01*x1117))+(((-1.0)*r00*x1116))+(((-1.0)*r00*x1118))+((r02*x1114))+(((-1.0)*sj2*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1120=(cj7*r20);
IkReal x1121=((1.0)*sj6);
IkReal x1122=((1.0)*sj5);
IkReal x1123=(cj5*cj6);
j4eval[0]=cj3;
j4eval[1]=((IKabs(((((-1.0)*r21*sj7*x1121))+((cj6*r22))+((sj6*x1120)))))+(IKabs(((((-1.0)*r20*sj7*x1122))+((x1120*x1123))+(((-1.0)*r21*sj7*x1123))+(((-1.0)*cj7*r21*x1122))+(((-1.0)*cj5*r22*x1121))))));
j4eval[2]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1124=((1.0)*r12);
IkReal x1125=((1.0)*cj7);
IkReal x1126=(cj5*cj6);
if( IKabs((((sj6*((r11*sj7))))+(((-1.0)*r10*sj6*x1125))+(((-1.0)*cj6*x1124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*cj5*sj6*x1124))+(((-1.0)*r11*sj5*x1125))+((cj7*r10*x1126))+(((-1.0)*r11*sj7*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*((r11*sj7))))+(((-1.0)*r10*sj6*x1125))+(((-1.0)*cj6*x1124))))+IKsqr(((((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*cj5*sj6*x1124))+(((-1.0)*r11*sj5*x1125))+((cj7*r10*x1126))+(((-1.0)*r11*sj7*x1126))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*((r11*sj7))))+(((-1.0)*r10*sj6*x1125))+(((-1.0)*cj6*x1124))), ((((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*cj5*sj6*x1124))+(((-1.0)*r11*sj5*x1125))+((cj7*r10*x1126))+(((-1.0)*r11*sj7*x1126))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1127=IKcos(j4);
IkReal x1128=(cj3*x1127);
IkReal x1129=((1.0)*cj6);
IkReal x1130=(sj6*sj7);
IkReal x1131=((1.0)*cj7*sj6);
IkReal x1132=(sj3*x1127);
IkReal x1133=IKsin(j4);
IkReal x1134=(cj5*sj6);
IkReal x1135=(cj7*sj5);
IkReal x1136=(sj5*sj7);
IkReal x1137=(cj5*cj6*sj7);
IkReal x1138=((1.0)*cj5*cj6*cj7);
IkReal x1139=(cj3*x1133);
IkReal x1140=(sj3*x1133);
IkReal x1141=((0.01822)*cj7);
IkReal x1142=((0.3549)*cj7);
IkReal x1143=((0.3549)*sj7);
IkReal x1144=((0.01822)*sj7);
IkReal x1145=((0.0136)*sj6);
IkReal x1146=((0.0136)*cj6*cj7);
IkReal x1147=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r22*x1129))+x1128+(((-1.0)*r20*x1131))+((r21*x1130)));
evalcond[1]=(((r01*x1130))+(((-1.0)*r00*x1131))+(((-1.0)*r02*x1129))+x1132);
evalcond[2]=((((-1.0)*r10*x1131))+(((-1.0)*r12*x1129))+(((-1.0)*x1133))+((r11*x1130)));
evalcond[3]=(x1127+((r10*x1136))+((r11*x1135))+(((-1.0)*r10*x1138))+((r11*x1137))+((r12*x1134)));
evalcond[4]=(((r22*x1134))+((r20*x1136))+(((-1.0)*r20*x1138))+((r21*x1135))+((r21*x1137))+x1139);
evalcond[5]=(((r01*x1137))+((r02*x1134))+x1140+((r00*x1136))+(((-1.0)*r00*x1138))+((r01*x1135)));
evalcond[6]=((0.0104)+(((-1.0)*r10*x1146))+(((-1.0)*r11*x1142))+((r11*x1144))+(((-1.0)*r10*x1143))+(((-1.0)*(1.0)*py))+((r11*x1147))+((r12*x1145))+(((-1.0)*r10*x1141))+(((-0.0159)*x1127))+(((-0.0005)*x1133)));
evalcond[7]=((((-0.0159)*x1139))+((r21*x1144))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.3466)*sj3))+(((0.0005)*x1128))+(((-1.0)*r20*x1146))+(((-1.0)*r20*x1143))+((r21*x1147))+((r22*x1145))+(((-1.0)*r20*x1141))+(((-1.0)*r21*x1142)));
evalcond[8]=((0.03)+(((-1.0)*(1.0)*px))+((r01*x1144))+(((-1.0)*r01*x1142))+(((-1.0)*r00*x1146))+(((-1.0)*r00*x1143))+((r02*x1145))+(((-0.0159)*x1140))+(((-1.0)*r00*x1141))+((r01*x1147))+(((0.0005)*x1132))+(((0.3466)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1148=(r11*sj7);
IkReal x1149=(cj5*cj6);
if( IKabs((((cj6*r12))+(((-1.0)*sj6*x1148))+((sj6*((cj7*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r11*sj5))+((cj5*r12*sj6))+((x1148*x1149))+(((-1.0)*cj7*r10*x1149))+((r10*sj5*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r12))+(((-1.0)*sj6*x1148))+((sj6*((cj7*r10))))))+IKsqr((((cj7*r11*sj5))+((cj5*r12*sj6))+((x1148*x1149))+(((-1.0)*cj7*r10*x1149))+((r10*sj5*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r12))+(((-1.0)*sj6*x1148))+((sj6*((cj7*r10))))), (((cj7*r11*sj5))+((cj5*r12*sj6))+((x1148*x1149))+(((-1.0)*cj7*r10*x1149))+((r10*sj5*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1150=IKsin(j4);
IkReal x1151=((1.0)*cj6);
IkReal x1152=(sj6*sj7);
IkReal x1153=((1.0)*cj7*sj6);
IkReal x1154=IKcos(j4);
IkReal x1155=(cj3*x1154);
IkReal x1156=((1.0)*x1154);
IkReal x1157=(cj3*x1150);
IkReal x1158=(cj5*sj6);
IkReal x1159=(cj7*sj5);
IkReal x1160=(sj5*sj7);
IkReal x1161=(cj5*cj6*sj7);
IkReal x1162=((1.0)*cj5*cj6*cj7);
IkReal x1163=(sj3*x1150);
IkReal x1164=((0.01822)*cj7);
IkReal x1165=((0.3549)*cj7);
IkReal x1166=((0.3549)*sj7);
IkReal x1167=((0.01822)*sj7);
IkReal x1168=((0.0136)*sj6);
IkReal x1169=((0.0136)*cj6*cj7);
IkReal x1170=((0.0136)*cj6*sj7);
evalcond[0]=(((r11*x1152))+(((-1.0)*r10*x1153))+x1150+(((-1.0)*r12*x1151)));
evalcond[1]=(x1155+(((-1.0)*r22*x1151))+((r21*x1152))+(((-1.0)*r20*x1153)));
evalcond[2]=((((-1.0)*sj3*x1156))+(((-1.0)*r00*x1153))+(((-1.0)*r02*x1151))+((r01*x1152)));
evalcond[3]=(((r21*x1159))+((r22*x1158))+x1157+(((-1.0)*r20*x1162))+((r20*x1160))+((r21*x1161)));
evalcond[4]=(((r11*x1161))+((r10*x1160))+(((-1.0)*x1156))+((r11*x1159))+(((-1.0)*r10*x1162))+((r12*x1158)));
evalcond[5]=(((r01*x1159))+((r01*x1161))+((r00*x1160))+(((-1.0)*r00*x1162))+((r02*x1158))+(((-1.0)*x1163)));
evalcond[6]=((-0.0104)+((r11*x1167))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1164))+(((-1.0)*r11*x1165))+((r11*x1170))+(((-1.0)*r10*x1169))+(((0.0005)*x1150))+((r12*x1168))+(((0.0159)*x1154))+(((-1.0)*r10*x1166)));
evalcond[7]=((((-1.0)*(1.0)*pz))+(((-1.0)*(0.3466)*sj3))+(((-0.0159)*x1157))+(((-1.0)*r21*x1165))+((r22*x1168))+(((-1.0)*r20*x1169))+((r21*x1170))+(((0.0005)*x1155))+(((-1.0)*r20*x1166))+(((-1.0)*r20*x1164))+((r21*x1167)));
evalcond[8]=((-0.03)+(((-1.0)*(1.0)*px))+((r01*x1170))+((r02*x1168))+(((-1.0)*(0.3466)*cj3))+(((-0.0005)*sj3*x1154))+(((-1.0)*r00*x1164))+(((-1.0)*r00*x1169))+(((-1.0)*r00*x1166))+(((-1.0)*r01*x1165))+(((0.0159)*x1163))+((r01*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1171=((1.0)*cj2);
IkReal x1172=(cj6*r02);
IkReal x1173=(cj6*r12);
IkReal x1174=(cj2*sj6*sj7);
IkReal x1175=(sj2*sj6);
IkReal x1176=(cj7*r00);
IkReal x1177=((1.0)*cj2*sj6);
IkReal x1178=(cj7*r10);
IkReal x1179=((1.0)*sj2*sj6);
if( IKabs((((r01*x1174))+(((-1.0)*x1176*x1177))+(((-1.0)*x1171*x1172))+((r11*sj7*x1175))+(((-1.0)*sj2*x1173))+(((-1.0)*x1178*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj7*x1179))+(((-1.0)*x1177*x1178))+((r11*x1174))+((sj2*x1172))+((x1175*x1176))+(((-1.0)*x1171*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1174))+(((-1.0)*x1176*x1177))+(((-1.0)*x1171*x1172))+((r11*sj7*x1175))+(((-1.0)*sj2*x1173))+(((-1.0)*x1178*x1179))))+IKsqr(((((-1.0)*r01*sj7*x1179))+(((-1.0)*x1177*x1178))+((r11*x1174))+((sj2*x1172))+((x1175*x1176))+(((-1.0)*x1171*x1173))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x1174))+(((-1.0)*x1176*x1177))+(((-1.0)*x1171*x1172))+((r11*sj7*x1175))+(((-1.0)*sj2*x1173))+(((-1.0)*x1178*x1179))), ((((-1.0)*r01*sj7*x1179))+(((-1.0)*x1177*x1178))+((r11*x1174))+((sj2*x1172))+((x1175*x1176))+(((-1.0)*x1171*x1173))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1180=IKcos(j4);
IkReal x1181=(sj2*x1180);
IkReal x1182=IKsin(j4);
IkReal x1183=(cj2*x1182);
IkReal x1184=((((-1.0)*x1183))+x1181);
IkReal x1185=((1.0)*cj6);
IkReal x1186=(sj6*sj7);
IkReal x1187=((1.0)*cj7*sj6);
IkReal x1188=(cj2*x1180);
IkReal x1189=(sj2*x1182);
IkReal x1190=(cj5*sj6);
IkReal x1191=(cj7*sj5);
IkReal x1192=(sj5*sj7);
IkReal x1193=(cj5*cj6*sj7);
IkReal x1194=((1.0)*cj5*cj6*cj7);
IkReal x1195=((0.01822)*cj7);
IkReal x1196=((0.3549)*cj7);
IkReal x1197=((0.3549)*sj7);
IkReal x1198=((0.01822)*sj7);
IkReal x1199=((0.0136)*sj6);
IkReal x1200=((0.0136)*cj6*cj7);
IkReal x1201=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r02*x1185))+(((-1.0)*r00*x1187))+((r01*x1186))+x1184);
evalcond[1]=(((r11*x1186))+(((-1.0)*r10*x1187))+(((-1.0)*r12*x1185))+(((-1.0)*x1188))+(((-1.0)*x1189)));
evalcond[2]=(((r00*x1192))+((r02*x1190))+((r01*x1191))+((r01*x1193))+(((-1.0)*r00*x1194))+x1188+x1189);
evalcond[3]=(((r11*x1191))+((r11*x1193))+((r12*x1190))+x1184+((r10*x1192))+(((-1.0)*r10*x1194)));
evalcond[4]=((((-1.0)*r00*x1197))+(((-1.0)*(1.0)*px))+((r01*x1198))+(((0.03)*sj2))+(((-1.0)*r00*x1200))+(((0.0005)*x1181))+(((0.0104)*cj2))+(((-0.0005)*x1183))+((r02*x1199))+(((-0.0159)*x1189))+(((-1.0)*r00*x1195))+(((-1.0)*r01*x1196))+(((-0.0159)*x1188))+((r01*x1201)));
evalcond[5]=((((0.0159)*x1183))+(((-0.0159)*x1181))+(((-1.0)*r10*x1195))+(((-1.0)*r10*x1197))+(((-1.0)*(1.0)*py))+((r11*x1201))+((r11*x1198))+(((-1.0)*(0.03)*cj2))+(((0.0104)*sj2))+(((-0.0005)*x1189))+((r12*x1199))+(((-1.0)*r10*x1200))+(((-0.0005)*x1188))+(((-1.0)*r11*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1202=((1.0)*r02);
IkReal x1203=(cj2*cj6);
IkReal x1204=(cj6*sj2);
IkReal x1205=(r01*sj7);
IkReal x1206=(r11*sj7);
IkReal x1207=(sj2*sj6);
IkReal x1208=((1.0)*r00);
IkReal x1209=(cj2*cj7*sj6);
IkReal x1210=(cj7*sj2*sj6);
if( IKabs(((((-1.0)*r10*x1210))+(((-1.0)*x1202*x1203))+(((-1.0)*x1208*x1209))+(((-1.0)*r12*x1204))+((x1206*x1207))+((cj2*sj6*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1203))+(((-1.0)*cj2*sj6*x1206))+(((-1.0)*x1208*x1210))+(((-1.0)*x1202*x1204))+((r10*x1209))+((x1205*x1207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1210))+(((-1.0)*x1202*x1203))+(((-1.0)*x1208*x1209))+(((-1.0)*r12*x1204))+((x1206*x1207))+((cj2*sj6*x1205))))+IKsqr((((r12*x1203))+(((-1.0)*cj2*sj6*x1206))+(((-1.0)*x1208*x1210))+(((-1.0)*x1202*x1204))+((r10*x1209))+((x1205*x1207))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x1210))+(((-1.0)*x1202*x1203))+(((-1.0)*x1208*x1209))+(((-1.0)*r12*x1204))+((x1206*x1207))+((cj2*sj6*x1205))), (((r12*x1203))+(((-1.0)*cj2*sj6*x1206))+(((-1.0)*x1208*x1210))+(((-1.0)*x1202*x1204))+((r10*x1209))+((x1205*x1207))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1211=IKcos(j4);
IkReal x1212=(cj2*x1211);
IkReal x1213=IKsin(j4);
IkReal x1214=(sj2*x1213);
IkReal x1215=((((-1.0)*x1214))+x1212);
IkReal x1216=((1.0)*cj6);
IkReal x1217=(sj6*sj7);
IkReal x1218=((1.0)*cj7*sj6);
IkReal x1219=(cj2*x1213);
IkReal x1220=(sj2*x1211);
IkReal x1221=(cj5*sj6);
IkReal x1222=(cj7*sj5);
IkReal x1223=(sj5*sj7);
IkReal x1224=(cj5*cj6*sj7);
IkReal x1225=((1.0)*cj5*cj6*cj7);
IkReal x1226=((0.01822)*cj7);
IkReal x1227=((0.3549)*cj7);
IkReal x1228=((0.3549)*sj7);
IkReal x1229=((0.01822)*sj7);
IkReal x1230=((0.0136)*sj6);
IkReal x1231=((0.0136)*cj6*cj7);
IkReal x1232=((0.0136)*cj6*sj7);
evalcond[0]=(((r11*x1217))+(((-1.0)*r10*x1218))+(((-1.0)*r12*x1216))+x1215);
evalcond[1]=((((-1.0)*r00*x1218))+(((-1.0)*x1220))+(((-1.0)*x1219))+((r01*x1217))+(((-1.0)*r02*x1216)));
evalcond[2]=((((-1.0)*r10*x1225))+((r11*x1224))+((r10*x1223))+((r12*x1221))+((r11*x1222))+x1220+x1219);
evalcond[3]=(((r01*x1224))+((r02*x1221))+((r01*x1222))+(((-1.0)*r00*x1225))+((r00*x1223))+x1215);
evalcond[4]=((((-0.0005)*x1219))+(((-1.0)*(1.0)*px))+((r02*x1230))+(((0.03)*sj2))+(((0.0104)*cj2))+(((-1.0)*r00*x1228))+(((0.0159)*x1214))+(((-1.0)*r00*x1231))+(((-1.0)*r00*x1226))+((r01*x1229))+(((-0.0005)*x1220))+(((-0.0159)*x1212))+(((-1.0)*r01*x1227))+((r01*x1232)));
evalcond[5]=((((-0.0159)*x1220))+(((-0.0159)*x1219))+(((-1.0)*(1.0)*py))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1228))+(((0.0104)*sj2))+(((-1.0)*r10*x1226))+(((-0.0005)*x1214))+((r11*x1232))+((r11*x1229))+((r12*x1230))+(((-1.0)*r10*x1231))+(((0.0005)*x1212))+(((-1.0)*r11*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1233=((1.0)*sj6);
IkReal x1234=((1.0)*sj5);
IkReal x1235=(cj5*cj6);
IkReal x1236=(cj7*r20);
if( IKabs((((x1235*x1236))+(((-1.0)*cj5*r22*x1233))+(((-1.0)*cj7*r21*x1234))+(((-1.0)*r21*sj7*x1235))+(((-1.0)*r20*sj7*x1234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*sj7*x1233))+((sj6*x1236))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1235*x1236))+(((-1.0)*cj5*r22*x1233))+(((-1.0)*cj7*r21*x1234))+(((-1.0)*r21*sj7*x1235))+(((-1.0)*r20*sj7*x1234))))+IKsqr(((((-1.0)*r21*sj7*x1233))+((sj6*x1236))+((cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1235*x1236))+(((-1.0)*cj5*r22*x1233))+(((-1.0)*cj7*r21*x1234))+(((-1.0)*r21*sj7*x1235))+(((-1.0)*r20*sj7*x1234))), ((((-1.0)*r21*sj7*x1233))+((sj6*x1236))+((cj6*r22))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1237=IKcos(j4);
IkReal x1238=((1.0)*cj6);
IkReal x1239=(sj6*sj7);
IkReal x1240=((1.0)*cj7*sj6);
IkReal x1241=IKsin(j4);
IkReal x1242=(cj2*x1241);
IkReal x1243=(sj2*x1241);
IkReal x1244=(cj5*sj6);
IkReal x1245=(cj7*sj5);
IkReal x1246=(sj5*sj7);
IkReal x1247=(cj5*cj6*sj7);
IkReal x1248=((1.0)*cj5*cj6*cj7);
IkReal x1249=(cj2*x1237);
IkReal x1250=(sj2*x1237);
IkReal x1251=((0.01822)*cj7);
IkReal x1252=((0.3549)*cj7);
IkReal x1253=((0.3549)*sj7);
IkReal x1254=((0.01822)*sj7);
IkReal x1255=((0.0136)*sj6);
IkReal x1256=((0.0136)*cj6*cj7);
IkReal x1257=((0.0136)*cj6*sj7);
evalcond[0]=(((r21*x1239))+(((-1.0)*r20*x1240))+x1237+(((-1.0)*r22*x1238)));
evalcond[1]=((((-1.0)*x1242))+(((-1.0)*r00*x1240))+((r01*x1239))+(((-1.0)*r02*x1238)));
evalcond[2]=((((-1.0)*r10*x1240))+(((-1.0)*x1243))+((r11*x1239))+(((-1.0)*r12*x1238)));
evalcond[3]=(((r22*x1244))+((r21*x1245))+(((-1.0)*r20*x1248))+x1241+((r20*x1246))+((r21*x1247)));
evalcond[4]=(((r01*x1247))+((r02*x1244))+((r01*x1245))+((r00*x1246))+(((-1.0)*r00*x1248))+x1249);
evalcond[5]=(((r10*x1246))+((r11*x1245))+((r12*x1244))+x1250+((r11*x1247))+(((-1.0)*r10*x1248)));
evalcond[6]=(((r22*x1255))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1256))+(((-1.0)*r21*x1252))+((r21*x1254))+(((0.0005)*x1237))+(((-1.0)*r20*x1251))+(((-1.0)*r20*x1253))+(((-0.0159)*x1241))+((r21*x1257)));
evalcond[7]=((((-1.0)*(1.0)*px))+((r02*x1255))+(((0.0104)*cj2))+(((-1.0)*r00*x1256))+(((-1.0)*r01*x1252))+(((-0.0159)*x1249))+(((0.3766)*sj2))+(((-1.0)*r00*x1253))+((r01*x1257))+(((-0.0005)*x1242))+(((-1.0)*r00*x1251))+((r01*x1254)));
evalcond[8]=(((r11*x1254))+((r12*x1255))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1256))+(((0.0104)*sj2))+(((-0.0005)*x1243))+(((-1.0)*r11*x1252))+(((-0.0159)*x1250))+(((-1.0)*r10*x1253))+((r11*x1257))+(((-1.0)*r10*x1251))+(((-1.0)*(0.3766)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1258=(r21*sj7);
IkReal x1259=(cj7*r20);
if( IKabs((((r20*sj5*sj7))+((cj7*r21*sj5))+((cj5*cj6*x1258))+(((-1.0)*cj5*cj6*x1259))+((cj5*r22*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x1258))+(((-1.0)*cj6*r22))+(((-1.0)*sj6*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj5*sj7))+((cj7*r21*sj5))+((cj5*cj6*x1258))+(((-1.0)*cj5*cj6*x1259))+((cj5*r22*sj6))))+IKsqr((((sj6*x1258))+(((-1.0)*cj6*r22))+(((-1.0)*sj6*x1259))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r20*sj5*sj7))+((cj7*r21*sj5))+((cj5*cj6*x1258))+(((-1.0)*cj5*cj6*x1259))+((cj5*r22*sj6))), (((sj6*x1258))+(((-1.0)*cj6*r22))+(((-1.0)*sj6*x1259))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1260=((1.0)*cj6);
IkReal x1261=(sj6*sj7);
IkReal x1262=IKcos(j4);
IkReal x1263=((1.0)*cj7*sj6);
IkReal x1264=IKsin(j4);
IkReal x1265=((1.0)*x1264);
IkReal x1266=(cj5*sj6);
IkReal x1267=(cj7*sj5);
IkReal x1268=(sj5*sj7);
IkReal x1269=(cj5*cj6*sj7);
IkReal x1270=((1.0)*cj5*cj6*cj7);
IkReal x1271=(cj2*x1262);
IkReal x1272=(sj2*x1262);
IkReal x1273=((0.01822)*cj7);
IkReal x1274=((0.3549)*cj7);
IkReal x1275=((0.3549)*sj7);
IkReal x1276=((0.01822)*sj7);
IkReal x1277=((0.0136)*sj6);
IkReal x1278=((0.0136)*cj6*cj7);
IkReal x1279=((0.0136)*cj6*sj7);
IkReal x1280=((0.0005)*x1264);
evalcond[0]=((((-1.0)*r22*x1260))+(((-1.0)*r20*x1263))+(((-1.0)*x1262))+((r21*x1261)));
evalcond[1]=((((-1.0)*cj2*x1265))+((r01*x1261))+(((-1.0)*r02*x1260))+(((-1.0)*r00*x1263)));
evalcond[2]=((((-1.0)*sj2*x1265))+(((-1.0)*r12*x1260))+(((-1.0)*r10*x1263))+((r11*x1261)));
evalcond[3]=(((r20*x1268))+((r22*x1266))+((r21*x1269))+(((-1.0)*x1265))+(((-1.0)*r20*x1270))+((r21*x1267)));
evalcond[4]=((((-1.0)*r00*x1270))+((r02*x1266))+((r00*x1268))+x1271+((r01*x1269))+((r01*x1267)));
evalcond[5]=((((-1.0)*r10*x1270))+((r11*x1269))+x1272+((r11*x1267))+((r12*x1266))+((r10*x1268)));
evalcond[6]=(((r21*x1276))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1275))+((r21*x1279))+(((-0.0005)*x1262))+(((0.0159)*x1264))+(((-1.0)*r20*x1273))+(((-1.0)*r21*x1274))+(((-1.0)*r20*x1278))+((r22*x1277)));
evalcond[7]=(((r01*x1279))+(((-0.0159)*x1271))+(((-1.0)*(1.0)*px))+((r02*x1277))+(((0.0104)*cj2))+(((-1.0)*(0.3166)*sj2))+((r01*x1276))+(((-1.0)*r00*x1275))+(((-1.0)*cj2*x1280))+(((-1.0)*r00*x1278))+(((-1.0)*r01*x1274))+(((-1.0)*r00*x1273)));
evalcond[8]=((((-1.0)*r10*x1273))+(((-1.0)*r11*x1274))+(((-1.0)*(1.0)*py))+(((0.0104)*sj2))+(((-1.0)*sj2*x1280))+(((-1.0)*r10*x1278))+((r11*x1279))+(((0.3166)*cj2))+(((-1.0)*r10*x1275))+(((-0.0159)*x1272))+((r11*x1276))+((r12*x1277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(cj3,-1);
if(!x1288.valid){
continue;
}
IkReal x1281=x1288.value;
IkReal x1282=((1.0)*cj3);
IkReal x1283=(sj6*sj7);
IkReal x1284=(cj6*r22);
IkReal x1285=(sj2*sj3);
IkReal x1286=(r20*((cj7*sj6)));
IkReal x1287=((1.0)*r21*x1283);
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(cj2,-1);
if(!x1289.valid){
continue;
}
if( IKabs((x1281*(x1289.value)*(((((-1.0)*x1285*x1287))+((x1285*x1286))+(((-1.0)*cj6*r02*x1282))+((cj3*r01*x1283))+(((-1.0)*cj7*r00*sj6*x1282))+((x1284*x1285)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1281*(((((-1.0)*x1287))+x1286+x1284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1281*(x1289.value)*(((((-1.0)*x1285*x1287))+((x1285*x1286))+(((-1.0)*cj6*r02*x1282))+((cj3*r01*x1283))+(((-1.0)*cj7*r00*sj6*x1282))+((x1284*x1285))))))+IKsqr((x1281*(((((-1.0)*x1287))+x1286+x1284))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1281*(x1289.value)*(((((-1.0)*x1285*x1287))+((x1285*x1286))+(((-1.0)*cj6*r02*x1282))+((cj3*r01*x1283))+(((-1.0)*cj7*r00*sj6*x1282))+((x1284*x1285))))), (x1281*(((((-1.0)*x1287))+x1286+x1284))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1290=IKcos(j4);
IkReal x1291=(cj3*x1290);
IkReal x1292=((1.0)*cj6);
IkReal x1293=(sj6*sj7);
IkReal x1294=((1.0)*cj7*sj6);
IkReal x1295=IKsin(j4);
IkReal x1296=(cj2*x1295);
IkReal x1297=((1.0)*x1296);
IkReal x1298=(sj2*x1290);
IkReal x1299=(sj3*x1298);
IkReal x1300=(sj2*x1295);
IkReal x1301=(cj2*sj3*x1290);
IkReal x1302=(cj3*x1295);
IkReal x1303=(cj5*sj6);
IkReal x1304=(cj7*sj5);
IkReal x1305=(sj5*sj7);
IkReal x1306=(cj5*cj6*sj7);
IkReal x1307=((1.0)*cj5*cj6*cj7);
IkReal x1308=(cj2*x1290);
IkReal x1309=(sj3*x1300);
IkReal x1310=((0.01822)*cj7);
IkReal x1311=((0.3549)*cj7);
IkReal x1312=((0.3549)*sj7);
IkReal x1313=((0.01822)*sj7);
IkReal x1314=((0.0136)*sj6);
IkReal x1315=((0.0136)*cj6*cj7);
IkReal x1316=((0.0136)*cj6*sj7);
IkReal x1317=((0.3466)*cj3);
evalcond[0]=((((-1.0)*r22*x1292))+x1291+(((-1.0)*r20*x1294))+((r21*x1293)));
evalcond[1]=(((r01*x1293))+(((-1.0)*r02*x1292))+x1299+(((-1.0)*r00*x1294))+(((-1.0)*x1297)));
evalcond[2]=((((-1.0)*x1301))+((r11*x1293))+(((-1.0)*r10*x1294))+(((-1.0)*x1300))+(((-1.0)*r12*x1292)));
evalcond[3]=(x1302+((r22*x1303))+((r21*x1306))+((r20*x1305))+(((-1.0)*r20*x1307))+((r21*x1304)));
evalcond[4]=(((r00*x1305))+((r01*x1304))+x1308+x1309+(((-1.0)*r00*x1307))+((r01*x1306))+((r02*x1303)));
evalcond[5]=(((r11*x1304))+(((-1.0)*r10*x1307))+((r10*x1305))+((r11*x1306))+x1298+((r12*x1303))+(((-1.0)*sj3*x1297)));
evalcond[6]=((((-1.0)*r21*x1311))+((r22*x1314))+(((-1.0)*r20*x1310))+(((-1.0)*r20*x1312))+(((-1.0)*(1.0)*pz))+(((-0.0159)*x1302))+(((-1.0)*(0.3466)*sj3))+((r21*x1313))+((r21*x1316))+(((0.0005)*x1291))+(((-1.0)*r20*x1315)));
evalcond[7]=((((-1.0)*(1.0)*px))+((sj2*x1317))+(((0.03)*sj2))+(((0.0005)*x1299))+(((-0.0159)*x1309))+(((0.0104)*cj2))+(((-1.0)*r00*x1310))+((r01*x1313))+(((-1.0)*r00*x1315))+(((-1.0)*r01*x1311))+((r02*x1314))+(((-0.0159)*x1308))+(((-1.0)*r00*x1312))+(((-0.0005)*x1296))+((r01*x1316)));
evalcond[8]=((((-1.0)*r10*x1310))+(((-1.0)*cj2*x1317))+(((-0.0005)*x1300))+(((-1.0)*(1.0)*py))+(((-0.0005)*x1301))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1315))+(((0.0104)*sj2))+((r11*x1316))+(((0.0159)*sj3*x1296))+((r11*x1313))+(((-1.0)*r10*x1312))+(((-1.0)*r11*x1311))+((r12*x1314))+(((-0.0159)*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1318=((1.0)*cj2);
IkReal x1319=(cj6*r02);
IkReal x1320=(cj6*r12);
IkReal x1321=(cj2*sj6*sj7);
IkReal x1322=(sj2*sj6);
IkReal x1323=(cj7*r00);
IkReal x1324=((1.0)*cj2*sj6);
IkReal x1325=(cj7*r10);
IkReal x1326=((1.0)*sj2*sj6);
CheckValue<IkReal> x1327=IKPowWithIntegerCheck(sj3,-1);
if(!x1327.valid){
continue;
}
if( IKabs(((((-1.0)*x1323*x1324))+((r11*sj7*x1322))+(((-1.0)*x1318*x1319))+(((-1.0)*sj2*x1320))+((r01*x1321))+(((-1.0)*x1325*x1326)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1327.value)*((((r11*x1321))+(((-1.0)*r01*sj7*x1326))+((sj2*x1319))+(((-1.0)*x1324*x1325))+((x1322*x1323))+(((-1.0)*x1318*x1320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1323*x1324))+((r11*sj7*x1322))+(((-1.0)*x1318*x1319))+(((-1.0)*sj2*x1320))+((r01*x1321))+(((-1.0)*x1325*x1326))))+IKsqr(((x1327.value)*((((r11*x1321))+(((-1.0)*r01*sj7*x1326))+((sj2*x1319))+(((-1.0)*x1324*x1325))+((x1322*x1323))+(((-1.0)*x1318*x1320))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1323*x1324))+((r11*sj7*x1322))+(((-1.0)*x1318*x1319))+(((-1.0)*sj2*x1320))+((r01*x1321))+(((-1.0)*x1325*x1326))), ((x1327.value)*((((r11*x1321))+(((-1.0)*r01*sj7*x1326))+((sj2*x1319))+(((-1.0)*x1324*x1325))+((x1322*x1323))+(((-1.0)*x1318*x1320))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1328=IKcos(j4);
IkReal x1329=(cj3*x1328);
IkReal x1330=((1.0)*cj6);
IkReal x1331=(sj6*sj7);
IkReal x1332=((1.0)*cj7*sj6);
IkReal x1333=IKsin(j4);
IkReal x1334=(cj2*x1333);
IkReal x1335=((1.0)*x1334);
IkReal x1336=(sj2*x1328);
IkReal x1337=(sj3*x1336);
IkReal x1338=(sj2*x1333);
IkReal x1339=(cj2*sj3*x1328);
IkReal x1340=(cj3*x1333);
IkReal x1341=(cj5*sj6);
IkReal x1342=(cj7*sj5);
IkReal x1343=(sj5*sj7);
IkReal x1344=(cj5*cj6*sj7);
IkReal x1345=((1.0)*cj5*cj6*cj7);
IkReal x1346=(cj2*x1328);
IkReal x1347=(sj3*x1338);
IkReal x1348=((0.01822)*cj7);
IkReal x1349=((0.3549)*cj7);
IkReal x1350=((0.3549)*sj7);
IkReal x1351=((0.01822)*sj7);
IkReal x1352=((0.0136)*sj6);
IkReal x1353=((0.0136)*cj6*cj7);
IkReal x1354=((0.0136)*cj6*sj7);
IkReal x1355=((0.3466)*cj3);
evalcond[0]=(x1329+(((-1.0)*r22*x1330))+(((-1.0)*r20*x1332))+((r21*x1331)));
evalcond[1]=(x1337+(((-1.0)*r00*x1332))+(((-1.0)*x1335))+((r01*x1331))+(((-1.0)*r02*x1330)));
evalcond[2]=(((r11*x1331))+(((-1.0)*x1338))+(((-1.0)*x1339))+(((-1.0)*r12*x1330))+(((-1.0)*r10*x1332)));
evalcond[3]=(((r21*x1344))+(((-1.0)*r20*x1345))+((r22*x1341))+((r21*x1342))+((r20*x1343))+x1340);
evalcond[4]=((((-1.0)*r00*x1345))+((r00*x1343))+((r01*x1342))+((r01*x1344))+x1347+x1346+((r02*x1341)));
evalcond[5]=(((r10*x1343))+((r11*x1342))+x1336+((r11*x1344))+((r12*x1341))+(((-1.0)*sj3*x1335))+(((-1.0)*r10*x1345)));
evalcond[6]=((((-1.0)*r20*x1350))+(((-0.0159)*x1340))+((r21*x1351))+(((-1.0)*r21*x1349))+((r22*x1352))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.3466)*sj3))+(((-1.0)*r20*x1353))+(((0.0005)*x1329))+((r21*x1354))+(((-1.0)*r20*x1348)));
evalcond[7]=(((r01*x1354))+(((-1.0)*(1.0)*px))+(((0.03)*sj2))+(((0.0104)*cj2))+(((-1.0)*r00*x1348))+(((-0.0159)*x1347))+(((-1.0)*r00*x1353))+(((-1.0)*r00*x1350))+((sj2*x1355))+((r02*x1352))+(((-0.0005)*x1334))+((r01*x1351))+(((-1.0)*r01*x1349))+(((-0.0159)*x1346))+(((0.0005)*x1337)));
evalcond[8]=((((-1.0)*(1.0)*py))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1350))+(((-0.0159)*x1336))+(((-1.0)*r11*x1349))+(((0.0104)*sj2))+(((-1.0)*cj2*x1355))+(((-1.0)*r10*x1353))+(((-0.0005)*x1339))+((r12*x1352))+((r11*x1351))+(((-0.0005)*x1338))+(((-1.0)*r10*x1348))+(((0.0159)*sj3*x1334))+((r11*x1354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1356=((1.0)*sj6);
IkReal x1357=((1.0)*sj5);
IkReal x1358=(cj5*cj6);
IkReal x1359=(cj7*r20);
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj7*x1358))+(((-1.0)*cj7*r21*x1357))+((x1358*x1359))+(((-1.0)*r20*sj7*x1357))+(((-1.0)*cj5*r22*x1356)))),IkReal(((((-1.0)*r21*sj7*x1356))+((sj6*x1359))+((cj6*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1360.value)+(((1.5707963267949)*(x1361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1362=IKcos(j4);
IkReal x1363=(cj3*x1362);
IkReal x1364=((1.0)*cj6);
IkReal x1365=(sj6*sj7);
IkReal x1366=((1.0)*cj7*sj6);
IkReal x1367=IKsin(j4);
IkReal x1368=(cj2*x1367);
IkReal x1369=((1.0)*x1368);
IkReal x1370=(sj2*x1362);
IkReal x1371=(sj3*x1370);
IkReal x1372=(sj2*x1367);
IkReal x1373=(cj2*sj3*x1362);
IkReal x1374=(cj3*x1367);
IkReal x1375=(cj5*sj6);
IkReal x1376=(cj7*sj5);
IkReal x1377=(sj5*sj7);
IkReal x1378=(cj5*cj6*sj7);
IkReal x1379=((1.0)*cj5*cj6*cj7);
IkReal x1380=(cj2*x1362);
IkReal x1381=(sj3*x1372);
IkReal x1382=((0.01822)*cj7);
IkReal x1383=((0.3549)*cj7);
IkReal x1384=((0.3549)*sj7);
IkReal x1385=((0.01822)*sj7);
IkReal x1386=((0.0136)*sj6);
IkReal x1387=((0.0136)*cj6*cj7);
IkReal x1388=((0.0136)*cj6*sj7);
IkReal x1389=((0.3466)*cj3);
evalcond[0]=(((r21*x1365))+(((-1.0)*r22*x1364))+x1363+(((-1.0)*r20*x1366)));
evalcond[1]=(((r01*x1365))+(((-1.0)*r02*x1364))+x1371+(((-1.0)*r00*x1366))+(((-1.0)*x1369)));
evalcond[2]=((((-1.0)*x1372))+(((-1.0)*r10*x1366))+(((-1.0)*r12*x1364))+(((-1.0)*x1373))+((r11*x1365)));
evalcond[3]=(x1374+((r21*x1378))+(((-1.0)*r20*x1379))+((r22*x1375))+((r20*x1377))+((r21*x1376)));
evalcond[4]=(((r00*x1377))+x1380+x1381+((r01*x1376))+(((-1.0)*r00*x1379))+((r02*x1375))+((r01*x1378)));
evalcond[5]=(((r12*x1375))+(((-1.0)*r10*x1379))+x1370+((r11*x1378))+((r10*x1377))+(((-1.0)*sj3*x1369))+((r11*x1376)));
evalcond[6]=((((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1382))+(((-1.0)*(0.3466)*sj3))+(((-1.0)*r20*x1387))+((r22*x1386))+(((-0.0159)*x1374))+((r21*x1385))+(((-1.0)*r20*x1384))+(((-1.0)*r21*x1383))+((r21*x1388))+(((0.0005)*x1363)));
evalcond[7]=((((-1.0)*r00*x1382))+(((-1.0)*(1.0)*px))+(((0.0005)*x1371))+(((0.03)*sj2))+(((-1.0)*r00*x1387))+(((-1.0)*r00*x1384))+(((0.0104)*cj2))+((r02*x1386))+((r01*x1385))+(((-1.0)*r01*x1383))+((sj2*x1389))+((r01*x1388))+(((-0.0159)*x1381))+(((-0.0005)*x1368))+(((-0.0159)*x1380)));
evalcond[8]=((((-1.0)*r11*x1383))+(((-1.0)*(1.0)*py))+((r11*x1385))+(((-0.0005)*x1372))+(((-1.0)*(0.03)*cj2))+(((0.0104)*sj2))+((r11*x1388))+(((-1.0)*r10*x1382))+(((-1.0)*r10*x1384))+(((-0.0159)*x1370))+(((-1.0)*r10*x1387))+(((-1.0)*cj2*x1389))+((r12*x1386))+(((-0.0005)*x1373))+(((0.0159)*sj3*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1390=(cj5*cj7);
IkReal x1391=(cj5*sj7);
IkReal x1392=((1.0)*sj5*sj6);
IkReal x1393=(cj6*cj7*sj5);
IkReal x1394=((1.0)*cj6*sj5*sj7);
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(cj2,-1);
if(!x1395.valid){
continue;
}
if( IKabs(((((-1.0)*r21*x1394))+((r20*x1393))+((r21*x1390))+((r20*x1391))+(((-1.0)*r22*x1392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1395.value)*((((r10*x1393))+(((-1.0)*r11*x1394))+(((-1.0)*r12*x1392))+((r11*x1390))+((r10*x1391)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1394))+((r20*x1393))+((r21*x1390))+((r20*x1391))+(((-1.0)*r22*x1392))))+IKsqr(((x1395.value)*((((r10*x1393))+(((-1.0)*r11*x1394))+(((-1.0)*r12*x1392))+((r11*x1390))+((r10*x1391))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r21*x1394))+((r20*x1393))+((r21*x1390))+((r20*x1391))+(((-1.0)*r22*x1392))), ((x1395.value)*((((r10*x1393))+(((-1.0)*r11*x1394))+(((-1.0)*r12*x1392))+((r11*x1390))+((r10*x1391))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1396=(sj5*sj6);
IkReal x1397=((1.0)*cj5*cj7);
IkReal x1398=((1.0)*cj5*sj7);
IkReal x1399=(cj6*sj5*sj7);
IkReal x1400=((1.0)*cj6*cj7*sj5);
IkReal x1401=IKcos(j3);
evalcond[0]=((IKsin(j3))+(((-1.0)*r20*x1400))+((r21*x1399))+(((-1.0)*r21*x1397))+((r22*x1396))+(((-1.0)*r20*x1398)));
evalcond[1]=(((r11*x1399))+(((-1.0)*r10*x1398))+((r12*x1396))+((cj2*x1401))+(((-1.0)*r10*x1400))+(((-1.0)*r11*x1397)));
evalcond[2]=((((-1.0)*r00*x1400))+(((-1.0)*r01*x1397))+(((-1.0)*sj2*x1401))+(((-1.0)*r00*x1398))+((r02*x1396))+((r01*x1399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1402=(cj7*r20);
IkReal x1403=((1.0)*sj6);
IkReal x1404=((1.0)*sj5);
IkReal x1405=(cj5*cj6);
j4eval[0]=cj3;
j4eval[1]=((IKabs(((((-1.0)*r21*sj7*x1405))+(((-1.0)*r20*sj7*x1404))+((x1402*x1405))+(((-1.0)*cj7*r21*x1404))+(((-1.0)*cj5*r22*x1403)))))+(IKabs((((sj6*x1402))+(((-1.0)*r21*sj7*x1403))+((cj6*r22))))));
j4eval[2]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj2;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1406=((1.0)*r12);
IkReal x1407=((1.0)*cj7);
IkReal x1408=(cj5*cj6);
if( IKabs((((sj6*((r11*sj7))))+(((-1.0)*cj6*x1406))+(((-1.0)*r10*sj6*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r10*x1408))+(((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*r11*sj7*x1408))+(((-1.0)*cj5*sj6*x1406))+(((-1.0)*r11*sj5*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj6*((r11*sj7))))+(((-1.0)*cj6*x1406))+(((-1.0)*r10*sj6*x1407))))+IKsqr((((cj7*r10*x1408))+(((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*r11*sj7*x1408))+(((-1.0)*cj5*sj6*x1406))+(((-1.0)*r11*sj5*x1407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj6*((r11*sj7))))+(((-1.0)*cj6*x1406))+(((-1.0)*r10*sj6*x1407))), (((cj7*r10*x1408))+(((-1.0)*(1.0)*r10*sj5*sj7))+(((-1.0)*r11*sj7*x1408))+(((-1.0)*cj5*sj6*x1406))+(((-1.0)*r11*sj5*x1407))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1409=IKcos(j4);
IkReal x1410=(cj3*x1409);
IkReal x1411=((1.0)*cj6);
IkReal x1412=(sj6*sj7);
IkReal x1413=((1.0)*cj7*sj6);
IkReal x1414=(sj3*x1409);
IkReal x1415=IKsin(j4);
IkReal x1416=(cj5*sj6);
IkReal x1417=(cj7*sj5);
IkReal x1418=(sj5*sj7);
IkReal x1419=(cj5*cj6*sj7);
IkReal x1420=((1.0)*cj5*cj6*cj7);
IkReal x1421=(cj3*x1415);
IkReal x1422=(sj3*x1415);
IkReal x1423=((0.01822)*cj7);
IkReal x1424=((0.3549)*cj7);
IkReal x1425=((0.3549)*sj7);
IkReal x1426=((0.01822)*sj7);
IkReal x1427=((0.0136)*sj6);
IkReal x1428=((0.0136)*cj6*cj7);
IkReal x1429=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r20*x1413))+(((-1.0)*r22*x1411))+((r21*x1412))+x1410);
evalcond[1]=(((r01*x1412))+(((-1.0)*r00*x1413))+x1414+(((-1.0)*r02*x1411)));
evalcond[2]=((((-1.0)*x1415))+((r11*x1412))+(((-1.0)*r12*x1411))+(((-1.0)*r10*x1413)));
evalcond[3]=(((r12*x1416))+((r10*x1418))+((r11*x1419))+(((-1.0)*r10*x1420))+x1409+((r11*x1417)));
evalcond[4]=(((r20*x1418))+((r21*x1417))+x1421+(((-1.0)*r20*x1420))+((r22*x1416))+((r21*x1419)));
evalcond[5]=(((r00*x1418))+((r01*x1417))+((r01*x1419))+x1422+((r02*x1416))+(((-1.0)*r00*x1420)));
evalcond[6]=((0.0104)+((r12*x1427))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1423))+((r11*x1429))+((r11*x1426))+(((-1.0)*r10*x1425))+(((-1.0)*r11*x1424))+(((-0.0005)*x1415))+(((-0.0159)*x1409))+(((-1.0)*r10*x1428)));
evalcond[7]=((((0.0005)*x1410))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1425))+(((-1.0)*(0.3466)*sj3))+((r22*x1427))+(((-1.0)*r21*x1424))+((r21*x1426))+(((-0.0159)*x1421))+((r21*x1429))+(((-1.0)*r20*x1428))+(((-1.0)*r20*x1423)));
evalcond[8]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1428))+(((-1.0)*r01*x1424))+(((-1.0)*r00*x1425))+((r02*x1427))+(((0.0005)*x1414))+(((-0.0159)*x1422))+(((-1.0)*r00*x1423))+((r01*x1429))+(((0.3466)*cj3))+((r01*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=(r11*sj7);
IkReal x1431=(cj5*cj6);
if( IKabs((((cj6*r12))+((sj6*((cj7*r10))))+(((-1.0)*sj6*x1430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj7*r11*sj5))+((x1430*x1431))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x1431))+((r10*sj5*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r12))+((sj6*((cj7*r10))))+(((-1.0)*sj6*x1430))))+IKsqr((((cj7*r11*sj5))+((x1430*x1431))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x1431))+((r10*sj5*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj6*r12))+((sj6*((cj7*r10))))+(((-1.0)*sj6*x1430))), (((cj7*r11*sj5))+((x1430*x1431))+((cj5*r12*sj6))+(((-1.0)*cj7*r10*x1431))+((r10*sj5*sj7))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1432=IKsin(j4);
IkReal x1433=((1.0)*cj6);
IkReal x1434=(sj6*sj7);
IkReal x1435=((1.0)*cj7*sj6);
IkReal x1436=IKcos(j4);
IkReal x1437=(cj3*x1436);
IkReal x1438=((1.0)*x1436);
IkReal x1439=(cj3*x1432);
IkReal x1440=(cj5*sj6);
IkReal x1441=(cj7*sj5);
IkReal x1442=(sj5*sj7);
IkReal x1443=(cj5*cj6*sj7);
IkReal x1444=((1.0)*cj5*cj6*cj7);
IkReal x1445=(sj3*x1432);
IkReal x1446=((0.01822)*cj7);
IkReal x1447=((0.3549)*cj7);
IkReal x1448=((0.3549)*sj7);
IkReal x1449=((0.01822)*sj7);
IkReal x1450=((0.0136)*sj6);
IkReal x1451=((0.0136)*cj6*cj7);
IkReal x1452=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r12*x1433))+(((-1.0)*r10*x1435))+x1432+((r11*x1434)));
evalcond[1]=((((-1.0)*r22*x1433))+((r21*x1434))+(((-1.0)*r20*x1435))+x1437);
evalcond[2]=((((-1.0)*sj3*x1438))+(((-1.0)*r00*x1435))+(((-1.0)*r02*x1433))+((r01*x1434)));
evalcond[3]=(((r20*x1442))+(((-1.0)*r20*x1444))+((r22*x1440))+x1439+((r21*x1441))+((r21*x1443)));
evalcond[4]=((((-1.0)*r10*x1444))+((r10*x1442))+(((-1.0)*x1438))+((r11*x1441))+((r12*x1440))+((r11*x1443)));
evalcond[5]=(((r01*x1443))+((r02*x1440))+(((-1.0)*x1445))+((r00*x1442))+((r01*x1441))+(((-1.0)*r00*x1444)));
evalcond[6]=((-0.0104)+(((-1.0)*r11*x1447))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1448))+((r11*x1452))+(((0.0159)*x1436))+((r12*x1450))+(((-1.0)*r10*x1446))+((r11*x1449))+(((-1.0)*r10*x1451))+(((0.0005)*x1432)));
evalcond[7]=((((0.0005)*x1437))+((r22*x1450))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1446))+(((-1.0)*(0.3466)*sj3))+(((-1.0)*r20*x1448))+((r21*x1449))+(((-0.0159)*x1439))+((r21*x1452))+(((-1.0)*r21*x1447))+(((-1.0)*r20*x1451)));
evalcond[8]=((-0.03)+(((-1.0)*r01*x1447))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1448))+((r01*x1452))+(((-1.0)*(0.3466)*cj3))+(((0.0159)*x1445))+((r02*x1450))+(((-0.0005)*sj3*x1436))+((r01*x1449))+(((-1.0)*r00*x1451))+(((-1.0)*r00*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1453=((1.0)*cj2);
IkReal x1454=(cj6*r02);
IkReal x1455=(cj6*r12);
IkReal x1456=(cj2*sj6*sj7);
IkReal x1457=(sj2*sj6);
IkReal x1458=(cj7*r00);
IkReal x1459=((1.0)*cj2*sj6);
IkReal x1460=(cj7*r10);
IkReal x1461=((1.0)*sj2*sj6);
if( IKabs(((((-1.0)*x1453*x1454))+(((-1.0)*x1460*x1461))+((r11*sj7*x1457))+(((-1.0)*sj2*x1455))+(((-1.0)*x1458*x1459))+((r01*x1456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x1454))+(((-1.0)*x1459*x1460))+(((-1.0)*x1453*x1455))+((x1457*x1458))+((r11*x1456))+(((-1.0)*r01*sj7*x1461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1453*x1454))+(((-1.0)*x1460*x1461))+((r11*sj7*x1457))+(((-1.0)*sj2*x1455))+(((-1.0)*x1458*x1459))+((r01*x1456))))+IKsqr((((sj2*x1454))+(((-1.0)*x1459*x1460))+(((-1.0)*x1453*x1455))+((x1457*x1458))+((r11*x1456))+(((-1.0)*r01*sj7*x1461))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x1453*x1454))+(((-1.0)*x1460*x1461))+((r11*sj7*x1457))+(((-1.0)*sj2*x1455))+(((-1.0)*x1458*x1459))+((r01*x1456))), (((sj2*x1454))+(((-1.0)*x1459*x1460))+(((-1.0)*x1453*x1455))+((x1457*x1458))+((r11*x1456))+(((-1.0)*r01*sj7*x1461))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1462=IKcos(j4);
IkReal x1463=(sj2*x1462);
IkReal x1464=IKsin(j4);
IkReal x1465=(cj2*x1464);
IkReal x1466=(x1463+(((-1.0)*x1465)));
IkReal x1467=((1.0)*cj6);
IkReal x1468=(sj6*sj7);
IkReal x1469=((1.0)*cj7*sj6);
IkReal x1470=(cj2*x1462);
IkReal x1471=(sj2*x1464);
IkReal x1472=(cj5*sj6);
IkReal x1473=(cj7*sj5);
IkReal x1474=(sj5*sj7);
IkReal x1475=(cj5*cj6*sj7);
IkReal x1476=((1.0)*cj5*cj6*cj7);
IkReal x1477=((0.01822)*cj7);
IkReal x1478=((0.3549)*cj7);
IkReal x1479=((0.3549)*sj7);
IkReal x1480=((0.01822)*sj7);
IkReal x1481=((0.0136)*sj6);
IkReal x1482=((0.0136)*cj6*cj7);
IkReal x1483=((0.0136)*cj6*sj7);
evalcond[0]=((((-1.0)*r02*x1467))+x1466+((r01*x1468))+(((-1.0)*r00*x1469)));
evalcond[1]=((((-1.0)*r12*x1467))+((r11*x1468))+(((-1.0)*x1470))+(((-1.0)*x1471))+(((-1.0)*r10*x1469)));
evalcond[2]=(((r00*x1474))+((r02*x1472))+(((-1.0)*r00*x1476))+((r01*x1473))+((r01*x1475))+x1470+x1471);
evalcond[3]=(((r11*x1473))+((r10*x1474))+x1466+(((-1.0)*r10*x1476))+((r12*x1472))+((r11*x1475)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.03)*sj2))+((r01*x1480))+(((-1.0)*r00*x1477))+(((0.0104)*cj2))+(((-1.0)*r01*x1478))+(((-1.0)*r00*x1482))+(((-1.0)*r00*x1479))+((r02*x1481))+((r01*x1483))+(((-0.0159)*x1470))+(((0.0005)*x1463))+(((-0.0159)*x1471))+(((-0.0005)*x1465)));
evalcond[5]=((((-1.0)*r10*x1482))+((r12*x1481))+(((-0.0005)*x1471))+(((-0.0159)*x1463))+(((-1.0)*(1.0)*py))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1479))+((r11*x1480))+(((0.0104)*sj2))+(((0.0159)*x1465))+(((-1.0)*r10*x1477))+((r11*x1483))+(((-1.0)*r11*x1478))+(((-0.0005)*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1484=((1.0)*r02);
IkReal x1485=(cj2*cj6);
IkReal x1486=(cj6*sj2);
IkReal x1487=(r01*sj7);
IkReal x1488=(r11*sj7);
IkReal x1489=(sj2*sj6);
IkReal x1490=((1.0)*r00);
IkReal x1491=(cj2*cj7*sj6);
IkReal x1492=(cj7*sj2*sj6);
if( IKabs(((((-1.0)*r10*x1492))+(((-1.0)*r12*x1486))+((cj2*sj6*x1487))+((x1488*x1489))+(((-1.0)*x1484*x1485))+(((-1.0)*x1490*x1491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1487*x1489))+((r10*x1491))+((r12*x1485))+(((-1.0)*cj2*sj6*x1488))+(((-1.0)*x1484*x1486))+(((-1.0)*x1490*x1492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1492))+(((-1.0)*r12*x1486))+((cj2*sj6*x1487))+((x1488*x1489))+(((-1.0)*x1484*x1485))+(((-1.0)*x1490*x1491))))+IKsqr((((x1487*x1489))+((r10*x1491))+((r12*x1485))+(((-1.0)*cj2*sj6*x1488))+(((-1.0)*x1484*x1486))+(((-1.0)*x1490*x1492))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r10*x1492))+(((-1.0)*r12*x1486))+((cj2*sj6*x1487))+((x1488*x1489))+(((-1.0)*x1484*x1485))+(((-1.0)*x1490*x1491))), (((x1487*x1489))+((r10*x1491))+((r12*x1485))+(((-1.0)*cj2*sj6*x1488))+(((-1.0)*x1484*x1486))+(((-1.0)*x1490*x1492))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1493=IKcos(j4);
IkReal x1494=(cj2*x1493);
IkReal x1495=IKsin(j4);
IkReal x1496=(sj2*x1495);
IkReal x1497=(x1494+(((-1.0)*x1496)));
IkReal x1498=((1.0)*cj6);
IkReal x1499=(sj6*sj7);
IkReal x1500=((1.0)*cj7*sj6);
IkReal x1501=(cj2*x1495);
IkReal x1502=(sj2*x1493);
IkReal x1503=(cj5*sj6);
IkReal x1504=(cj7*sj5);
IkReal x1505=(sj5*sj7);
IkReal x1506=(cj5*cj6*sj7);
IkReal x1507=((1.0)*cj5*cj6*cj7);
IkReal x1508=((0.01822)*cj7);
IkReal x1509=((0.3549)*cj7);
IkReal x1510=((0.3549)*sj7);
IkReal x1511=((0.01822)*sj7);
IkReal x1512=((0.0136)*sj6);
IkReal x1513=((0.0136)*cj6*cj7);
IkReal x1514=((0.0136)*cj6*sj7);
evalcond[0]=(x1497+(((-1.0)*r12*x1498))+(((-1.0)*r10*x1500))+((r11*x1499)));
evalcond[1]=((((-1.0)*r00*x1500))+(((-1.0)*x1501))+(((-1.0)*x1502))+(((-1.0)*r02*x1498))+((r01*x1499)));
evalcond[2]=(((r11*x1506))+((r10*x1505))+((r11*x1504))+((r12*x1503))+x1501+x1502+(((-1.0)*r10*x1507)));
evalcond[3]=(((r00*x1505))+x1497+((r01*x1504))+(((-1.0)*r00*x1507))+((r01*x1506))+((r02*x1503)));
evalcond[4]=(((r02*x1512))+(((-1.0)*r00*x1513))+(((-1.0)*(1.0)*px))+(((-0.0159)*x1494))+(((0.03)*sj2))+(((0.0159)*x1496))+(((0.0104)*cj2))+(((-1.0)*r01*x1509))+((r01*x1514))+(((-1.0)*r00*x1508))+(((-0.0005)*x1501))+(((-1.0)*r00*x1510))+(((-0.0005)*x1502))+((r01*x1511)));
evalcond[5]=((((-1.0)*r11*x1509))+(((-1.0)*(1.0)*py))+((r12*x1512))+((r11*x1511))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1508))+(((0.0104)*sj2))+(((-0.0159)*x1501))+(((0.0005)*x1494))+(((-0.0159)*x1502))+((r11*x1514))+(((-1.0)*r10*x1513))+(((-0.0005)*x1496))+(((-1.0)*r10*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1515=((1.0)*sj6);
IkReal x1516=((1.0)*sj5);
IkReal x1517=(cj5*cj6);
IkReal x1518=(cj7*r20);
if( IKabs(((((-1.0)*cj5*r22*x1515))+((x1517*x1518))+(((-1.0)*cj7*r21*x1516))+(((-1.0)*r20*sj7*x1516))+(((-1.0)*r21*sj7*x1517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj6*x1518))+(((-1.0)*r21*sj7*x1515))+((cj6*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r22*x1515))+((x1517*x1518))+(((-1.0)*cj7*r21*x1516))+(((-1.0)*r20*sj7*x1516))+(((-1.0)*r21*sj7*x1517))))+IKsqr((((sj6*x1518))+(((-1.0)*r21*sj7*x1515))+((cj6*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj5*r22*x1515))+((x1517*x1518))+(((-1.0)*cj7*r21*x1516))+(((-1.0)*r20*sj7*x1516))+(((-1.0)*r21*sj7*x1517))), (((sj6*x1518))+(((-1.0)*r21*sj7*x1515))+((cj6*r22))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1519=IKcos(j4);
IkReal x1520=((1.0)*cj6);
IkReal x1521=(sj6*sj7);
IkReal x1522=((1.0)*cj7*sj6);
IkReal x1523=IKsin(j4);
IkReal x1524=(cj2*x1523);
IkReal x1525=(sj2*x1523);
IkReal x1526=(cj5*sj6);
IkReal x1527=(cj7*sj5);
IkReal x1528=(sj5*sj7);
IkReal x1529=(cj5*cj6*sj7);
IkReal x1530=((1.0)*cj5*cj6*cj7);
IkReal x1531=(cj2*x1519);
IkReal x1532=(sj2*x1519);
IkReal x1533=((0.01822)*cj7);
IkReal x1534=((0.3549)*cj7);
IkReal x1535=((0.3549)*sj7);
IkReal x1536=((0.01822)*sj7);
IkReal x1537=((0.0136)*sj6);
IkReal x1538=((0.0136)*cj6*cj7);
IkReal x1539=((0.0136)*cj6*sj7);
evalcond[0]=(x1519+(((-1.0)*r22*x1520))+((r21*x1521))+(((-1.0)*r20*x1522)));
evalcond[1]=((((-1.0)*r00*x1522))+((r01*x1521))+(((-1.0)*x1524))+(((-1.0)*r02*x1520)));
evalcond[2]=((((-1.0)*r12*x1520))+(((-1.0)*x1525))+((r11*x1521))+(((-1.0)*r10*x1522)));
evalcond[3]=((((-1.0)*r20*x1530))+((r21*x1527))+((r20*x1528))+((r22*x1526))+((r21*x1529))+x1523);
evalcond[4]=(((r00*x1528))+((r02*x1526))+((r01*x1527))+((r01*x1529))+(((-1.0)*r00*x1530))+x1531);
evalcond[5]=(((r11*x1529))+((r12*x1526))+((r11*x1527))+(((-1.0)*r10*x1530))+x1532+((r10*x1528)));
evalcond[6]=((((-1.0)*r21*x1534))+(((-1.0)*r20*x1535))+(((-1.0)*r20*x1533))+(((-1.0)*(1.0)*pz))+(((0.0005)*x1519))+(((-0.0159)*x1523))+((r21*x1539))+((r22*x1537))+((r21*x1536))+(((-1.0)*r20*x1538)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x1535))+(((0.0104)*cj2))+(((-1.0)*r00*x1538))+(((-1.0)*r01*x1534))+((r01*x1536))+(((-0.0005)*x1524))+(((-1.0)*r00*x1533))+(((0.3766)*sj2))+(((-0.0159)*x1531))+((r02*x1537))+((r01*x1539)));
evalcond[8]=((((-1.0)*r10*x1535))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1538))+(((0.0104)*sj2))+(((-0.0005)*x1525))+(((-1.0)*r10*x1533))+((r11*x1539))+(((-1.0)*r11*x1534))+((r12*x1537))+((r11*x1536))+(((-1.0)*(0.3766)*cj2))+(((-0.0159)*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1540=(r21*sj7);
IkReal x1541=(cj7*r20);
if( IKabs((((r20*sj5*sj7))+((cj7*r21*sj5))+(((-1.0)*cj5*cj6*x1541))+((cj5*cj6*x1540))+((cj5*r22*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r22))+(((-1.0)*sj6*x1541))+((sj6*x1540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj5*sj7))+((cj7*r21*sj5))+(((-1.0)*cj5*cj6*x1541))+((cj5*cj6*x1540))+((cj5*r22*sj6))))+IKsqr(((((-1.0)*cj6*r22))+(((-1.0)*sj6*x1541))+((sj6*x1540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r20*sj5*sj7))+((cj7*r21*sj5))+(((-1.0)*cj5*cj6*x1541))+((cj5*cj6*x1540))+((cj5*r22*sj6))), ((((-1.0)*cj6*r22))+(((-1.0)*sj6*x1541))+((sj6*x1540))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1542=((1.0)*cj6);
IkReal x1543=(sj6*sj7);
IkReal x1544=IKcos(j4);
IkReal x1545=((1.0)*cj7*sj6);
IkReal x1546=IKsin(j4);
IkReal x1547=((1.0)*x1546);
IkReal x1548=(cj5*sj6);
IkReal x1549=(cj7*sj5);
IkReal x1550=(sj5*sj7);
IkReal x1551=(cj5*cj6*sj7);
IkReal x1552=((1.0)*cj5*cj6*cj7);
IkReal x1553=(cj2*x1544);
IkReal x1554=(sj2*x1544);
IkReal x1555=((0.01822)*cj7);
IkReal x1556=((0.3549)*cj7);
IkReal x1557=((0.3549)*sj7);
IkReal x1558=((0.01822)*sj7);
IkReal x1559=((0.0136)*sj6);
IkReal x1560=((0.0136)*cj6*cj7);
IkReal x1561=((0.0136)*cj6*sj7);
IkReal x1562=((0.0005)*x1546);
evalcond[0]=((((-1.0)*x1544))+(((-1.0)*r20*x1545))+((r21*x1543))+(((-1.0)*r22*x1542)));
evalcond[1]=((((-1.0)*r00*x1545))+(((-1.0)*cj2*x1547))+((r01*x1543))+(((-1.0)*r02*x1542)));
evalcond[2]=((((-1.0)*r12*x1542))+((r11*x1543))+(((-1.0)*sj2*x1547))+(((-1.0)*r10*x1545)));
evalcond[3]=(((r21*x1549))+((r22*x1548))+((r20*x1550))+(((-1.0)*r20*x1552))+(((-1.0)*x1547))+((r21*x1551)));
evalcond[4]=(((r01*x1549))+(((-1.0)*r00*x1552))+x1553+((r02*x1548))+((r01*x1551))+((r00*x1550)));
evalcond[5]=(((r12*x1548))+((r10*x1550))+x1554+((r11*x1551))+((r11*x1549))+(((-1.0)*r10*x1552)));
evalcond[6]=((((-1.0)*r20*x1560))+((r21*x1558))+(((-1.0)*(1.0)*pz))+(((0.0159)*x1546))+(((-1.0)*r20*x1557))+(((-1.0)*r20*x1555))+(((-0.0005)*x1544))+((r22*x1559))+((r21*x1561))+(((-1.0)*r21*x1556)));
evalcond[7]=((((-1.0)*r00*x1557))+(((-1.0)*(1.0)*px))+(((-0.0159)*x1553))+((r02*x1559))+(((0.0104)*cj2))+(((-1.0)*(0.3166)*sj2))+(((-1.0)*r01*x1556))+((r01*x1561))+(((-1.0)*r00*x1560))+(((-1.0)*r00*x1555))+(((-1.0)*cj2*x1562))+((r01*x1558)));
evalcond[8]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x1560))+((r11*x1561))+(((-1.0)*sj2*x1562))+((r12*x1559))+(((-1.0)*r10*x1557))+(((0.0104)*sj2))+(((-1.0)*r11*x1556))+((r11*x1558))+(((0.3166)*cj2))+(((-0.0159)*x1554))+(((-1.0)*r10*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(cj3,-1);
if(!x1570.valid){
continue;
}
IkReal x1563=x1570.value;
IkReal x1564=((1.0)*cj3);
IkReal x1565=(sj6*sj7);
IkReal x1566=(cj6*r22);
IkReal x1567=(sj2*sj3);
IkReal x1568=(r20*((cj7*sj6)));
IkReal x1569=((1.0)*r21*x1565);
CheckValue<IkReal> x1571=IKPowWithIntegerCheck(cj2,-1);
if(!x1571.valid){
continue;
}
if( IKabs((x1563*(x1571.value)*((((cj3*r01*x1565))+(((-1.0)*x1567*x1569))+(((-1.0)*cj6*r02*x1564))+(((-1.0)*cj7*r00*sj6*x1564))+((x1566*x1567))+((x1567*x1568)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1563*(((((-1.0)*x1569))+x1566+x1568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1563*(x1571.value)*((((cj3*r01*x1565))+(((-1.0)*x1567*x1569))+(((-1.0)*cj6*r02*x1564))+(((-1.0)*cj7*r00*sj6*x1564))+((x1566*x1567))+((x1567*x1568))))))+IKsqr((x1563*(((((-1.0)*x1569))+x1566+x1568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x1563*(x1571.value)*((((cj3*r01*x1565))+(((-1.0)*x1567*x1569))+(((-1.0)*cj6*r02*x1564))+(((-1.0)*cj7*r00*sj6*x1564))+((x1566*x1567))+((x1567*x1568))))), (x1563*(((((-1.0)*x1569))+x1566+x1568))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1572=IKcos(j4);
IkReal x1573=(cj3*x1572);
IkReal x1574=((1.0)*cj6);
IkReal x1575=(sj6*sj7);
IkReal x1576=((1.0)*cj7*sj6);
IkReal x1577=IKsin(j4);
IkReal x1578=(cj2*x1577);
IkReal x1579=((1.0)*x1578);
IkReal x1580=(sj2*x1572);
IkReal x1581=(sj3*x1580);
IkReal x1582=(sj2*x1577);
IkReal x1583=(cj2*sj3*x1572);
IkReal x1584=(cj3*x1577);
IkReal x1585=(cj5*sj6);
IkReal x1586=(cj7*sj5);
IkReal x1587=(sj5*sj7);
IkReal x1588=(cj5*cj6*sj7);
IkReal x1589=((1.0)*cj5*cj6*cj7);
IkReal x1590=(cj2*x1572);
IkReal x1591=(sj3*x1582);
IkReal x1592=((0.01822)*cj7);
IkReal x1593=((0.3549)*cj7);
IkReal x1594=((0.3549)*sj7);
IkReal x1595=((0.01822)*sj7);
IkReal x1596=((0.0136)*sj6);
IkReal x1597=((0.0136)*cj6*cj7);
IkReal x1598=((0.0136)*cj6*sj7);
IkReal x1599=((0.3466)*cj3);
evalcond[0]=(((r21*x1575))+x1573+(((-1.0)*r22*x1574))+(((-1.0)*r20*x1576)));
evalcond[1]=((((-1.0)*r00*x1576))+x1581+(((-1.0)*r02*x1574))+((r01*x1575))+(((-1.0)*x1579)));
evalcond[2]=((((-1.0)*r12*x1574))+((r11*x1575))+(((-1.0)*r10*x1576))+(((-1.0)*x1582))+(((-1.0)*x1583)));
evalcond[3]=(x1584+((r22*x1585))+((r20*x1587))+(((-1.0)*r20*x1589))+((r21*x1586))+((r21*x1588)));
evalcond[4]=(((r02*x1585))+(((-1.0)*r00*x1589))+x1590+x1591+((r01*x1586))+((r01*x1588))+((r00*x1587)));
evalcond[5]=(x1580+(((-1.0)*sj3*x1579))+(((-1.0)*r10*x1589))+((r10*x1587))+((r11*x1588))+((r12*x1585))+((r11*x1586)));
evalcond[6]=(((r21*x1598))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.3466)*sj3))+(((-1.0)*r20*x1592))+(((0.0005)*x1573))+((r21*x1595))+(((-1.0)*r20*x1594))+(((-1.0)*r21*x1593))+((r22*x1596))+(((-1.0)*r20*x1597))+(((-0.0159)*x1584)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((0.03)*sj2))+((r01*x1595))+(((0.0104)*cj2))+((r02*x1596))+(((0.0005)*x1581))+(((-0.0005)*x1578))+(((-1.0)*r00*x1592))+(((-1.0)*r01*x1593))+(((-0.0159)*x1591))+((sj2*x1599))+(((-1.0)*r00*x1594))+(((-1.0)*r00*x1597))+(((-0.0159)*x1590))+((r01*x1598)));
evalcond[8]=(((r11*x1598))+(((-1.0)*r10*x1597))+(((-1.0)*cj2*x1599))+((r11*x1595))+(((-1.0)*r10*x1594))+(((-1.0)*r11*x1593))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1592))+(((-1.0)*(0.03)*cj2))+(((0.0104)*sj2))+(((-0.0159)*x1580))+(((-0.0005)*x1582))+(((-0.0005)*x1583))+(((0.0159)*sj3*x1578))+((r12*x1596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1600=((1.0)*cj2);
IkReal x1601=(cj6*r02);
IkReal x1602=(cj6*r12);
IkReal x1603=(cj2*sj6*sj7);
IkReal x1604=(sj2*sj6);
IkReal x1605=(cj7*r00);
IkReal x1606=((1.0)*cj2*sj6);
IkReal x1607=(cj7*r10);
IkReal x1608=((1.0)*sj2*sj6);
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(sj3,-1);
if(!x1609.valid){
continue;
}
if( IKabs((((r11*sj7*x1604))+(((-1.0)*x1600*x1601))+(((-1.0)*x1607*x1608))+(((-1.0)*x1605*x1606))+(((-1.0)*sj2*x1602))+((r01*x1603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1609.value)*(((((-1.0)*x1606*x1607))+((sj2*x1601))+(((-1.0)*r01*sj7*x1608))+((x1604*x1605))+(((-1.0)*x1600*x1602))+((r11*x1603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj7*x1604))+(((-1.0)*x1600*x1601))+(((-1.0)*x1607*x1608))+(((-1.0)*x1605*x1606))+(((-1.0)*sj2*x1602))+((r01*x1603))))+IKsqr(((x1609.value)*(((((-1.0)*x1606*x1607))+((sj2*x1601))+(((-1.0)*r01*sj7*x1608))+((x1604*x1605))+(((-1.0)*x1600*x1602))+((r11*x1603))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r11*sj7*x1604))+(((-1.0)*x1600*x1601))+(((-1.0)*x1607*x1608))+(((-1.0)*x1605*x1606))+(((-1.0)*sj2*x1602))+((r01*x1603))), ((x1609.value)*(((((-1.0)*x1606*x1607))+((sj2*x1601))+(((-1.0)*r01*sj7*x1608))+((x1604*x1605))+(((-1.0)*x1600*x1602))+((r11*x1603))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1610=IKcos(j4);
IkReal x1611=(cj3*x1610);
IkReal x1612=((1.0)*cj6);
IkReal x1613=(sj6*sj7);
IkReal x1614=((1.0)*cj7*sj6);
IkReal x1615=IKsin(j4);
IkReal x1616=(cj2*x1615);
IkReal x1617=((1.0)*x1616);
IkReal x1618=(sj2*x1610);
IkReal x1619=(sj3*x1618);
IkReal x1620=(sj2*x1615);
IkReal x1621=(cj2*sj3*x1610);
IkReal x1622=(cj3*x1615);
IkReal x1623=(cj5*sj6);
IkReal x1624=(cj7*sj5);
IkReal x1625=(sj5*sj7);
IkReal x1626=(cj5*cj6*sj7);
IkReal x1627=((1.0)*cj5*cj6*cj7);
IkReal x1628=(cj2*x1610);
IkReal x1629=(sj3*x1620);
IkReal x1630=((0.01822)*cj7);
IkReal x1631=((0.3549)*cj7);
IkReal x1632=((0.3549)*sj7);
IkReal x1633=((0.01822)*sj7);
IkReal x1634=((0.0136)*sj6);
IkReal x1635=((0.0136)*cj6*cj7);
IkReal x1636=((0.0136)*cj6*sj7);
IkReal x1637=((0.3466)*cj3);
evalcond[0]=((((-1.0)*r22*x1612))+((r21*x1613))+(((-1.0)*r20*x1614))+x1611);
evalcond[1]=(((r01*x1613))+(((-1.0)*r02*x1612))+(((-1.0)*r00*x1614))+x1619+(((-1.0)*x1617)));
evalcond[2]=((((-1.0)*r10*x1614))+(((-1.0)*r12*x1612))+(((-1.0)*x1621))+((r11*x1613))+(((-1.0)*x1620)));
evalcond[3]=(((r21*x1624))+(((-1.0)*r20*x1627))+((r20*x1625))+x1622+((r21*x1626))+((r22*x1623)));
evalcond[4]=(((r00*x1625))+((r01*x1624))+((r02*x1623))+(((-1.0)*r00*x1627))+x1629+x1628+((r01*x1626)));
evalcond[5]=(((r12*x1623))+((r11*x1624))+((r10*x1625))+(((-1.0)*sj3*x1617))+(((-1.0)*r10*x1627))+x1618+((r11*x1626)));
evalcond[6]=(((r22*x1634))+(((0.0005)*x1611))+((r21*x1633))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1635))+(((-1.0)*(0.3466)*sj3))+(((-1.0)*r20*x1630))+(((-1.0)*r20*x1632))+(((-0.0159)*x1622))+(((-1.0)*r21*x1631))+((r21*x1636)));
evalcond[7]=(((r01*x1633))+(((-1.0)*r01*x1631))+(((-1.0)*(1.0)*px))+(((0.03)*sj2))+(((-1.0)*r00*x1635))+(((0.0104)*cj2))+((r02*x1634))+(((0.0005)*x1619))+(((-1.0)*r00*x1630))+((r01*x1636))+((sj2*x1637))+(((-0.0005)*x1616))+(((-0.0159)*x1629))+(((-0.0159)*x1628))+(((-1.0)*r00*x1632)));
evalcond[8]=((((-1.0)*(1.0)*py))+((r12*x1634))+(((-0.0005)*x1621))+(((-0.0159)*x1618))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1630))+(((-0.0005)*x1620))+((r11*x1636))+(((0.0159)*sj3*x1616))+(((0.0104)*sj2))+((r11*x1633))+(((-1.0)*cj2*x1637))+(((-1.0)*r10*x1635))+(((-1.0)*r11*x1631))+(((-1.0)*r10*x1632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=((1.0)*sj6);
IkReal x1639=((1.0)*sj5);
IkReal x1640=(cj5*cj6);
IkReal x1641=(cj7*r20);
CheckValue<IkReal> x1642 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r22*x1638))+(((-1.0)*r20*sj7*x1639))+(((-1.0)*r21*sj7*x1640))+(((-1.0)*cj7*r21*x1639))+((x1640*x1641)))),IkReal(((((-1.0)*r21*sj7*x1638))+((cj6*r22))+((sj6*x1641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1642.valid){
continue;
}
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1642.value)+(((1.5707963267949)*(x1643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1644=IKcos(j4);
IkReal x1645=(cj3*x1644);
IkReal x1646=((1.0)*cj6);
IkReal x1647=(sj6*sj7);
IkReal x1648=((1.0)*cj7*sj6);
IkReal x1649=IKsin(j4);
IkReal x1650=(cj2*x1649);
IkReal x1651=((1.0)*x1650);
IkReal x1652=(sj2*x1644);
IkReal x1653=(sj3*x1652);
IkReal x1654=(sj2*x1649);
IkReal x1655=(cj2*sj3*x1644);
IkReal x1656=(cj3*x1649);
IkReal x1657=(cj5*sj6);
IkReal x1658=(cj7*sj5);
IkReal x1659=(sj5*sj7);
IkReal x1660=(cj5*cj6*sj7);
IkReal x1661=((1.0)*cj5*cj6*cj7);
IkReal x1662=(cj2*x1644);
IkReal x1663=(sj3*x1654);
IkReal x1664=((0.01822)*cj7);
IkReal x1665=((0.3549)*cj7);
IkReal x1666=((0.3549)*sj7);
IkReal x1667=((0.01822)*sj7);
IkReal x1668=((0.0136)*sj6);
IkReal x1669=((0.0136)*cj6*cj7);
IkReal x1670=((0.0136)*cj6*sj7);
IkReal x1671=((0.3466)*cj3);
evalcond[0]=((((-1.0)*r20*x1648))+(((-1.0)*r22*x1646))+x1645+((r21*x1647)));
evalcond[1]=((((-1.0)*r00*x1648))+(((-1.0)*r02*x1646))+x1653+((r01*x1647))+(((-1.0)*x1651)));
evalcond[2]=((((-1.0)*r10*x1648))+((r11*x1647))+(((-1.0)*r12*x1646))+(((-1.0)*x1654))+(((-1.0)*x1655)));
evalcond[3]=(((r21*x1660))+((r21*x1658))+((r22*x1657))+(((-1.0)*r20*x1661))+((r20*x1659))+x1656);
evalcond[4]=(((r00*x1659))+((r01*x1658))+((r02*x1657))+((r01*x1660))+(((-1.0)*r00*x1661))+x1663+x1662);
evalcond[5]=(((r11*x1658))+((r12*x1657))+((r11*x1660))+(((-1.0)*r10*x1661))+(((-1.0)*sj3*x1651))+((r10*x1659))+x1652);
evalcond[6]=((((0.0005)*x1645))+((r21*x1670))+(((-1.0)*r20*x1669))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1664))+((r22*x1668))+(((-1.0)*(0.3466)*sj3))+(((-0.0159)*x1656))+(((-1.0)*r21*x1665))+((r21*x1667))+(((-1.0)*r20*x1666)));
evalcond[7]=(((r01*x1667))+(((-1.0)*(1.0)*px))+(((0.03)*sj2))+(((-1.0)*r00*x1669))+(((0.0104)*cj2))+((r02*x1668))+(((-0.0005)*x1650))+(((-1.0)*r00*x1664))+((r01*x1670))+(((-0.0159)*x1663))+(((-1.0)*r01*x1665))+(((0.0005)*x1653))+(((-1.0)*r00*x1666))+((sj2*x1671))+(((-0.0159)*x1662)));
evalcond[8]=((((-1.0)*(1.0)*py))+(((-1.0)*r10*x1666))+(((-1.0)*(0.03)*cj2))+(((-1.0)*r10*x1664))+(((-1.0)*cj2*x1671))+(((0.0104)*sj2))+(((-1.0)*r11*x1665))+((r11*x1670))+(((0.0159)*sj3*x1650))+(((-0.0159)*x1652))+(((-1.0)*r10*x1669))+((r12*x1668))+((r11*x1667))+(((-0.0005)*x1654))+(((-0.0005)*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - bender (1f26fd0523f2f95fdf5a472af42f27c2)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
