/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-01-19 13:18:10.495769
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKsin(j[5]);
x1=IKsin(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[3]);
x4=(x1*x2*x3);
x5=IKsin(j[3]);
x6=IKcos(j[0]);
x7=IKcos(j[2]);
x8=(x6*x7);
x9=((1.0)*x8);
x10=IKsin(j[1]);
x11=IKsin(j[2]);
x12=(x1*x11);
x13=((1.0)*x12);
x14=((((-1.0)*(1.0)*x4))+((x5*(((((-1.0)*(1.0)*x9))+(((-1.0)*(1.0)*x10*x13)))))));
x15=IKcos(j[5]);
x16=IKsin(j[4]);
x17=(x11*x6);
x18=((1.0)*x17);
x19=(x1*x7);
x20=(x10*x19);
x21=(x20+(((-1.0)*(1.0)*x18)));
x22=(x16*x21);
x23=IKcos(j[4]);
x24=(x1*x2*x5);
x25=((1.0)*x24);
x26=(x10*x12);
x27=(x3*((x26+x8)));
x28=(x23*((x27+(((-1.0)*(1.0)*x25)))));
x29=((0.3466)*x2);
x30=(x10*x3);
x31=(x11*x2*x5);
x32=((((1.0)*x30))+(((-1.0)*(1.0)*x31)));
x33=(x16*x2*x7);
x34=((1.0)*x33);
x35=(x10*x5);
x36=(x11*x2*x3);
x37=((((-1.0)*(1.0)*x35))+(((-1.0)*(1.0)*x36)));
x38=(x23*x37);
x39=(x2*x7);
x40=(x23*x39);
x41=(x2*x6);
x42=(x3*x41);
x43=(x10*x18);
x44=(((x5*(((((-1.0)*(1.0)*x19))+x43))))+x42);
x45=((((-1.0)*(1.0)*x13))+(((-1.0)*(1.0)*x10*x9)));
x46=(x16*x45);
x47=(x41*x5);
x48=(x3*((x19+(((-1.0)*(1.0)*x43)))));
x49=(x23*((x48+x47)));
x50=(x10*x11*x6);
x51=(x10*x6*x7);
eerot[0]=(((x15*((x22+x28))))+((x0*x14)));
eerot[1]=(((x16*((x25+(((-1.0)*(1.0)*x27))))))+((x21*x23)));
eerot[2]=(((x14*x15))+((x0*(((((-1.0)*(1.0)*x22))+(((-1.0)*(1.0)*x28)))))));
eetrans[0]=(((x3*(((((-1.0)*(0.0136)*x8))+(((-1.0)*(0.0136)*x26))))))+(((0.0104)*x6))+((x23*(((((-1.0)*(0.0171)*x17))+(((0.0171)*x20))))))+(((0.0136)*x24))+((x16*(((((0.01822)*x17))+(((-1.0)*(0.01822)*x20))))))+(((0.03)*x1))+(((-1.0)*(0.0005)*x20))+(((-1.0)*(0.0159)*x26))+((x23*(((((-1.0)*(0.01822)*x27))+(((0.01822)*x24))))))+(((0.3549)*x4))+((x16*(((((0.0171)*x24))+(((-1.0)*(0.0171)*x27))))))+((x1*x29))+(((0.0005)*x17))+(((-1.0)*(0.0159)*x8))+((x5*(((((0.3549)*x8))+(((0.3549)*x26)))))));
eerot[3]=(((x15*((x34+(((-1.0)*(1.0)*x38))))))+((x0*x32)));
eerot[4]=(((x16*x37))+x40);
eerot[5]=(((x0*((x38+(((-1.0)*(1.0)*x34))))))+((x15*x32)));
eetrans[1]=((-0.0339)+((x23*(((((-1.0)*(0.01822)*x36))+(((-1.0)*(0.01822)*x35))))))+(((-1.0)*(0.3549)*x30))+(((0.0171)*x40))+(((-1.0)*(0.0136)*x35))+(((-1.0)*(0.01822)*x33))+(((-1.0)*(0.0136)*x36))+(((0.3549)*x31))+(((-1.0)*(0.0005)*x39))+(((-1.0)*(0.3466)*x10))+(((-1.0)*(0.0159)*x11*x2))+((x16*(((((-1.0)*(0.0171)*x36))+(((-1.0)*(0.0171)*x35)))))));
eerot[6]=(((x0*x44))+((x15*((x49+x46)))));
eerot[7]=(((x23*x45))+((x16*(((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x47)))))));
eerot[8]=(((x15*x44))+((x0*(((((-1.0)*(1.0)*x49))+(((-1.0)*(1.0)*x46)))))));
eetrans[2]=((((-1.0)*(0.0159)*x19))+(((0.0104)*x1))+(((0.0005)*x51))+(((0.0005)*x12))+((x3*(((((0.0136)*x50))+(((-1.0)*(0.0136)*x19))))))+((x16*(((((0.01822)*x51))+(((0.01822)*x12))))))+(((0.0159)*x50))+((x23*(((((-1.0)*(0.01822)*x47))+(((-1.0)*(0.01822)*x48))))))+((x16*(((((-1.0)*(0.0171)*x48))+(((-1.0)*(0.0171)*x47))))))+(((-1.0)*(0.0136)*x47))+((x23*(((((-1.0)*(0.0171)*x12))+(((-1.0)*(0.0171)*x51))))))+(((-1.0)*(0.3549)*x42))+(((-1.0)*(1.0)*x29*x6))+((x5*(((((0.3549)*x19))+(((-1.0)*(0.3549)*x50))))))+(((-1.0)*(0.03)*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r02;
new_r02=((-1.0)*(((1.0)*r01)));
new_px=((((-1.0)*(0.0171)*r01))+px);
new_r10=r20;
new_r11=r22;
new_r12=((-1.0)*(((1.0)*r21)));
new_py=(pz+(((-1.0)*(0.0171)*r21)));
new_r20=((-1.0)*(((1.0)*r10)));
new_r21=((-1.0)*(((1.0)*r12)));
new_r22=r11;
new_pz=((-0.0339)+(((-1.0)*(1.0)*py))+(((0.0171)*r11)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*py);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x54)));
rxp2_0=((((-1.0)*r22*x52))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x53))+((px*r22)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x55=((0.021294)*r01);
IkReal x56=((1.6280755914599e-5)*r21);
IkReal x57=((0.06)*px);
IkReal x58=((4.58742065781881e-5)*pz);
IkReal x59=((0.0019092)*r00);
IkReal x60=((3.0e-5)*r02);
IkReal x61=((-1.0)*x60);
IkReal x62=((0.000338639723023658)*r10);
IkReal x63=((3.03621188690133e-5)*r11);
IkReal x64=((1.45971725331795e-6)*r20);
IkReal x65=((0.0002656145186382)*r22);
IkReal x66=((0.0325615118291979)*rxp0_2);
IkReal x67=((0.00291943450663589)*rxp1_2);
IkReal x68=((0.000954183496826313)*rxp2_1);
IkReal x69=((-1.0)*x68);
IkReal x70=((0.0917484131563762)*npz*pz);
IkReal x71=((-1.0)*x70);
IkReal x72=(pp*r22);
IkReal x73=((0.0458742065781881)*x72);
IkReal x74=((0.001)*npz);
IkReal x75=((3.0e-5)*r12);
IkReal x76=((-1.0)*x75);
IkReal x77=((2.86255049047894e-5)*r22);
IkReal x78=((0.000954183496826313)*rxp2_0);
IkReal x79=((0.06364)*npx);
IkReal x80=((0.7098)*npy);
IkReal x81=((-1.0)*x80);
IkReal x82=((1.0)*pp);
IkReal x83=((-1.0)*x82);
IkReal x84=((0.06)*py);
IkReal x85=((0.000338639723023658)*r00);
IkReal x86=((-1.0)*x85);
IkReal x87=((3.03621188690133e-5)*r01);
IkReal x88=((0.0019092)*r10);
IkReal x89=((0.021294)*r11);
IkReal x90=((((3.25615118291979e-5)*r20))+(((0.042588)*r00)));
IkReal x91=((0.000677279446047317)*r11);
IkReal x92=((0.0651230236583958)*rxp1_2);
IkReal x93=((((-1.0)*(1.4196)*npx))+(((0.042588)*r10)));
IkReal x94=((0.000677279446047317)*r01);
IkReal x95=((-1.0)*x62);
IkReal x96=((-1.0)*x66);
IkReal x97=((-1.0)*x55);
IkReal x98=((-1.0)*x56);
IkReal x99=((((-1.0)*x89))+x83+x80+x84);
IkReal x100=((0.0217987421383648)*npz);
IkReal x101=((0.000653962264150943)*r12);
IkReal x102=((0.000624)*r22);
IkReal x103=((0.0208)*rxp2_0);
IkReal x104=((-1.0)*x103);
IkReal x105=((1.38727194968553)*npx);
IkReal x106=((15.4727471698113)*npy);
IkReal x107=((-1.0)*x106);
IkReal x108=((-1.0)*(((21.7987421383648)*pp)));
IkReal x109=((-1.0)*(((1.30792452830189)*py)));
IkReal x110=((0.00738192)*r00);
IkReal x111=((0.000661856)*r01);
IkReal x112=((0.041618158490566)*r10);
IkReal x113=((0.46418241509434)*r11);
IkReal x114=((-1.0)*x113);
IkReal x115=((0.041618158490566)*r00);
IkReal x116=((0.46418241509434)*r01);
IkReal x117=((0.00738192)*r10);
IkReal x118=((0.000661856)*r11);
IkReal x119=((3.182e-5)*r20);
IkReal x120=((0.0003549)*r21);
IkReal x121=((-1.0)*x120);
IkReal x122=((0.7098)*rxp0_2);
IkReal x123=((-1.0)*x122);
IkReal x124=((0.06364)*rxp1_2);
IkReal x125=((1.30792452830189)*px);
IkReal x126=((-1.0)*(((0.001)*pz)));
IkReal x127=((0.000653962264150943)*r02);
IkReal x128=((0.0208)*rxp2_1);
IkReal x129=((2.0)*npz);
IkReal x130=(pz*x129);
IkReal x131=((0.0136024150943396)+(((-1.0)*(0.0057900624)*r22))+x130+(((-1.0)*x128))+x125+x126+(((-1.0)*r22*x82))+(((-1.0)*x127)));
IkReal x132=((((-1.0)*(0.928364830188679)*r10))+(((-1.0)*(30.9454943396226)*npx)));
IkReal x133=((0.01476384)*r01);
IkReal x134=((((-1.0)*(0.0007098)*r20))+(((0.928364830188679)*r00)));
IkReal x135=((0.01476384)*r11);
IkReal x136=((1.4196)*rxp1_2);
IkReal x137=(x106+x109+x108+x113);
IkReal x138=((-1.0)*x110);
IkReal x139=((-1.0)*x116);
IkReal x140=((-1.0)*x117);
IkReal x141=((0.00738192)*r20);
IkReal x142=((0.000661856)*r21);
IkReal x143=((-1.0)*x142);
IkReal x144=((-1.0)*(((0.001)*py)));
IkReal x145=((3.182e-5)*r10);
IkReal x146=((-1.0)*x145);
IkReal x147=((0.0003549)*r11);
IkReal x148=((-1.0)*x147);
IkReal x149=((-1.0)*(((0.0075900624)*r12)));
IkReal x150=((0.7098)*rxp0_1);
IkReal x151=((-1.0)*x150);
IkReal x152=((0.06364)*rxp1_1);
IkReal x153=((0.0208)*rxp2_2);
IkReal x154=((-1.0)*x153);
IkReal x155=(py*x129);
IkReal x156=((-1.0)*r12*x82);
IkReal x157=((3.182e-5)*r00);
IkReal x158=((0.7098)*rxp0_0);
IkReal x159=((0.06364)*rxp1_0);
IkReal x160=((-1.0)*x159);
IkReal x161=((0.001)*px);
IkReal x162=((0.0003549)*r01);
IkReal x163=((0.0075900624)*r02);
IkReal x164=((0.021294)*r20);
IkReal x165=((0.0019092)*r21);
IkReal x166=((-1.0)*x165);
IkReal x167=((0.06)*rxp2_2);
IkReal x168=((-1.0)*x167);
IkReal x169=(pp*r02);
IkReal x170=(px*x129);
IkReal x171=((-1.0)*x170);
IkReal x172=((0.001323712)*r20);
IkReal x173=((0.01476384)*r21);
IkReal x174=((-1.0)*x173);
IkReal x175=((-1.0)*(((0.0007098)*r10)));
IkReal x176=((1.4196)*rxp1_1);
IkReal x177=((((0.12728)*rxp0_1))+x176+x175+(((6.364e-5)*r11)));
IkReal x178=((0.042588)*r21);
IkReal x179=((((-1.0)*(0.0038184)*r20))+(((-1.0)*x178)));
IkReal x180=((0.0007098)*r00);
IkReal x181=((6.364e-5)*r01);
IkReal x182=((0.12728)*rxp0_0);
IkReal x183=((1.4196)*rxp1_0);
IkReal x184=((-1.0)*x183);
IkReal x185=((-1.0)*x141);
IkReal x186=(x150+x156+x155+x149+x147+x145+x144+(((-1.0)*x152)));
IkReal x187=((-1.0)*x157);
IkReal x188=((-1.0)*x158);
IkReal x189=((-1.0)*x162);
IkReal x190=((-1.0)*x164);
IkReal x191=((-1.0)*x161);
IkReal x192=((-1.0)*x163);
IkReal x193=((-1.0)*r02*x82);
IkReal x194=((-1.0)*x180);
IkReal x195=((((0.0651230236583958)*rxp2_2))+(((0.000677279446047317)*r12))+(((0.00334331217541835)*pz))+(((1.24777841892672e-6)*r22))+(((0.001632)*r02)));
IkReal x196=((6.0e-5)*r00);
IkReal x197=((0.000424844843854587)*r20);
IkReal x198=((0.00118654149105597)*r21);
IkReal x199=((0.00190836699365263)*rxp0_1);
IkReal x200=((0.183496826312752)*npx*pz);
IkReal x201=((0.0917484131563762)*pp*r20);
IkReal x202=((-3.644e-5)+(((0.001632)*r12))+(((-1.0)*(0.000677279446047317)*r02))+(((-1.0)*(0.0544)*npz)));
IkReal x203=((0.002)*npx);
IkReal x204=((6.0e-5)*r10);
IkReal x205=((5.72510098095788e-5)*r20);
IkReal x206=((0.00190836699365263)*rxp0_0);
IkReal x207=((-0.000794346163522013)+(((0.01476384)*r02))+(((-1.0)*(0.0355755471698113)*r12))+(((-1.0)*(1.18585157232704)*npz)));
IkReal x208=((0.0435974842767296)*npx);
IkReal x209=((0.00130792452830189)*r10);
IkReal x210=((0.001248)*r20);
IkReal x211=((0.0416)*rxp0_0);
IkReal x212=((((0.01476384)*r12))+(((-1.0)*(2.72e-5)*r22))+(((-1.0)*(1.4196)*rxp2_2))+(((-1.0)*(0.07288)*pz))+(((0.0355755471698113)*r02)));
IkReal x213=((0.00130792452830189)*r00);
IkReal x214=((0.0092610832)*r20);
IkReal x215=((0.025865112)*r21);
IkReal x216=((0.0416)*rxp0_1);
IkReal x217=((4.0)*npx);
IkReal x218=(pz*x217);
IkReal x219=((2.0)*pp);
IkReal x220=(r20*x219);
IkReal x221=((8.0)*npy);
IkReal x222=((4.0)*pp);
IkReal x223=((0.01476384)*r22);
IkReal x224=((0.0416)*rxp0_2);
IkReal x225=((-1.0)*(((0.07288)*py)));
IkReal x226=((0.0128610832)*r10);
IkReal x227=((0.025865112)*r11);
IkReal x228=((-1.0)*(((2.72e-5)*r12)));
IkReal x229=((-1.0)*(((1.4196)*rxp2_1)));
IkReal x230=(py*x217);
IkReal x231=(r10*x219);
IkReal x232=((((-1.0)*x230))+(((-1.0)*x227))+x226+x225+x229+x228+x231);
IkReal x233=((0.07288)*px);
IkReal x234=((2.72e-5)*r02);
IkReal x235=((0.12)*rxp0_2);
IkReal x236=((1.4196)*rxp2_0);
IkReal x237=((0.0128610832)*r00);
IkReal x238=((0.025865112)*r01);
IkReal x239=((0.042588)*r22);
IkReal x240=(px*x217);
IkReal x241=(r00*x219);
IkReal x242=((((-1.0)*x237))+x240+x238+x239+(((-1.0)*x241)));
IkReal x243=((0.0832)*rxp1_2);
IkReal x244=((((-1.0)*r11*x222))+((py*x221))+(((-1.0)*(0.0257221664)*r11))+(((-1.0)*(0.051730224)*r10)));
IkReal x245=((0.051730224)*r00);
IkReal x246=((0.0257221664)*r01);
IkReal x247=((-1.0)*(((0.24)*rxp1_2)));
IkReal x248=(px*x221);
IkReal x249=(r01*x222);
IkReal x250=((-1.0)*x224);
IkReal x251=((((-1.0)*x231))+(((-1.0)*x226))+x227+x225+x229+x228+x230);
IkReal x252=((-1.0)*x238);
IkReal x253=((-1.0)*x235);
IkReal x254=((-1.0)*x240);
IkReal x255=((-1.0)*x233);
IkReal x256=((-1.0)*x234);
IkReal x257=((-1.0)*x236);
IkReal x258=((-1.0)*x223);
IkReal x259=((0.0002772)*r00);
IkReal x260=((4.40832775533757e-6)*r11);
IkReal x261=((2.11938834391229e-7)*r20);
IkReal x262=((0.000423877668782458)*rxp1_2);
IkReal x263=((-0.000624)+(((-1.0)*(0.00022014547305251)*r22))+x68+x60+(((-1.0)*x73))+x70+x58+x57);
IkReal x264=((-1.0)*x74);
IkReal x265=((-1.0)*x77);
IkReal x266=((-1.0)*x78);
IkReal x267=((0.00924)*npx);
IkReal x268=((4.40832775533757e-6)*r01);
IkReal x269=((0.0002772)*r10);
IkReal x270=((-1.0)*x100);
IkReal x271=((-1.0)*x101);
IkReal x272=((-1.0)*x102);
IkReal x273=((0.201420377358491)*npx);
IkReal x274=((9.6096e-5)*r01);
IkReal x275=((0.00604261132075472)*r10);
IkReal x276=((0.00604261132075472)*r00);
IkReal x277=((9.6096e-5)*r11);
IkReal x278=((4.62e-6)*r20);
IkReal x279=((0.0047988944)*r22);
IkReal x280=((0.00924)*rxp1_2);
IkReal x281=((-1.0)*x130);
IkReal x282=((9.6096e-5)*r21);
IkReal x283=((4.62e-6)*r10);
IkReal x284=((-1.0)*x283);
IkReal x285=((0.0065988944)*r12);
IkReal x286=((0.00924)*rxp1_1);
IkReal x287=((-1.0)*x286);
IkReal x288=(pp*r12);
IkReal x289=((-1.0)*x155);
IkReal x290=((0.0065988944)*r02);
IkReal x291=((((-1.0)*x290))+x170+x161+x167+x193);
IkReal x292=((4.62e-6)*r00);
IkReal x293=((0.0002772)*r21);
IkReal x294=((0.00924)*rxp1_0);
IkReal x295=((0.000192192)*r20);
IkReal x296=((((9.24e-6)*r11))+(((-1.0)*x176))+(((-1.0)*(0.01848)*rxp0_1))+x175);
IkReal x297=((((0.0005544)*r20))+x178);
IkReal x298=((9.24e-6)*r01);
IkReal x299=((0.01848)*rxp0_0);
IkReal x300=((-1.0)*x282);
IkReal x301=(x151+x147+x144+x288+x289+x285+x286+x283);
IkReal x302=((-1.0)*x292);
IkReal x303=((-1.0)*x293);
IkReal x304=((-1.0)*x294);
op[0]=((-0.000624)+x69+x66+x61+x64+x65+x62+(((-1.0)*x63))+x71+x73+x59+x58+x55+x57+x56+(((-1.0)*x67)));
op[1]=((-0.0073742424)+x81+x86+x83+x87+x84+x89+x88+x74+x77+x76+x78+(((-1.0)*x79)));
op[2]=((((-1.0)*(0.00583886901327178)*rxp0_2))+(((-1.0)*(0.0038184)*r01))+x90+(((-1.0)*(6.07242377380265e-5)*r10))+(((-1.0)*x91))+(((-1.0)*x92))+(((-1.0)*(2.91943450663589e-6)*r21)));
op[3]=((((-1.0)*(0.0038184)*r11))+x93+x94+(((6.07242377380265e-5)*r00))+(((0.12728)*npy)));
op[4]=((-0.000624)+x69+x67+x61+x65+x63+x98+x95+x96+x97+(((-1.0)*x64))+(((-1.0)*x59))+x71+x73+x58+x57);
op[5]=((-0.0073742424)+x99+x85+(((-1.0)*x88))+(((-1.0)*x87))+x74+x77+x76+x79+x78);
op[6]=((-0.160749208543396)+(((-1.0)*x112))+x102+x104+x100+x101+x107+x109+x108+(((-1.0)*x111))+(((-1.0)*x105))+x114+x110);
op[7]=(x131+x124+x121+x123+(((-1.0)*x118))+(((-1.0)*x119))+x115+x117+x116);
op[8]=(x132+(((2.77454389937107)*npy))+(((0.0832363169811321)*r11))+(((-1.0)*(0.001323712)*r00))+(((-1.0)*x133)));
op[9]=(x136+x134+(((6.364e-5)*r21))+(((-1.0)*(0.0832363169811321)*r01))+(((-1.0)*(0.001323712)*r10))+(((-1.0)*x135))+(((0.12728)*rxp0_2)));
op[10]=((-0.160749208543396)+x138+x137+x102+x105+x104+x100+x101+x112+x111);
op[11]=(x139+x131+x120+x122+x140+(((-1.0)*x124))+(((-1.0)*x115))+x119+x118);
op[12]=(x156+x155+x152+x151+x154+x149+x148+x141+x146+x143+x144);
op[13]=(x158+x157+x171+x160+x161+x163+x164+x166+x169+x168+x162);
op[14]=((((-1.0)*x172))+x177+x174);
op[15]=(x179+(((-1.0)*x182))+(((-1.0)*x181))+x184+x180);
op[16]=(x154+x142+x185+x186);
op[17]=(x159+x171+x161+x163+x165+x169+x168+x190+x188+x189+x187);
op[18]=(x159+x170+x164+x166+x168+x192+x191+x193+x188+x189+x187);
op[19]=(x156+x155+x152+x151+x153+x149+x148+x142+x146+x144+x185);
op[20]=(x179+x194+x183+x181+x182);
op[21]=(x173+x172+x177);
op[22]=(x158+x157+x170+x160+x165+x168+x162+x192+x191+x193+x190);
op[23]=(x153+x141+x143+x186);
op[24]=((((-1.0)*x197))+(((-1.0)*x201))+x200+x195+x196+x199+x198);
op[25]=((((-1.0)*x205))+(((-1.0)*x206))+x204+x202+(((-1.0)*x203)));
op[26]=((((-1.0)*(0.366993652625505)*npy*pz))+(((-1.0)*(0.00012)*r01))+(((-1.0)*(0.00381673398730525)*rxp1_1))+(((0.183496826312752)*pp*r21))+(((0.000849689687709175)*r21))+(((0.00237308298211194)*r20)));
op[27]=((((0.004)*npy))+(((-1.0)*(0.00012)*r11))+(((0.00381673398730525)*rxp1_0))+(((0.000114502019619158)*r21)));
op[28]=((((-1.0)*x200))+(((-1.0)*x198))+(((-1.0)*x196))+x201+x195+x197+(((-1.0)*x199)));
op[29]=(x203+x206+x205+x202+(((-1.0)*x204)));
op[30]=((((-1.0)*x208))+(((-1.0)*x209))+x211+(((-1.0)*x210))+x207);
op[31]=((((-1.0)*x215))+(((-1.0)*x218))+x213+x214+x212+x216+x220);
op[32]=((((0.002496)*r21))+(((0.0871949685534591)*npy))+(((0.00261584905660377)*r11))+(((-1.0)*(0.0832)*rxp1_0)));
op[33]=((((-1.0)*(0.051730224)*r20))+(((-1.0)*(0.0185221664)*r21))+(((-1.0)*r21*x222))+(((-1.0)*(0.00261584905660377)*r01))+((pz*x221))+(((-1.0)*(0.0832)*rxp1_1)));
op[34]=(x210+x209+x208+x207+(((-1.0)*x211)));
op[35]=((((-1.0)*x214))+(((-1.0)*x216))+(((-1.0)*x220))+(((-1.0)*x213))+x212+x218+x215);
op[36]=(x224+x223+x232);
op[37]=(x242+x236+x234+x235+x233);
op[38]=(x244+(((-1.0)*x243)));
op[39]=((((-1.0)*x248))+x249+x246+x245+x247);
op[40]=(x250+x251+x223);
op[41]=(x241+x254+x252+x253+x236+x237+x234+x239+x233);
op[42]=(x241+x256+x257+x254+x255+x252+x237+x235+x239);
op[43]=(x250+x258+x232);
op[44]=(x248+x247+(((-1.0)*x249))+(((-1.0)*x245))+(((-1.0)*x246)));
op[45]=(x244+x243);
op[46]=(x242+x256+x257+x255+x253);
op[47]=(x251+x258+x224);
op[48]=(x262+x260+x263+x261+x95+x96+x259+x55+x56);
op[49]=((-0.0063830744)+x269+x265+x264+x266+x81+x83+x85+x84+x89+(((-1.0)*x268))+x75+(((-1.0)*x267)));
op[50]=(x91+x92+x90+(((0.000847755337564916)*rxp0_2))+(((8.81665551067513e-6)*r10))+(((-1.0)*(0.0005544)*r01))+(((-1.0)*(4.23877668782458e-7)*r21)));
op[51]=((((-1.0)*x94))+(((0.01848)*npy))+x93+(((-1.0)*(0.0005544)*r11))+(((-1.0)*(8.81665551067513e-6)*r00)));
op[52]=((((-1.0)*x259))+(((-1.0)*x261))+x263+(((-1.0)*x260))+x66+x62+x98+x97+(((-1.0)*x262)));
op[53]=((-0.0063830744)+x268+x265+x264+x267+x266+x99+(((-1.0)*x269))+x86+x75);
op[54]=((-0.139142992895597)+x138+x103+x107+x109+x108+(((-1.0)*x275))+(((-1.0)*x273))+x272+x274+x270+x271+x114);
op[55]=((0.0136024150943396)+x128+x125+x126+x127+x121+x122+x140+(((-1.0)*x280))+x279+x276+x277+x72+x281+(((-1.0)*x278))+x116);
op[56]=(x133+x132+(((0.000192192)*r00))+(((0.402840754716981)*npy))+(((0.0120852226415094)*r11)));
op[57]=(x135+x134+(((9.24e-6)*r21))+(((0.000192192)*r10))+(((-1.0)*(0.01848)*rxp0_2))+(((-1.0)*x136))+(((-1.0)*(0.0120852226415094)*r01)));
op[58]=((-0.139142992895597)+x137+x103+(((-1.0)*x274))+x272+x273+x275+x270+x271+x110);
op[59]=((0.0136024150943396)+x139+(((-1.0)*x277))+x128+x125+x126+x127+x120+x123+(((-1.0)*x276))+x279+x278+x72+x281+x280+x117);
op[60]=(x150+x153+x148+x144+x288+x287+x289+x285+x284+x282+x185);
op[61]=(x291+x292+x293+x294+x162+x190+x188);
op[62]=(x295+x296+x173);
op[63]=(x297+x299+(((-1.0)*x298))+x183+x180);
op[64]=(x301+x300+x153+x141);
op[65]=(x291+x303+x302+x304+x158+x164+x189);
op[66]=(x290+x293+x302+x304+x158+x171+x167+x169+x191+x190+x189);
op[67]=(x300+x150+x154+x148+x141+x144+x288+x287+x289+x285+x284);
op[68]=(x297+x298+(((-1.0)*x299))+x194+x184);
op[69]=(x296+(((-1.0)*x295))+x174);
op[70]=(x292+x290+x294+x303+x171+x164+x167+x169+x162+x191+x188);
op[71]=(x301+x154+x282+x185);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j16array[16], cj16array[16], sj16array[16], j17array[16], cj17array[16], sj17array[16], j12array[16], cj12array[16], sj12array[16];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ij16 += 3)
{
IkReal htj16 = zeror[ij16+0], htj17 = zeror[ij16+1], htj12 = zeror[ij16+2];
if(isnan(htj16)||isnan(htj17)||isnan(htj12)){
continue;
}
j16array[numsolutions]=((2.0)*(atan(htj16)));
j17array[numsolutions]=((2.0)*(atan(htj17)));
j12array[numsolutions]=((2.0)*(atan(htj12)));
if(isinf(htj16)){
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
}
else{
IkReal x305=htj16*htj16;
CheckValue<IkReal> x306=IKPowWithIntegerCheck(((1.0)+x305),-1);
if(!x306.valid){
continue;
}
cj16array[numsolutions]=((x306.value)*(((1.0)+(((-1.0)*x305)))));
CheckValue<IkReal> x307=IKPowWithIntegerCheck(((1.0)+(htj16*htj16)),-1);
if(!x307.valid){
continue;
}
sj16array[numsolutions]=((2.0)*htj16*(x307.value));
}
if(isinf(htj17)){
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
}
else{
IkReal x308=htj17*htj17;
CheckValue<IkReal> x309=IKPowWithIntegerCheck(((1.0)+x308),-1);
if(!x309.valid){
continue;
}
cj17array[numsolutions]=((x309.value)*(((1.0)+(((-1.0)*x308)))));
CheckValue<IkReal> x310=IKPowWithIntegerCheck(((1.0)+(htj17*htj17)),-1);
if(!x310.valid){
continue;
}
sj17array[numsolutions]=((2.0)*htj17*(x310.value));
}
if(isinf(htj12)){
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
}
else{
IkReal x311=htj12*htj12;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((1.0)+x311),-1);
if(!x312.valid){
continue;
}
cj12array[numsolutions]=((x312.value)*(((1.0)+(((-1.0)*x311)))));
CheckValue<IkReal> x313=IKPowWithIntegerCheck(((1.0)+(htj12*htj12)),-1);
if(!x313.valid){
continue;
}
sj12array[numsolutions]=((2.0)*htj12*(x313.value));
}
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j16valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj16 = 16;
_nj17 = 1;
_nj12 = 1;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
_ij17[0] = 0; _ij17[1] = -1;
_ij12[0] = 0; _ij12[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( !j16valid[iij16] ) { continue; }
if( IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(cj17array[ij16]-cj17array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij16]-sj17array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(cj12array[ij16]-cj12array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij16]-sj12array[iij16]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j16valid[iij16]=false; _ij16[1] = iij16; _ij17[1] = 0; _ij12[1] = 0;  break; 
}
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

    j17 = j17array[ij16]; cj17 = cj17array[ij16]; sj17 = sj17array[ij16];

    j12 = j12array[ij16]; cj12 = cj12array[ij16]; sj12 = sj12array[ij16];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j15eval[1];
IkReal x314=((4.0)*cj12);
IkReal x315=(cj17*r01*x314);
IkReal x316=(r00*sj17*x314);
IkReal x317=((4.0)*sj12);
IkReal x318=(cj17*r11*x317);
IkReal x319=(r10*sj17*x317);
IkReal x320=(cj12*r02*sj16);
IkReal x321=(r12*sj12*sj16);
IkReal x322=(cj12*cj16*cj17*r00);
IkReal x323=(cj12*cj16*r01*sj17);
IkReal x324=(cj16*cj17*r10*sj12);
IkReal x325=(cj16*r11*sj12*sj17);
j15eval[0]=((IKabs(((((8.0)*x325))+(((8.0)*x323))+(((-8.0)*x322))+(((-8.0)*x324))+(((-8.0)*x321))+(((-8.0)*x320)))))+(((0.5)*(IKabs(((((-1.0)*x315))+(((-1.0)*x318))+(((-1.0)*x319))+(((-1.0)*x316)))))))+(((0.5)*(IKabs(((((16.0)*x323))+(((-16.0)*x322))+(((-16.0)*x320))+(((-16.0)*x321))+(((16.0)*x325))+(((-16.0)*x324)))))))+(IKabs((x315+x316+x319+x318))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14, j15]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x326=((4.0)*cj12);
IkReal x327=(cj17*r01*x326);
IkReal x328=(r00*sj17*x326);
IkReal x329=((4.0)*sj12);
IkReal x330=(cj17*r11*x329);
IkReal x331=(r10*sj17*x329);
IkReal x332=(x331+x330+x328+x327);
IkReal x333=(cj12*r02*sj16);
IkReal x334=(r12*sj12*sj16);
IkReal x335=(cj12*cj16*cj17*r00);
IkReal x336=(cj12*cj16*r01*sj17);
IkReal x337=(cj16*cj17*r10*sj12);
IkReal x338=(cj16*r11*sj12*sj17);
IkReal x339=((((-8.0)*x333))+(((-8.0)*x337))+(((-8.0)*x334))+(((-8.0)*x335))+(((8.0)*x336))+(((8.0)*x338)));
IkReal x340=((((-1.0)*x328))+(((-1.0)*x327))+(((-1.0)*x330))+(((-1.0)*x331)));
op[0]=x332;
op[1]=x339;
op[2]=x332;
op[3]=((((-16.0)*x335))+(((-16.0)*x334))+(((-16.0)*x337))+(((-16.0)*x333))+(((16.0)*x336))+(((16.0)*x338)));
op[4]=x340;
op[5]=x339;
op[6]=x340;
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j13eval[1];
j13eval[0]=cj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
j13eval[0]=sj12;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x341=((1.0)*cj17);
IkReal x342=(cj15*cj16);
if( IKabs(((((-1.0)*r00*sj16*x341))+((sj16*((r01*sj17))))+((cj16*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj17*x342))+((cj17*r00*x342))+((cj15*r02*sj16))+(((-1.0)*r01*sj15*x341))+(((-1.0)*(1.0)*r00*sj15*sj17)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj16*x341))+((sj16*((r01*sj17))))+((cj16*r02))))+IKsqr(((((-1.0)*r01*sj17*x342))+((cj17*r00*x342))+((cj15*r02*sj16))+(((-1.0)*r01*sj15*x341))+(((-1.0)*(1.0)*r00*sj15*sj17))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*r00*sj16*x341))+((sj16*((r01*sj17))))+((cj16*r02))), ((((-1.0)*r01*sj17*x342))+((cj17*r00*x342))+((cj15*r02*sj16))+(((-1.0)*r01*sj15*x341))+(((-1.0)*(1.0)*r00*sj15*sj17))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x343=IKsin(j14);
IkReal x344=((1.0)*r02);
IkReal x345=(cj17*r00);
IkReal x346=(r01*sj17);
IkReal x347=IKcos(j14);
IkReal x348=(cj17*r01);
IkReal x349=(r00*sj17);
IkReal x350=(cj15*cj16);
IkReal x351=((0.0136)*cj16);
evalcond[0]=((((-1.0)*sj16*x346))+((sj16*x345))+(((-1.0)*cj16*x344))+x343);
evalcond[1]=(((sj15*x349))+((sj15*x348))+(((-1.0)*cj17*r00*x350))+(((-1.0)*cj15*sj16*x344))+((x346*x350))+x347);
evalcond[2]=((0.0104)+(((-1.0)*(1.0)*px))+(((0.01822)*x346))+(((-0.0159)*x347))+(((-0.3549)*x348))+(((-0.01822)*x345))+(((-0.3549)*x349))+(((0.0005)*x343))+(((-1.0)*x345*x351))+((x346*x351))+(((-1.0)*(0.0136)*r02*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x352=(sj16*sj17);
IkReal x353=((1.0)*cj17*sj16);
j13eval[0]=cj14;
j13eval[1]=IKsign(cj14);
j13eval[2]=((IKabs((((r11*x352))+((cj16*r12))+(((-1.0)*r10*x353)))))+(IKabs((((r21*x352))+((cj16*r22))+(((-1.0)*r20*x353))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=0;
cj12=1.0;
j12=0;
j13eval[0]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj12=0;
cj12=1.0;
j12=0;
j13eval[0]=sj14;
j13eval[1]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x354=(sj16*sj17);
IkReal x355=((1.0)*cj17*sj16);
if( IKabs((((r11*x354))+((cj16*r12))+(((-1.0)*r10*x355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj16*r22))+((r21*x354))+(((-1.0)*r20*x355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x354))+((cj16*r12))+(((-1.0)*r10*x355))))+IKsqr((((cj16*r22))+((r21*x354))+(((-1.0)*r20*x355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r11*x354))+((cj16*r12))+(((-1.0)*r10*x355))), (((cj16*r22))+((r21*x354))+(((-1.0)*r20*x355))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x356=IKcos(j13);
IkReal x357=((1.0)*cj16);
IkReal x358=(cj17*sj16);
IkReal x359=((1.0)*sj16*sj17);
IkReal x360=IKsin(j13);
IkReal x361=((1.0)*cj15*cj17);
IkReal x362=((1.0)*cj15*sj17);
IkReal x363=((1.0)*sj15*sj16);
IkReal x364=(cj16*sj15*sj17);
IkReal x365=((1.0)*cj16*cj17*sj15);
IkReal x366=((0.01822)*cj17);
IkReal x367=((0.3549)*cj17);
IkReal x368=((0.3549)*sj17);
IkReal x369=((0.01822)*sj17);
IkReal x370=((0.0136)*sj16);
IkReal x371=((0.0136)*cj16*cj17);
IkReal x372=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r22*x357))+x356+(((-1.0)*r21*x359))+((r20*x358)));
evalcond[1]=(x360+((r10*x358))+(((-1.0)*r11*x359))+(((-1.0)*r12*x357)));
evalcond[2]=(x356+(((-1.0)*r11*x361))+(((-1.0)*r10*x365))+(((-1.0)*r10*x362))+((r11*x364))+(((-1.0)*r12*x363)));
evalcond[3]=((((-1.0)*x360))+(((-1.0)*r22*x363))+(((-1.0)*r20*x362))+(((-1.0)*r21*x361))+(((-1.0)*r20*x365))+((r21*x364)));
evalcond[4]=((((-1.0)*r20*x371))+((r21*x372))+(((-1.0)*(1.0)*pz))+((r21*x369))+(((0.0005)*x356))+(((-1.0)*r21*x367))+(((-1.0)*r20*x368))+(((-1.0)*r20*x366))+(((-1.0)*r22*x370))+(((0.3466)*x360)));
evalcond[5]=((-0.03)+(((-0.3466)*x356))+(((-1.0)*(1.0)*py))+((r11*x369))+(((-1.0)*r11*x367))+(((-1.0)*r12*x370))+(((-1.0)*r10*x368))+(((0.0005)*x360))+(((-1.0)*r10*x366))+((r11*x372))+(((-1.0)*r10*x371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x373=((1.0)*cj16);
IkReal x374=(cj17*sj16);
IkReal x375=((1.0)*sj16*sj17);
if( IKabs((((r10*x374))+(((-1.0)*r11*x375))+(((-1.0)*r12*x373)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x373))+(((-1.0)*r21*x375))+((r20*x374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x374))+(((-1.0)*r11*x375))+(((-1.0)*r12*x373))))+IKsqr(((((-1.0)*r22*x373))+(((-1.0)*r21*x375))+((r20*x374))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r10*x374))+(((-1.0)*r11*x375))+(((-1.0)*r12*x373))), ((((-1.0)*r22*x373))+(((-1.0)*r21*x375))+((r20*x374))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x376=((1.0)*cj16);
IkReal x377=(cj17*sj16);
IkReal x378=IKcos(j13);
IkReal x379=((1.0)*sj16*sj17);
IkReal x380=IKsin(j13);
IkReal x381=((-1.0)*x380);
IkReal x382=((1.0)*cj15*cj17);
IkReal x383=((1.0)*cj15*sj17);
IkReal x384=((1.0)*sj15*sj16);
IkReal x385=(cj16*sj15*sj17);
IkReal x386=((1.0)*cj16*cj17*sj15);
IkReal x387=((0.01822)*cj17);
IkReal x388=((0.3549)*cj17);
IkReal x389=((0.3549)*sj17);
IkReal x390=((0.01822)*sj17);
IkReal x391=((0.0136)*sj16);
IkReal x392=((0.0136)*cj16*cj17);
IkReal x393=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*x378))+((r20*x377))+(((-1.0)*r22*x376))+(((-1.0)*r21*x379)));
evalcond[1]=((((-1.0)*r12*x376))+(((-1.0)*r11*x379))+x381+((r10*x377)));
evalcond[2]=((((-1.0)*r11*x382))+((r11*x385))+(((-1.0)*r12*x384))+(((-1.0)*r10*x383))+(((-1.0)*r10*x386))+x378);
evalcond[3]=(((r21*x385))+(((-1.0)*r20*x383))+(((-1.0)*r21*x382))+x381+(((-1.0)*r22*x384))+(((-1.0)*r20*x386)));
evalcond[4]=((((-1.0)*(1.0)*pz))+((r21*x393))+(((-1.0)*r20*x392))+(((-1.0)*r21*x388))+((r21*x390))+(((-1.0)*r20*x387))+(((0.3466)*x380))+(((-1.0)*r22*x391))+(((-1.0)*r20*x389))+(((-0.0005)*x378)));
evalcond[5]=((-0.03)+(((-1.0)*r10*x389))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x392))+(((-1.0)*r11*x388))+(((-1.0)*r12*x391))+((r11*x390))+((r11*x393))+(((-0.3466)*x378))+(((-0.0005)*x380))+(((-1.0)*r10*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x394=(cj17*r11);
IkReal x395=(r10*sj17);
IkReal x396=((1.0)*cj15);
IkReal x397=(r12*sj16);
IkReal x398=(cj16*r11*sj17);
IkReal x399=(cj16*cj17*r10);
if( IKabs(((((-1.0)*x396*x397))+((sj15*x394))+((cj15*x398))+((sj15*x395))+(((-1.0)*x396*x399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*x395))+((sj15*x397))+(((-1.0)*sj15*x398))+((sj15*x399))+((cj15*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x396*x397))+((sj15*x394))+((cj15*x398))+((sj15*x395))+(((-1.0)*x396*x399))))+IKsqr((((cj15*x395))+((sj15*x397))+(((-1.0)*sj15*x398))+((sj15*x399))+((cj15*x394))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x396*x397))+((sj15*x394))+((cj15*x398))+((sj15*x395))+(((-1.0)*x396*x399))), (((cj15*x395))+((sj15*x397))+(((-1.0)*sj15*x398))+((sj15*x399))+((cj15*x394))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x400=(cj17*sj15);
IkReal x401=(sj15*sj17);
IkReal x402=IKcos(j13);
IkReal x403=((1.0)*cj15*sj16);
IkReal x404=(cj15*cj16*sj17);
IkReal x405=((1.0)*cj15*cj16*cj17);
IkReal x406=((1.0)*cj15*cj17);
IkReal x407=((1.0)*cj15*sj17);
IkReal x408=((1.0)*sj15*sj16);
IkReal x409=(cj16*sj15*sj17);
IkReal x410=((1.0)*cj16*cj17*sj15);
IkReal x411=IKsin(j13);
IkReal x412=((-1.0)*x411);
IkReal x413=((0.01822)*cj17);
IkReal x414=((0.3549)*cj17);
IkReal x415=((0.3549)*sj17);
IkReal x416=((0.01822)*sj17);
IkReal x417=((0.0136)*sj16);
IkReal x418=((0.0136)*cj16*cj17);
IkReal x419=((0.0136)*cj16*sj17);
evalcond[0]=(((r21*x404))+((r20*x401))+((r21*x400))+(((-1.0)*r20*x405))+(((-1.0)*x402))+(((-1.0)*r22*x403)));
evalcond[1]=((((-1.0)*r12*x408))+(((-1.0)*r10*x407))+x402+(((-1.0)*r11*x406))+(((-1.0)*r10*x410))+((r11*x409)));
evalcond[2]=(((r10*x401))+(((-1.0)*r10*x405))+((r11*x400))+x412+(((-1.0)*r12*x403))+((r11*x404)));
evalcond[3]=((((-1.0)*r20*x407))+((r21*x409))+x412+(((-1.0)*r22*x408))+(((-1.0)*r20*x410))+(((-1.0)*r21*x406)));
evalcond[4]=(((r21*x419))+(((-1.0)*r22*x417))+(((-1.0)*r21*x414))+(((-1.0)*(1.0)*pz))+((r21*x416))+(((0.3466)*x411))+(((-1.0)*r20*x413))+(((-1.0)*r20*x415))+(((0.0159)*x402))+(((-1.0)*r20*x418)));
evalcond[5]=((-0.03)+((r11*x416))+(((-1.0)*r12*x417))+(((0.0159)*x411))+(((-1.0)*(1.0)*py))+(((-0.3466)*x402))+(((-1.0)*r10*x418))+(((-1.0)*r10*x415))+(((-1.0)*r10*x413))+((r11*x419))+(((-1.0)*r11*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x420=(r12*sj16);
IkReal x421=((1.0)*sj15);
IkReal x422=(cj17*r11);
IkReal x423=(r10*sj17);
IkReal x424=(cj16*cj17*r10);
IkReal x425=(cj16*r11*sj17);
if( IKabs((((cj15*x424))+(((-1.0)*x421*x422))+(((-1.0)*cj15*x425))+((cj15*x420))+(((-1.0)*x421*x423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj15*x420))+((sj15*x424))+(((-1.0)*x421*x425))+((cj15*x422))+((cj15*x423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*x424))+(((-1.0)*x421*x422))+(((-1.0)*cj15*x425))+((cj15*x420))+(((-1.0)*x421*x423))))+IKsqr((((sj15*x420))+((sj15*x424))+(((-1.0)*x421*x425))+((cj15*x422))+((cj15*x423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((cj15*x424))+(((-1.0)*x421*x422))+(((-1.0)*cj15*x425))+((cj15*x420))+(((-1.0)*x421*x423))), (((sj15*x420))+((sj15*x424))+(((-1.0)*x421*x425))+((cj15*x422))+((cj15*x423))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x426=IKcos(j13);
IkReal x427=(cj17*sj15);
IkReal x428=(sj15*sj17);
IkReal x429=((1.0)*cj15*sj16);
IkReal x430=(cj15*cj16*sj17);
IkReal x431=((1.0)*cj15*cj16*cj17);
IkReal x432=IKsin(j13);
IkReal x433=((1.0)*cj15*cj17);
IkReal x434=((1.0)*cj15*sj17);
IkReal x435=((1.0)*sj15*sj16);
IkReal x436=(cj16*sj15*sj17);
IkReal x437=((1.0)*cj16*cj17*sj15);
IkReal x438=((0.01822)*cj17);
IkReal x439=((0.3549)*cj17);
IkReal x440=((0.3549)*sj17);
IkReal x441=((0.01822)*sj17);
IkReal x442=((0.0136)*sj16);
IkReal x443=((0.0136)*cj16*cj17);
IkReal x444=((0.0136)*cj16*sj17);
evalcond[0]=(((r21*x427))+(((-1.0)*r22*x429))+((r20*x428))+x426+(((-1.0)*r20*x431))+((r21*x430)));
evalcond[1]=(((r11*x430))+((r11*x427))+((r10*x428))+(((-1.0)*r12*x429))+x432+(((-1.0)*r10*x431)));
evalcond[2]=((((-1.0)*r11*x433))+(((-1.0)*r10*x434))+(((-1.0)*r12*x435))+x426+(((-1.0)*r10*x437))+((r11*x436)));
evalcond[3]=((((-1.0)*r21*x433))+(((-1.0)*r20*x437))+((r21*x436))+(((-1.0)*r22*x435))+(((-1.0)*r20*x434))+(((-1.0)*x432)));
evalcond[4]=((((-1.0)*r20*x438))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x443))+(((-1.0)*r21*x439))+((r21*x444))+(((0.3466)*x432))+(((-0.0159)*x426))+(((-1.0)*r20*x440))+((r21*x441))+(((-1.0)*r22*x442)));
evalcond[5]=((-0.03)+((r11*x444))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x439))+(((-0.3466)*x426))+(((-0.0159)*x432))+(((-1.0)*r12*x442))+(((-1.0)*r10*x438))+(((-1.0)*r10*x443))+(((-1.0)*r10*x440))+((r11*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x445=((1.0)*sj16);
IkReal x446=(cj15*cj16);
CheckValue<IkReal> x447=IKPowWithIntegerCheck(sj14,-1);
if(!x447.valid){
continue;
}
CheckValue<IkReal> x448=IKPowWithIntegerCheck(cj14,-1);
if(!x448.valid){
continue;
}
if( IKabs(((x447.value)*((((r10*sj15*sj17))+((r11*sj17*x446))+((cj17*r11*sj15))+(((-1.0)*cj15*r12*x445))+(((-1.0)*cj17*r10*x446)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x448.value)*(((((-1.0)*cj17*r20*x445))+((cj16*r22))+((r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x447.value)*((((r10*sj15*sj17))+((r11*sj17*x446))+((cj17*r11*sj15))+(((-1.0)*cj15*r12*x445))+(((-1.0)*cj17*r10*x446))))))+IKsqr(((x448.value)*(((((-1.0)*cj17*r20*x445))+((cj16*r22))+((r21*sj16*sj17))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x447.value)*((((r10*sj15*sj17))+((r11*sj17*x446))+((cj17*r11*sj15))+(((-1.0)*cj15*r12*x445))+(((-1.0)*cj17*r10*x446))))), ((x448.value)*(((((-1.0)*cj17*r20*x445))+((cj16*r22))+((r21*sj16*sj17))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x449=IKcos(j13);
IkReal x450=(cj14*x449);
IkReal x451=((1.0)*cj16);
IkReal x452=(cj17*sj16);
IkReal x453=((1.0)*sj16*sj17);
IkReal x454=IKsin(j13);
IkReal x455=(cj14*x454);
IkReal x456=((1.0)*cj15*cj17);
IkReal x457=((1.0)*cj15*sj17);
IkReal x458=((1.0)*sj15*sj16);
IkReal x459=(cj16*sj15*sj17);
IkReal x460=((1.0)*cj16*cj17*sj15);
IkReal x461=(cj17*sj15);
IkReal x462=(sj15*sj17);
IkReal x463=((1.0)*cj15*sj16);
IkReal x464=(cj15*cj16*sj17);
IkReal x465=((1.0)*cj15*cj16*cj17);
IkReal x466=((1.0)*x454);
IkReal x467=((0.01822)*cj17);
IkReal x468=((0.3549)*cj17);
IkReal x469=((0.3549)*sj17);
IkReal x470=((0.01822)*sj17);
IkReal x471=((0.0136)*sj16);
IkReal x472=((0.0159)*sj14);
IkReal x473=((0.0136)*cj16*cj17);
IkReal x474=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x452))+x450+(((-1.0)*r21*x453))+(((-1.0)*r22*x451)));
evalcond[1]=((((-1.0)*r11*x453))+((r10*x452))+x455+(((-1.0)*r12*x451)));
evalcond[2]=((((-1.0)*r10*x460))+(((-1.0)*r10*x457))+(((-1.0)*r11*x456))+(((-1.0)*r12*x458))+x449+((r11*x459)));
evalcond[3]=(((r20*x462))+(((-1.0)*sj14*x449))+((r21*x461))+(((-1.0)*r20*x465))+(((-1.0)*r22*x463))+((r21*x464)));
evalcond[4]=(((r10*x462))+(((-1.0)*sj14*x466))+((r11*x464))+(((-1.0)*r12*x463))+(((-1.0)*r10*x465))+((r11*x461)));
evalcond[5]=((((-1.0)*x466))+(((-1.0)*r21*x456))+(((-1.0)*r20*x457))+((r21*x459))+(((-1.0)*r20*x460))+(((-1.0)*r22*x458)));
evalcond[6]=((((-1.0)*r22*x471))+(((-1.0)*r20*x467))+(((-1.0)*(1.0)*pz))+((r21*x474))+(((-1.0)*r20*x473))+(((0.3466)*x454))+((r21*x470))+(((-1.0)*r21*x468))+((x449*x472))+(((-1.0)*r20*x469))+(((0.0005)*x450)));
evalcond[7]=((-0.03)+((r11*x474))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x467))+(((-1.0)*r12*x471))+(((-1.0)*r11*x468))+((x454*x472))+(((0.0005)*x455))+(((-0.3466)*x449))+(((-1.0)*r10*x473))+(((-1.0)*r10*x469))+((r11*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x475=(cj17*r10);
IkReal x476=(cj16*sj15);
CheckValue<IkReal> x477=IKPowWithIntegerCheck(cj14,-1);
if(!x477.valid){
continue;
}
if( IKabs(((x477.value)*(((((-1.0)*sj16*x475))+((cj16*r12))+((sj16*((r11*sj17)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj17*x476))+((cj15*r10*sj17))+((r12*sj15*sj16))+((x475*x476))+((cj15*cj17*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x477.value)*(((((-1.0)*sj16*x475))+((cj16*r12))+((sj16*((r11*sj17))))))))+IKsqr(((((-1.0)*r11*sj17*x476))+((cj15*r10*sj17))+((r12*sj15*sj16))+((x475*x476))+((cj15*cj17*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x477.value)*(((((-1.0)*sj16*x475))+((cj16*r12))+((sj16*((r11*sj17))))))), ((((-1.0)*r11*sj17*x476))+((cj15*r10*sj17))+((r12*sj15*sj16))+((x475*x476))+((cj15*cj17*r11))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x478=IKcos(j13);
IkReal x479=(cj14*x478);
IkReal x480=((1.0)*cj16);
IkReal x481=(cj17*sj16);
IkReal x482=((1.0)*sj16*sj17);
IkReal x483=IKsin(j13);
IkReal x484=(cj14*x483);
IkReal x485=((1.0)*cj15*cj17);
IkReal x486=((1.0)*cj15*sj17);
IkReal x487=((1.0)*sj15*sj16);
IkReal x488=(cj16*sj15*sj17);
IkReal x489=((1.0)*cj16*cj17*sj15);
IkReal x490=(cj17*sj15);
IkReal x491=(sj15*sj17);
IkReal x492=((1.0)*cj15*sj16);
IkReal x493=(cj15*cj16*sj17);
IkReal x494=((1.0)*cj15*cj16*cj17);
IkReal x495=((1.0)*x483);
IkReal x496=((0.01822)*cj17);
IkReal x497=((0.3549)*cj17);
IkReal x498=((0.3549)*sj17);
IkReal x499=((0.01822)*sj17);
IkReal x500=((0.0136)*sj16);
IkReal x501=((0.0159)*sj14);
IkReal x502=((0.0136)*cj16*cj17);
IkReal x503=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x481))+x479+(((-1.0)*r22*x480))+(((-1.0)*r21*x482)));
evalcond[1]=((((-1.0)*r12*x480))+((r10*x481))+(((-1.0)*r11*x482))+x484);
evalcond[2]=(x478+(((-1.0)*r10*x489))+(((-1.0)*r12*x487))+(((-1.0)*r10*x486))+(((-1.0)*r11*x485))+((r11*x488)));
evalcond[3]=(((r21*x493))+(((-1.0)*sj14*x478))+((r21*x490))+(((-1.0)*r22*x492))+((r20*x491))+(((-1.0)*r20*x494)));
evalcond[4]=(((r10*x491))+(((-1.0)*r10*x494))+((r11*x490))+((r11*x493))+(((-1.0)*sj14*x495))+(((-1.0)*r12*x492)));
evalcond[5]=((((-1.0)*r22*x487))+(((-1.0)*r20*x489))+((r21*x488))+(((-1.0)*r21*x485))+(((-1.0)*r20*x486))+(((-1.0)*x495)));
evalcond[6]=((((-1.0)*r22*x500))+(((-1.0)*(1.0)*pz))+(((0.3466)*x483))+(((-1.0)*r21*x497))+(((0.0005)*x479))+((x478*x501))+((r21*x503))+((r21*x499))+(((-1.0)*r20*x496))+(((-1.0)*r20*x502))+(((-1.0)*r20*x498)));
evalcond[7]=((-0.03)+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x502))+((r11*x499))+((r11*x503))+(((-1.0)*r11*x497))+(((-1.0)*r10*x498))+(((-1.0)*r12*x500))+(((0.0005)*x484))+(((-0.3466)*x478))+(((-1.0)*r10*x496))+((x483*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x504=(sj16*sj17);
IkReal x505=((1.0)*cj17*sj16);
CheckValue<IkReal> x506=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x506.valid){
continue;
}
CheckValue<IkReal> x507 = IKatan2WithCheck(IkReal((((r11*x504))+((cj16*r12))+(((-1.0)*r10*x505)))),IkReal(((((-1.0)*r20*x505))+((cj16*r22))+((r21*x504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x507.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x506.value)))+(x507.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x508=IKcos(j13);
IkReal x509=(cj14*x508);
IkReal x510=((1.0)*cj16);
IkReal x511=(cj17*sj16);
IkReal x512=((1.0)*sj16*sj17);
IkReal x513=IKsin(j13);
IkReal x514=(cj14*x513);
IkReal x515=((1.0)*cj15*cj17);
IkReal x516=((1.0)*cj15*sj17);
IkReal x517=((1.0)*sj15*sj16);
IkReal x518=(cj16*sj15*sj17);
IkReal x519=((1.0)*cj16*cj17*sj15);
IkReal x520=(cj17*sj15);
IkReal x521=(sj15*sj17);
IkReal x522=((1.0)*cj15*sj16);
IkReal x523=(cj15*cj16*sj17);
IkReal x524=((1.0)*cj15*cj16*cj17);
IkReal x525=((1.0)*x513);
IkReal x526=((0.01822)*cj17);
IkReal x527=((0.3549)*cj17);
IkReal x528=((0.3549)*sj17);
IkReal x529=((0.01822)*sj17);
IkReal x530=((0.0136)*sj16);
IkReal x531=((0.0159)*sj14);
IkReal x532=((0.0136)*cj16*cj17);
IkReal x533=((0.0136)*cj16*sj17);
evalcond[0]=(x509+(((-1.0)*r21*x512))+(((-1.0)*r22*x510))+((r20*x511)));
evalcond[1]=(((r10*x511))+(((-1.0)*r11*x512))+x514+(((-1.0)*r12*x510)));
evalcond[2]=((((-1.0)*r10*x516))+x508+(((-1.0)*r10*x519))+((r11*x518))+(((-1.0)*r11*x515))+(((-1.0)*r12*x517)));
evalcond[3]=((((-1.0)*r20*x524))+(((-1.0)*sj14*x508))+((r20*x521))+(((-1.0)*r22*x522))+((r21*x520))+((r21*x523)));
evalcond[4]=(((r10*x521))+(((-1.0)*sj14*x525))+(((-1.0)*r10*x524))+(((-1.0)*r12*x522))+((r11*x523))+((r11*x520)));
evalcond[5]=((((-1.0)*x525))+((r21*x518))+(((-1.0)*r20*x519))+(((-1.0)*r21*x515))+(((-1.0)*r20*x516))+(((-1.0)*r22*x517)));
evalcond[6]=((((0.0005)*x509))+(((-1.0)*r22*x530))+((r21*x533))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x532))+((x508*x531))+(((-1.0)*r21*x527))+((r21*x529))+(((-1.0)*r20*x526))+(((-1.0)*r20*x528))+(((0.3466)*x513)));
evalcond[7]=((-0.03)+(((-1.0)*(1.0)*py))+(((-0.3466)*x508))+(((-1.0)*r10*x526))+(((-1.0)*r11*x527))+((r11*x529))+((r11*x533))+(((0.0005)*x514))+(((-1.0)*r10*x532))+((x513*x531))+(((-1.0)*r10*x528))+(((-1.0)*r12*x530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x534=((1.0)*r02);
IkReal x535=(r01*sj17);
IkReal x536=(cj15*cj16);
if( IKabs((((sj16*((cj17*r00))))+(((-1.0)*sj16*x535))+(((-1.0)*cj16*x534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x535*x536))+(((-1.0)*cj15*sj16*x534))+((cj17*r01*sj15))+((r00*sj15*sj17))+(((-1.0)*cj17*r00*x536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj16*((cj17*r00))))+(((-1.0)*sj16*x535))+(((-1.0)*cj16*x534))))+IKsqr((((x535*x536))+(((-1.0)*cj15*sj16*x534))+((cj17*r01*sj15))+((r00*sj15*sj17))+(((-1.0)*cj17*r00*x536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((sj16*((cj17*r00))))+(((-1.0)*sj16*x535))+(((-1.0)*cj16*x534))), (((x535*x536))+(((-1.0)*cj15*sj16*x534))+((cj17*r01*sj15))+((r00*sj15*sj17))+(((-1.0)*cj17*r00*x536))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x537=((1.0)*r02);
IkReal x538=(cj17*r00);
IkReal x539=IKsin(j14);
IkReal x540=(r01*sj17);
IkReal x541=(cj17*r01);
IkReal x542=(r00*sj17);
IkReal x543=IKcos(j14);
IkReal x544=(cj15*cj16);
IkReal x545=((0.0136)*cj16);
evalcond[0]=(((sj16*x538))+(((-1.0)*x539))+(((-1.0)*cj16*x537))+(((-1.0)*sj16*x540)));
evalcond[1]=((((-1.0)*cj15*sj16*x537))+((sj15*x541))+(((-1.0)*x543))+(((-1.0)*cj17*r00*x544))+((sj15*x542))+((x540*x544)));
evalcond[2]=((-0.0104)+((x540*x545))+(((-0.0005)*x539))+(((-1.0)*(1.0)*px))+(((-0.3549)*x541))+(((0.0159)*x543))+(((0.01822)*x540))+(((-0.01822)*x538))+(((-1.0)*x538*x545))+(((-0.3549)*x542))+(((-1.0)*(0.0136)*r02*sj16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x546=(sj16*sj17);
IkReal x547=(cj17*sj16);
j13eval[0]=cj14;
j13eval[1]=IKsign(cj14);
j13eval[2]=((IKabs((((cj16*r22))+(((-1.0)*r20*x547))+((r21*x546)))))+(IKabs((((r10*x547))+(((-1.0)*(1.0)*cj16*r12))+(((-1.0)*r11*x546))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j13eval[0]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j13eval[0]=sj14;
j13eval[1]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x548=(cj17*sj16);
IkReal x549=(sj16*sj17);
if( IKabs((((r10*x548))+(((-1.0)*r11*x549))+(((-1.0)*(1.0)*cj16*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x548))+((cj16*r22))+((r21*x549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x548))+(((-1.0)*r11*x549))+(((-1.0)*(1.0)*cj16*r12))))+IKsqr(((((-1.0)*r20*x548))+((cj16*r22))+((r21*x549))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r10*x548))+(((-1.0)*r11*x549))+(((-1.0)*(1.0)*cj16*r12))), ((((-1.0)*r20*x548))+((cj16*r22))+((r21*x549))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x550=IKcos(j13);
IkReal x551=((1.0)*cj16);
IkReal x552=(cj17*sj16);
IkReal x553=((1.0)*sj16*sj17);
IkReal x554=IKsin(j13);
IkReal x555=((-1.0)*x554);
IkReal x556=((1.0)*cj15*cj17);
IkReal x557=((1.0)*cj15*sj17);
IkReal x558=((1.0)*sj15*sj16);
IkReal x559=(cj16*sj15*sj17);
IkReal x560=((1.0)*cj16*cj17*sj15);
IkReal x561=((0.01822)*cj17);
IkReal x562=((0.3549)*cj17);
IkReal x563=((0.3549)*sj17);
IkReal x564=((0.01822)*sj17);
IkReal x565=((0.0136)*sj16);
IkReal x566=((0.0136)*cj16*cj17);
IkReal x567=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x552))+x550+(((-1.0)*r21*x553))+(((-1.0)*r22*x551)));
evalcond[1]=((((-1.0)*r11*x553))+(((-1.0)*r12*x551))+x555+((r10*x552)));
evalcond[2]=(((r21*x559))+(((-1.0)*r20*x560))+(((-1.0)*r20*x557))+(((-1.0)*r21*x556))+x555+(((-1.0)*r22*x558)));
evalcond[3]=((((-1.0)*r11*x556))+(((-1.0)*r10*x560))+(((-1.0)*r10*x557))+(((-1.0)*x550))+(((-1.0)*r12*x558))+((r11*x559)));
evalcond[4]=(((r21*x567))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x563))+((r21*x564))+(((0.0005)*x550))+(((-1.0)*r21*x562))+(((-1.0)*r20*x561))+(((0.3466)*x554))+(((-1.0)*r22*x565))+(((-1.0)*r20*x566)));
evalcond[5]=((0.03)+(((-0.0005)*x554))+(((0.3466)*x550))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x562))+((r11*x564))+((r11*x567))+(((-1.0)*r12*x565))+(((-1.0)*r10*x561))+(((-1.0)*r10*x566))+(((-1.0)*r10*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x568=(sj16*sj17);
IkReal x569=(cj17*sj16);
if( IKabs((((r11*x568))+(((-1.0)*r10*x569))+((cj16*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x569))+(((-1.0)*(1.0)*cj16*r22))+(((-1.0)*r21*x568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x568))+(((-1.0)*r10*x569))+((cj16*r12))))+IKsqr((((r20*x569))+(((-1.0)*(1.0)*cj16*r22))+(((-1.0)*r21*x568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r11*x568))+(((-1.0)*r10*x569))+((cj16*r12))), (((r20*x569))+(((-1.0)*(1.0)*cj16*r22))+(((-1.0)*r21*x568))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x570=IKsin(j13);
IkReal x571=((1.0)*cj16);
IkReal x572=(cj17*sj16);
IkReal x573=((1.0)*sj16*sj17);
IkReal x574=IKcos(j13);
IkReal x575=((-1.0)*x574);
IkReal x576=((1.0)*cj15*cj17);
IkReal x577=((1.0)*cj15*sj17);
IkReal x578=((1.0)*sj15*sj16);
IkReal x579=(cj16*sj15*sj17);
IkReal x580=((1.0)*cj16*cj17*sj15);
IkReal x581=((0.01822)*cj17);
IkReal x582=((0.3549)*cj17);
IkReal x583=((0.3549)*sj17);
IkReal x584=((0.01822)*sj17);
IkReal x585=((0.0136)*sj16);
IkReal x586=((0.0136)*cj16*cj17);
IkReal x587=((0.0136)*cj16*sj17);
evalcond[0]=(x570+(((-1.0)*r11*x573))+((r10*x572))+(((-1.0)*r12*x571)));
evalcond[1]=(x575+(((-1.0)*r22*x571))+(((-1.0)*r21*x573))+((r20*x572)));
evalcond[2]=((((-1.0)*r21*x576))+(((-1.0)*r22*x578))+(((-1.0)*r20*x580))+((r21*x579))+(((-1.0)*x570))+(((-1.0)*r20*x577)));
evalcond[3]=(x575+(((-1.0)*r10*x580))+(((-1.0)*r11*x576))+((r11*x579))+(((-1.0)*r12*x578))+(((-1.0)*r10*x577)));
evalcond[4]=((((-1.0)*r20*x583))+(((0.3466)*x570))+(((-1.0)*r22*x585))+(((-1.0)*r20*x581))+(((-1.0)*(1.0)*pz))+(((-0.0005)*x574))+(((-1.0)*r21*x582))+((r21*x587))+(((-1.0)*r20*x586))+((r21*x584)));
evalcond[5]=((0.03)+(((0.0005)*x570))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x586))+(((-1.0)*r10*x583))+((r11*x584))+((r11*x587))+(((-1.0)*r10*x581))+(((0.3466)*x574))+(((-1.0)*r11*x582))+(((-1.0)*r12*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x588=(cj15*sj16);
IkReal x589=((1.0)*r11);
IkReal x590=(cj17*sj15);
IkReal x591=(sj15*sj17);
IkReal x592=(cj15*cj16*cj17);
IkReal x593=(cj15*cj16*sj17);
if( IKabs(((((-1.0)*x589*x593))+(((-1.0)*x589*x590))+((r12*x588))+((r10*x592))+(((-1.0)*r10*x591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x590))+((r20*x591))+(((-1.0)*r22*x588))+(((-1.0)*r20*x592))+((r21*x593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x589*x593))+(((-1.0)*x589*x590))+((r12*x588))+((r10*x592))+(((-1.0)*r10*x591))))+IKsqr((((r21*x590))+((r20*x591))+(((-1.0)*r22*x588))+(((-1.0)*r20*x592))+((r21*x593))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x589*x593))+(((-1.0)*x589*x590))+((r12*x588))+((r10*x592))+(((-1.0)*r10*x591))), (((r21*x590))+((r20*x591))+(((-1.0)*r22*x588))+(((-1.0)*r20*x592))+((r21*x593))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x594=IKsin(j13);
IkReal x595=(cj17*sj15);
IkReal x596=(sj15*sj17);
IkReal x597=((1.0)*cj15*sj16);
IkReal x598=(cj15*cj16*sj17);
IkReal x599=((1.0)*cj15*cj16*cj17);
IkReal x600=IKcos(j13);
IkReal x601=((-1.0)*x600);
IkReal x602=((1.0)*cj15*cj17);
IkReal x603=((1.0)*cj15*sj17);
IkReal x604=((1.0)*sj15*sj16);
IkReal x605=(cj16*sj15*sj17);
IkReal x606=((1.0)*cj16*cj17*sj15);
IkReal x607=((0.01822)*cj17);
IkReal x608=((0.3549)*cj17);
IkReal x609=((0.3549)*sj17);
IkReal x610=((0.01822)*sj17);
IkReal x611=((0.0136)*sj16);
IkReal x612=((0.0136)*cj16*cj17);
IkReal x613=((0.0136)*cj16*sj17);
evalcond[0]=(((r11*x595))+(((-1.0)*r12*x597))+(((-1.0)*r10*x599))+((r10*x596))+((r11*x598))+x594);
evalcond[1]=(((r21*x598))+(((-1.0)*r22*x597))+((r21*x595))+((r20*x596))+(((-1.0)*r20*x599))+x601);
evalcond[2]=((((-1.0)*r21*x602))+(((-1.0)*r22*x604))+(((-1.0)*r20*x603))+(((-1.0)*r20*x606))+((r21*x605))+(((-1.0)*x594)));
evalcond[3]=((((-1.0)*r11*x602))+((r11*x605))+(((-1.0)*r12*x604))+(((-1.0)*r10*x606))+(((-1.0)*r10*x603))+x601);
evalcond[4]=((((0.3466)*x594))+(((-1.0)*r21*x608))+(((-1.0)*r20*x607))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x609))+(((-1.0)*r22*x611))+(((0.0159)*x600))+((r21*x613))+((r21*x610))+(((-1.0)*r20*x612)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*py))+(((-1.0)*r12*x611))+(((0.3466)*x600))+(((-1.0)*r10*x609))+(((-1.0)*r11*x608))+(((-0.0159)*x594))+(((-1.0)*r10*x607))+(((-1.0)*r10*x612))+((r11*x610))+((r11*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x614=(cj17*sj15);
IkReal x615=(sj15*sj17);
IkReal x616=(cj15*sj16);
IkReal x617=(cj15*cj16*sj17);
IkReal x618=(cj15*cj16*cj17);
IkReal x619=((1.0)*r21);
if( IKabs((((r11*x614))+((r11*x617))+(((-1.0)*r10*x618))+((r10*x615))+(((-1.0)*r12*x616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x616))+((r20*x618))+(((-1.0)*r20*x615))+(((-1.0)*x617*x619))+(((-1.0)*x614*x619)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x614))+((r11*x617))+(((-1.0)*r10*x618))+((r10*x615))+(((-1.0)*r12*x616))))+IKsqr((((r22*x616))+((r20*x618))+(((-1.0)*r20*x615))+(((-1.0)*x617*x619))+(((-1.0)*x614*x619))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r11*x614))+((r11*x617))+(((-1.0)*r10*x618))+((r10*x615))+(((-1.0)*r12*x616))), (((r22*x616))+((r20*x618))+(((-1.0)*r20*x615))+(((-1.0)*x617*x619))+(((-1.0)*x614*x619))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x620=IKcos(j13);
IkReal x621=(cj17*sj15);
IkReal x622=(sj15*sj17);
IkReal x623=((1.0)*cj15*sj16);
IkReal x624=(cj15*cj16*sj17);
IkReal x625=((1.0)*cj15*cj16*cj17);
IkReal x626=IKsin(j13);
IkReal x627=((-1.0)*x626);
IkReal x628=((1.0)*cj15*cj17);
IkReal x629=((1.0)*cj15*sj17);
IkReal x630=((1.0)*sj15*sj16);
IkReal x631=(cj16*sj15*sj17);
IkReal x632=((1.0)*cj16*cj17*sj15);
IkReal x633=((0.01822)*cj17);
IkReal x634=((0.3549)*cj17);
IkReal x635=((0.3549)*sj17);
IkReal x636=((0.01822)*sj17);
IkReal x637=((0.0136)*sj16);
IkReal x638=((0.0136)*cj16*cj17);
IkReal x639=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r20*x625))+((r20*x622))+x620+((r21*x621))+((r21*x624))+(((-1.0)*r22*x623)));
evalcond[1]=(((r10*x622))+x627+(((-1.0)*r10*x625))+(((-1.0)*r12*x623))+((r11*x624))+((r11*x621)));
evalcond[2]=((((-1.0)*r22*x630))+((r21*x631))+(((-1.0)*r21*x628))+x627+(((-1.0)*r20*x632))+(((-1.0)*r20*x629)));
evalcond[3]=((((-1.0)*x620))+(((-1.0)*r11*x628))+((r11*x631))+(((-1.0)*r12*x630))+(((-1.0)*r10*x629))+(((-1.0)*r10*x632)));
evalcond[4]=(((r21*x639))+(((-1.0)*r21*x634))+(((-1.0)*(1.0)*pz))+(((0.3466)*x626))+((r21*x636))+(((-1.0)*r20*x638))+(((-1.0)*r20*x635))+(((-1.0)*r22*x637))+(((-0.0159)*x620))+(((-1.0)*r20*x633)));
evalcond[5]=((0.03)+(((-1.0)*r10*x635))+(((0.0159)*x626))+((r11*x639))+(((-1.0)*(1.0)*py))+(((-1.0)*r12*x637))+(((-1.0)*r10*x633))+(((-1.0)*r10*x638))+(((-1.0)*r11*x634))+(((0.3466)*x620))+((r11*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x640=((1.0)*cj17);
IkReal x641=(cj15*cj16);
CheckValue<IkReal> x642=IKPowWithIntegerCheck(sj14,-1);
if(!x642.valid){
continue;
}
CheckValue<IkReal> x643=IKPowWithIntegerCheck(cj14,-1);
if(!x643.valid){
continue;
}
if( IKabs(((x642.value)*((((cj15*r12*sj16))+(((-1.0)*r11*sj15*x640))+((cj17*r10*x641))+(((-1.0)*r11*sj17*x641))+(((-1.0)*r10*sj15*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x643.value)*((((cj16*r22))+(((-1.0)*r20*sj16*x640))+((r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x642.value)*((((cj15*r12*sj16))+(((-1.0)*r11*sj15*x640))+((cj17*r10*x641))+(((-1.0)*r11*sj17*x641))+(((-1.0)*r10*sj15*sj17))))))+IKsqr(((x643.value)*((((cj16*r22))+(((-1.0)*r20*sj16*x640))+((r21*sj16*sj17))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x642.value)*((((cj15*r12*sj16))+(((-1.0)*r11*sj15*x640))+((cj17*r10*x641))+(((-1.0)*r11*sj17*x641))+(((-1.0)*r10*sj15*sj17))))), ((x643.value)*((((cj16*r22))+(((-1.0)*r20*sj16*x640))+((r21*sj16*sj17))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x644=IKcos(j13);
IkReal x645=(cj14*x644);
IkReal x646=((1.0)*cj16);
IkReal x647=(cj17*sj16);
IkReal x648=((1.0)*sj16*sj17);
IkReal x649=IKsin(j13);
IkReal x650=((1.0)*x649);
IkReal x651=(sj14*x649);
IkReal x652=(cj17*sj15);
IkReal x653=(sj15*sj17);
IkReal x654=((1.0)*cj15*sj16);
IkReal x655=(cj15*cj16*sj17);
IkReal x656=((1.0)*cj15*cj16*cj17);
IkReal x657=((1.0)*x644);
IkReal x658=((1.0)*cj15*cj17);
IkReal x659=((1.0)*cj15*sj17);
IkReal x660=((1.0)*sj15*sj16);
IkReal x661=(cj16*sj15*sj17);
IkReal x662=((1.0)*cj16*cj17*sj15);
IkReal x663=((0.01822)*cj17);
IkReal x664=((0.3549)*cj17);
IkReal x665=((0.3549)*sj17);
IkReal x666=((0.01822)*sj17);
IkReal x667=((0.0136)*sj16);
IkReal x668=((0.0136)*cj16*cj17);
IkReal x669=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x647))+(((-1.0)*r21*x648))+x645+(((-1.0)*r22*x646)));
evalcond[1]=((((-1.0)*r12*x646))+(((-1.0)*cj14*x650))+(((-1.0)*r11*x648))+((r10*x647)));
evalcond[2]=(((r11*x652))+(((-1.0)*r10*x656))+x651+(((-1.0)*r12*x654))+((r11*x655))+((r10*x653)));
evalcond[3]=(((r21*x652))+(((-1.0)*sj14*x657))+(((-1.0)*r20*x656))+(((-1.0)*r22*x654))+((r21*x655))+((r20*x653)));
evalcond[4]=((((-1.0)*r20*x662))+(((-1.0)*r22*x660))+(((-1.0)*r20*x659))+((r21*x661))+(((-1.0)*x650))+(((-1.0)*r21*x658)));
evalcond[5]=(((r11*x661))+(((-1.0)*r11*x658))+(((-1.0)*r12*x660))+(((-1.0)*r10*x662))+(((-1.0)*x657))+(((-1.0)*r10*x659)));
evalcond[6]=((((-1.0)*r20*x668))+(((-1.0)*r20*x663))+((r21*x669))+(((-1.0)*(1.0)*pz))+(((0.3466)*x649))+(((0.0005)*x645))+((r21*x666))+(((-1.0)*r20*x665))+(((0.0159)*sj14*x644))+(((-1.0)*r21*x664))+(((-1.0)*r22*x667)));
evalcond[7]=((0.03)+(((-0.0159)*x651))+(((-1.0)*(1.0)*py))+(((0.3466)*x644))+(((-1.0)*r11*x664))+(((-0.0005)*cj14*x649))+((r11*x666))+((r11*x669))+(((-1.0)*r10*x665))+(((-1.0)*r12*x667))+(((-1.0)*r10*x663))+(((-1.0)*r10*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x670=((1.0)*cj15);
IkReal x671=((1.0)*sj16);
IkReal x672=(cj16*sj15);
IkReal x673=(r21*sj17);
CheckValue<IkReal> x674=IKPowWithIntegerCheck(cj14,-1);
if(!x674.valid){
continue;
}
if( IKabs(((((-1.0)*cj17*r20*x672))+(((-1.0)*cj17*r21*x670))+(((-1.0)*r20*sj17*x670))+((x672*x673))+(((-1.0)*r22*sj15*x671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x674.value)*((((cj16*r22))+((sj16*x673))+(((-1.0)*cj17*r20*x671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj17*r20*x672))+(((-1.0)*cj17*r21*x670))+(((-1.0)*r20*sj17*x670))+((x672*x673))+(((-1.0)*r22*sj15*x671))))+IKsqr(((x674.value)*((((cj16*r22))+((sj16*x673))+(((-1.0)*cj17*r20*x671))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj17*r20*x672))+(((-1.0)*cj17*r21*x670))+(((-1.0)*r20*sj17*x670))+((x672*x673))+(((-1.0)*r22*sj15*x671))), ((x674.value)*((((cj16*r22))+((sj16*x673))+(((-1.0)*cj17*r20*x671))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x675=IKcos(j13);
IkReal x676=(cj14*x675);
IkReal x677=((1.0)*cj16);
IkReal x678=(cj17*sj16);
IkReal x679=((1.0)*sj16*sj17);
IkReal x680=IKsin(j13);
IkReal x681=((1.0)*x680);
IkReal x682=(sj14*x680);
IkReal x683=(cj17*sj15);
IkReal x684=(sj15*sj17);
IkReal x685=((1.0)*cj15*sj16);
IkReal x686=(cj15*cj16*sj17);
IkReal x687=((1.0)*cj15*cj16*cj17);
IkReal x688=((1.0)*x675);
IkReal x689=((1.0)*cj15*cj17);
IkReal x690=((1.0)*cj15*sj17);
IkReal x691=((1.0)*sj15*sj16);
IkReal x692=(cj16*sj15*sj17);
IkReal x693=((1.0)*cj16*cj17*sj15);
IkReal x694=((0.01822)*cj17);
IkReal x695=((0.3549)*cj17);
IkReal x696=((0.3549)*sj17);
IkReal x697=((0.01822)*sj17);
IkReal x698=((0.0136)*sj16);
IkReal x699=((0.0136)*cj16*cj17);
IkReal x700=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x678))+(((-1.0)*r21*x679))+(((-1.0)*r22*x677))+x676);
evalcond[1]=((((-1.0)*r12*x677))+((r10*x678))+(((-1.0)*r11*x679))+(((-1.0)*cj14*x681)));
evalcond[2]=(((r11*x683))+(((-1.0)*r12*x685))+((r11*x686))+((r10*x684))+(((-1.0)*r10*x687))+x682);
evalcond[3]=(((r21*x686))+((r20*x684))+((r21*x683))+(((-1.0)*r20*x687))+(((-1.0)*r22*x685))+(((-1.0)*sj14*x688)));
evalcond[4]=(((r21*x692))+(((-1.0)*r20*x693))+(((-1.0)*x681))+(((-1.0)*r22*x691))+(((-1.0)*r21*x689))+(((-1.0)*r20*x690)));
evalcond[5]=((((-1.0)*x688))+(((-1.0)*r11*x689))+(((-1.0)*r10*x690))+(((-1.0)*r12*x691))+((r11*x692))+(((-1.0)*r10*x693)));
evalcond[6]=(((r21*x700))+(((-1.0)*(1.0)*pz))+(((0.3466)*x680))+(((0.0159)*sj14*x675))+(((0.0005)*x676))+(((-1.0)*r20*x699))+(((-1.0)*r22*x698))+((r21*x697))+(((-1.0)*r21*x695))+(((-1.0)*r20*x696))+(((-1.0)*r20*x694)));
evalcond[7]=((0.03)+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x699))+(((-1.0)*r12*x698))+(((-0.0159)*x682))+(((0.3466)*x675))+(((-1.0)*r10*x694))+(((-0.0005)*cj14*x680))+((r11*x697))+(((-1.0)*r11*x695))+((r11*x700))+(((-1.0)*r10*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x701=(cj17*sj16);
IkReal x702=(sj16*sj17);
CheckValue<IkReal> x703=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x703.valid){
continue;
}
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x702))+((r10*x701))+(((-1.0)*(1.0)*cj16*r12)))),IkReal((((cj16*r22))+((r21*x702))+(((-1.0)*r20*x701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x703.value)))+(x704.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x705=IKcos(j13);
IkReal x706=(cj14*x705);
IkReal x707=((1.0)*cj16);
IkReal x708=(cj17*sj16);
IkReal x709=((1.0)*sj16*sj17);
IkReal x710=IKsin(j13);
IkReal x711=((1.0)*x710);
IkReal x712=(sj14*x710);
IkReal x713=(cj17*sj15);
IkReal x714=(sj15*sj17);
IkReal x715=((1.0)*cj15*sj16);
IkReal x716=(cj15*cj16*sj17);
IkReal x717=((1.0)*cj15*cj16*cj17);
IkReal x718=((1.0)*x705);
IkReal x719=((1.0)*cj15*cj17);
IkReal x720=((1.0)*cj15*sj17);
IkReal x721=((1.0)*sj15*sj16);
IkReal x722=(cj16*sj15*sj17);
IkReal x723=((1.0)*cj16*cj17*sj15);
IkReal x724=((0.01822)*cj17);
IkReal x725=((0.3549)*cj17);
IkReal x726=((0.3549)*sj17);
IkReal x727=((0.01822)*sj17);
IkReal x728=((0.0136)*sj16);
IkReal x729=((0.0136)*cj16*cj17);
IkReal x730=((0.0136)*cj16*sj17);
evalcond[0]=(x706+(((-1.0)*r22*x707))+((r20*x708))+(((-1.0)*r21*x709)));
evalcond[1]=((((-1.0)*r11*x709))+(((-1.0)*cj14*x711))+((r10*x708))+(((-1.0)*r12*x707)));
evalcond[2]=(((r11*x713))+(((-1.0)*r10*x717))+(((-1.0)*r12*x715))+x712+((r10*x714))+((r11*x716)));
evalcond[3]=(((r20*x714))+((r21*x713))+(((-1.0)*sj14*x718))+(((-1.0)*r22*x715))+(((-1.0)*r20*x717))+((r21*x716)));
evalcond[4]=(((r21*x722))+(((-1.0)*r20*x720))+(((-1.0)*r22*x721))+(((-1.0)*x711))+(((-1.0)*r20*x723))+(((-1.0)*r21*x719)));
evalcond[5]=((((-1.0)*r10*x723))+(((-1.0)*x718))+((r11*x722))+(((-1.0)*r10*x720))+(((-1.0)*r11*x719))+(((-1.0)*r12*x721)));
evalcond[6]=(((r21*x727))+(((-1.0)*r21*x725))+(((0.0159)*sj14*x705))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x724))+(((0.3466)*x710))+((r21*x730))+(((-1.0)*r20*x726))+(((-1.0)*r20*x729))+(((0.0005)*x706))+(((-1.0)*r22*x728)));
evalcond[7]=((0.03)+(((-1.0)*r12*x728))+(((-1.0)*r10*x726))+(((-1.0)*(1.0)*py))+(((-0.0005)*cj14*x710))+(((-1.0)*r10*x724))+(((-1.0)*r11*x725))+(((0.3466)*x705))+(((-0.0159)*x712))+((r11*x730))+((r11*x727))+(((-1.0)*r10*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x731=((1.0)*cj17);
IkReal x732=(cj15*cj16);
if( IKabs((((cj16*r12))+(((-1.0)*r10*sj16*x731))+((sj16*((r11*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj17*r10*x732))+((cj15*r12*sj16))+(((-1.0)*r11*sj15*x731))+(((-1.0)*(1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj17*x732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj16*r12))+(((-1.0)*r10*sj16*x731))+((sj16*((r11*sj17))))))+IKsqr((((cj17*r10*x732))+((cj15*r12*sj16))+(((-1.0)*r11*sj15*x731))+(((-1.0)*(1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj17*x732))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj16*r12))+(((-1.0)*r10*sj16*x731))+((sj16*((r11*sj17))))), (((cj17*r10*x732))+((cj15*r12*sj16))+(((-1.0)*r11*sj15*x731))+(((-1.0)*(1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj17*x732))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x733=IKsin(j14);
IkReal x734=((1.0)*r12);
IkReal x735=(cj17*r10);
IkReal x736=(r11*sj17);
IkReal x737=IKcos(j14);
IkReal x738=(cj17*r11);
IkReal x739=(r10*sj17);
IkReal x740=(cj15*cj16);
IkReal x741=((0.0136)*cj16);
evalcond[0]=((((-1.0)*sj16*x736))+((sj16*x735))+(((-1.0)*cj16*x734))+x733);
evalcond[1]=((((-1.0)*cj15*sj16*x734))+((sj15*x739))+(((-1.0)*cj17*r10*x740))+x737+((x736*x740))+((sj15*x738)));
evalcond[2]=((0.0104)+(((-1.0)*(1.0)*py))+(((-0.01822)*x735))+(((-0.3549)*x738))+(((0.0005)*x733))+(((-1.0)*(0.0136)*r12*sj16))+((x736*x741))+(((-0.3549)*x739))+(((-0.0159)*x737))+(((0.01822)*x736))+(((-1.0)*x735*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x742=(sj16*sj17);
IkReal x743=(cj17*sj16);
j13eval[0]=cj14;
j13eval[1]=IKsign(cj14);
j13eval[2]=((IKabs((((r00*x743))+(((-1.0)*(1.0)*cj16*r02))+(((-1.0)*r01*x742)))))+(IKabs((((cj16*r22))+(((-1.0)*r20*x743))+((r21*x742))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=sj14;
j13eval[1]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x744=(cj17*sj16);
IkReal x745=(sj16*sj17);
if( IKabs(((((-1.0)*r01*x745))+(((-1.0)*(1.0)*cj16*r02))+((r00*x744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj16*r22))+((r21*x745))+(((-1.0)*r20*x744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x745))+(((-1.0)*(1.0)*cj16*r02))+((r00*x744))))+IKsqr((((cj16*r22))+((r21*x745))+(((-1.0)*r20*x744))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r01*x745))+(((-1.0)*(1.0)*cj16*r02))+((r00*x744))), (((cj16*r22))+((r21*x745))+(((-1.0)*r20*x744))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x746=IKcos(j13);
IkReal x747=((1.0)*cj16);
IkReal x748=(cj17*sj16);
IkReal x749=((1.0)*sj16*sj17);
IkReal x750=IKsin(j13);
IkReal x751=((-1.0)*x750);
IkReal x752=((1.0)*cj15*cj17);
IkReal x753=((1.0)*cj15*sj17);
IkReal x754=((1.0)*sj15*sj16);
IkReal x755=(cj16*sj15*sj17);
IkReal x756=((1.0)*cj16*cj17*sj15);
IkReal x757=((0.01822)*cj17);
IkReal x758=((0.3549)*cj17);
IkReal x759=((0.3549)*sj17);
IkReal x760=((0.01822)*sj17);
IkReal x761=((0.0136)*sj16);
IkReal x762=((0.0136)*cj16*cj17);
IkReal x763=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r21*x749))+(((-1.0)*r22*x747))+((r20*x748))+x746);
evalcond[1]=(((r00*x748))+(((-1.0)*r02*x747))+(((-1.0)*r01*x749))+x751);
evalcond[2]=(((r21*x755))+(((-1.0)*r20*x756))+(((-1.0)*r20*x753))+(((-1.0)*r22*x754))+(((-1.0)*r21*x752))+x751);
evalcond[3]=(((r01*x755))+(((-1.0)*r00*x753))+(((-1.0)*r01*x752))+(((-1.0)*x746))+(((-1.0)*r00*x756))+(((-1.0)*r02*x754)));
evalcond[4]=(((r21*x760))+(((0.3466)*x750))+(((-1.0)*r20*x757))+(((-1.0)*r20*x762))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x759))+(((-1.0)*r22*x761))+((r21*x763))+(((-1.0)*r21*x758))+(((0.0005)*x746)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*px))+((r01*x760))+(((-1.0)*r00*x759))+(((-1.0)*r01*x758))+(((-1.0)*r00*x762))+((r01*x763))+(((-1.0)*r00*x757))+(((0.3466)*x746))+(((-1.0)*r02*x761))+(((-0.0005)*x750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x764=(sj16*sj17);
IkReal x765=(cj17*sj16);
if( IKabs(((((-1.0)*r00*x765))+((r01*x764))+((cj16*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj16*r22))+((r20*x765))+(((-1.0)*r21*x764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x765))+((r01*x764))+((cj16*r02))))+IKsqr(((((-1.0)*(1.0)*cj16*r22))+((r20*x765))+(((-1.0)*r21*x764))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r00*x765))+((r01*x764))+((cj16*r02))), ((((-1.0)*(1.0)*cj16*r22))+((r20*x765))+(((-1.0)*r21*x764))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x766=IKsin(j13);
IkReal x767=((1.0)*cj16);
IkReal x768=(cj17*sj16);
IkReal x769=((1.0)*sj16*sj17);
IkReal x770=IKcos(j13);
IkReal x771=((-1.0)*x770);
IkReal x772=((1.0)*cj15*cj17);
IkReal x773=((1.0)*cj15*sj17);
IkReal x774=((1.0)*sj15*sj16);
IkReal x775=(cj16*sj15*sj17);
IkReal x776=((1.0)*cj16*cj17*sj15);
IkReal x777=((0.01822)*cj17);
IkReal x778=((0.3549)*cj17);
IkReal x779=((0.3549)*sj17);
IkReal x780=((0.01822)*sj17);
IkReal x781=((0.0136)*sj16);
IkReal x782=((0.0136)*cj16*cj17);
IkReal x783=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r01*x769))+((r00*x768))+x766+(((-1.0)*r02*x767)));
evalcond[1]=((((-1.0)*r21*x769))+((r20*x768))+(((-1.0)*r22*x767))+x771);
evalcond[2]=((((-1.0)*r21*x772))+(((-1.0)*r20*x773))+(((-1.0)*r22*x774))+((r21*x775))+(((-1.0)*x766))+(((-1.0)*r20*x776)));
evalcond[3]=((((-1.0)*r00*x776))+(((-1.0)*r00*x773))+((r01*x775))+(((-1.0)*r02*x774))+(((-1.0)*r01*x772))+x771);
evalcond[4]=((((-1.0)*(1.0)*pz))+(((-1.0)*r21*x778))+(((-1.0)*r20*x782))+(((-1.0)*r22*x781))+((r21*x780))+(((-1.0)*r20*x777))+(((-1.0)*r20*x779))+(((0.3466)*x766))+((r21*x783))+(((-0.0005)*x770)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r02*x781))+(((0.3466)*x770))+((r01*x783))+(((-1.0)*r01*x778))+(((0.0005)*x766))+(((-1.0)*r00*x777))+(((-1.0)*r00*x779))+(((-1.0)*r00*x782))+((r01*x780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x784=(cj15*sj16);
IkReal x785=((1.0)*r01);
IkReal x786=(cj17*sj15);
IkReal x787=(sj15*sj17);
IkReal x788=(cj15*cj16*cj17);
IkReal x789=(cj15*cj16*sj17);
if( IKabs((((r02*x784))+(((-1.0)*x785*x786))+((r00*x788))+(((-1.0)*x785*x789))+(((-1.0)*r00*x787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x789))+((r21*x786))+((r20*x787))+(((-1.0)*r20*x788))+(((-1.0)*r22*x784)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x784))+(((-1.0)*x785*x786))+((r00*x788))+(((-1.0)*x785*x789))+(((-1.0)*r00*x787))))+IKsqr((((r21*x789))+((r21*x786))+((r20*x787))+(((-1.0)*r20*x788))+(((-1.0)*r22*x784))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r02*x784))+(((-1.0)*x785*x786))+((r00*x788))+(((-1.0)*x785*x789))+(((-1.0)*r00*x787))), (((r21*x789))+((r21*x786))+((r20*x787))+(((-1.0)*r20*x788))+(((-1.0)*r22*x784))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x790=IKsin(j13);
IkReal x791=(cj17*sj15);
IkReal x792=(sj15*sj17);
IkReal x793=((1.0)*cj15*sj16);
IkReal x794=(cj15*cj16*sj17);
IkReal x795=((1.0)*cj15*cj16*cj17);
IkReal x796=IKcos(j13);
IkReal x797=((-1.0)*x796);
IkReal x798=((1.0)*cj15*cj17);
IkReal x799=((1.0)*cj15*sj17);
IkReal x800=((1.0)*sj15*sj16);
IkReal x801=(cj16*sj15*sj17);
IkReal x802=((1.0)*cj16*cj17*sj15);
IkReal x803=((0.01822)*cj17);
IkReal x804=((0.3549)*cj17);
IkReal x805=((0.3549)*sj17);
IkReal x806=((0.01822)*sj17);
IkReal x807=((0.0136)*sj16);
IkReal x808=((0.0136)*cj16*cj17);
IkReal x809=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r00*x795))+(((-1.0)*r02*x793))+((r01*x791))+((r01*x794))+((r00*x792))+x790);
evalcond[1]=((((-1.0)*r22*x793))+((r21*x791))+(((-1.0)*r20*x795))+((r20*x792))+((r21*x794))+x797);
evalcond[2]=((((-1.0)*r20*x802))+(((-1.0)*r20*x799))+(((-1.0)*r21*x798))+(((-1.0)*x790))+((r21*x801))+(((-1.0)*r22*x800)));
evalcond[3]=((((-1.0)*r00*x799))+(((-1.0)*r01*x798))+(((-1.0)*r02*x800))+((r01*x801))+(((-1.0)*r00*x802))+x797);
evalcond[4]=(((r21*x809))+(((-1.0)*r20*x803))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x808))+((r21*x806))+(((-1.0)*r22*x807))+(((-1.0)*r20*x805))+(((0.0159)*x796))+(((0.3466)*x790))+(((-1.0)*r21*x804)));
evalcond[5]=((0.03)+(((-1.0)*(1.0)*px))+((r01*x809))+(((-1.0)*r00*x803))+(((-1.0)*r00*x805))+(((0.3466)*x796))+(((-0.0159)*x790))+(((-1.0)*r01*x804))+(((-1.0)*r00*x808))+(((-1.0)*r02*x807))+((r01*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x810=(cj17*sj15);
IkReal x811=(sj15*sj17);
IkReal x812=(cj15*sj16);
IkReal x813=(cj15*cj16*sj17);
IkReal x814=(cj15*cj16*cj17);
IkReal x815=((1.0)*r21);
if( IKabs((((r00*x811))+((r01*x810))+(((-1.0)*r02*x812))+((r01*x813))+(((-1.0)*r00*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x814))+(((-1.0)*r20*x811))+((r22*x812))+(((-1.0)*x813*x815))+(((-1.0)*x810*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x811))+((r01*x810))+(((-1.0)*r02*x812))+((r01*x813))+(((-1.0)*r00*x814))))+IKsqr((((r20*x814))+(((-1.0)*r20*x811))+((r22*x812))+(((-1.0)*x813*x815))+(((-1.0)*x810*x815))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2((((r00*x811))+((r01*x810))+(((-1.0)*r02*x812))+((r01*x813))+(((-1.0)*r00*x814))), (((r20*x814))+(((-1.0)*r20*x811))+((r22*x812))+(((-1.0)*x813*x815))+(((-1.0)*x810*x815))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x816=IKcos(j13);
IkReal x817=(cj17*sj15);
IkReal x818=(sj15*sj17);
IkReal x819=((1.0)*cj15*sj16);
IkReal x820=(cj15*cj16*sj17);
IkReal x821=((1.0)*cj15*cj16*cj17);
IkReal x822=IKsin(j13);
IkReal x823=((-1.0)*x822);
IkReal x824=((1.0)*cj15*cj17);
IkReal x825=((1.0)*cj15*sj17);
IkReal x826=((1.0)*sj15*sj16);
IkReal x827=(cj16*sj15*sj17);
IkReal x828=((1.0)*cj16*cj17*sj15);
IkReal x829=((0.01822)*cj17);
IkReal x830=((0.3549)*cj17);
IkReal x831=((0.3549)*sj17);
IkReal x832=((0.01822)*sj17);
IkReal x833=((0.0136)*sj16);
IkReal x834=((0.0136)*cj16*cj17);
IkReal x835=((0.0136)*cj16*sj17);
evalcond[0]=(((r21*x820))+(((-1.0)*r22*x819))+(((-1.0)*r20*x821))+((r20*x818))+x816+((r21*x817)));
evalcond[1]=((((-1.0)*r02*x819))+(((-1.0)*r00*x821))+((r00*x818))+((r01*x820))+((r01*x817))+x823);
evalcond[2]=((((-1.0)*r20*x825))+(((-1.0)*r22*x826))+((r21*x827))+(((-1.0)*r21*x824))+x823+(((-1.0)*r20*x828)));
evalcond[3]=((((-1.0)*x816))+(((-1.0)*r00*x825))+(((-1.0)*r02*x826))+(((-1.0)*r00*x828))+((r01*x827))+(((-1.0)*r01*x824)));
evalcond[4]=((((-0.0159)*x816))+(((-1.0)*r22*x833))+((r21*x832))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x831))+(((0.3466)*x822))+((r21*x835))+(((-1.0)*r21*x830))+(((-1.0)*r20*x834))+(((-1.0)*r20*x829)));
evalcond[5]=((0.03)+(((-1.0)*r00*x829))+(((-1.0)*(1.0)*px))+(((0.3466)*x816))+((r01*x835))+(((-1.0)*r00*x834))+(((-1.0)*r01*x830))+(((-1.0)*r02*x833))+(((0.0159)*x822))+((r01*x832))+(((-1.0)*r00*x831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x836=((1.0)*cj17);
IkReal x837=(cj15*cj16);
CheckValue<IkReal> x838=IKPowWithIntegerCheck(sj14,-1);
if(!x838.valid){
continue;
}
CheckValue<IkReal> x839=IKPowWithIntegerCheck(cj14,-1);
if(!x839.valid){
continue;
}
if( IKabs(((x838.value)*(((((-1.0)*r01*sj17*x837))+((cj15*r02*sj16))+(((-1.0)*r01*sj15*x836))+(((-1.0)*r00*sj15*sj17))+((cj17*r00*x837)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x839.value)*((((cj16*r22))+(((-1.0)*r20*sj16*x836))+((r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x838.value)*(((((-1.0)*r01*sj17*x837))+((cj15*r02*sj16))+(((-1.0)*r01*sj15*x836))+(((-1.0)*r00*sj15*sj17))+((cj17*r00*x837))))))+IKsqr(((x839.value)*((((cj16*r22))+(((-1.0)*r20*sj16*x836))+((r21*sj16*sj17))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x838.value)*(((((-1.0)*r01*sj17*x837))+((cj15*r02*sj16))+(((-1.0)*r01*sj15*x836))+(((-1.0)*r00*sj15*sj17))+((cj17*r00*x837))))), ((x839.value)*((((cj16*r22))+(((-1.0)*r20*sj16*x836))+((r21*sj16*sj17))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x840=IKcos(j13);
IkReal x841=(cj14*x840);
IkReal x842=((1.0)*cj16);
IkReal x843=(cj17*sj16);
IkReal x844=((1.0)*sj16*sj17);
IkReal x845=IKsin(j13);
IkReal x846=((1.0)*x845);
IkReal x847=(sj14*x845);
IkReal x848=(cj17*sj15);
IkReal x849=(sj15*sj17);
IkReal x850=((1.0)*cj15*sj16);
IkReal x851=(cj15*cj16*sj17);
IkReal x852=((1.0)*cj15*cj16*cj17);
IkReal x853=((1.0)*x840);
IkReal x854=((1.0)*cj15*cj17);
IkReal x855=((1.0)*cj15*sj17);
IkReal x856=((1.0)*sj15*sj16);
IkReal x857=(cj16*sj15*sj17);
IkReal x858=((1.0)*cj16*cj17*sj15);
IkReal x859=((0.01822)*cj17);
IkReal x860=((0.3549)*cj17);
IkReal x861=((0.3549)*sj17);
IkReal x862=((0.01822)*sj17);
IkReal x863=((0.0136)*sj16);
IkReal x864=((0.0136)*cj16*cj17);
IkReal x865=((0.0136)*cj16*sj17);
evalcond[0]=(x841+(((-1.0)*r22*x842))+((r20*x843))+(((-1.0)*r21*x844)));
evalcond[1]=((((-1.0)*cj14*x846))+(((-1.0)*r01*x844))+(((-1.0)*r02*x842))+((r00*x843)));
evalcond[2]=(((r01*x851))+(((-1.0)*r00*x852))+x847+((r01*x848))+((r00*x849))+(((-1.0)*r02*x850)));
evalcond[3]=((((-1.0)*r22*x850))+((r21*x851))+(((-1.0)*sj14*x853))+((r21*x848))+(((-1.0)*r20*x852))+((r20*x849)));
evalcond[4]=((((-1.0)*r20*x858))+((r21*x857))+(((-1.0)*r21*x854))+(((-1.0)*x846))+(((-1.0)*r22*x856))+(((-1.0)*r20*x855)));
evalcond[5]=((((-1.0)*r01*x854))+(((-1.0)*r02*x856))+(((-1.0)*r00*x855))+(((-1.0)*x853))+(((-1.0)*r00*x858))+((r01*x857)));
evalcond[6]=((((-1.0)*r20*x864))+(((-1.0)*r20*x861))+(((-1.0)*(1.0)*pz))+(((0.3466)*x845))+(((-1.0)*r20*x859))+(((-1.0)*r22*x863))+(((-1.0)*r21*x860))+(((0.0159)*sj14*x840))+((r21*x862))+((r21*x865))+(((0.0005)*x841)));
evalcond[7]=((0.03)+(((0.3466)*x840))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x861))+(((-0.0005)*cj14*x845))+(((-1.0)*r01*x860))+((r01*x862))+((r01*x865))+(((-1.0)*r00*x859))+(((-1.0)*r00*x864))+(((-0.0159)*x847))+(((-1.0)*r02*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x866=((1.0)*cj15);
IkReal x867=((1.0)*sj16);
IkReal x868=(cj16*sj15);
IkReal x869=(r21*sj17);
CheckValue<IkReal> x870=IKPowWithIntegerCheck(cj14,-1);
if(!x870.valid){
continue;
}
if( IKabs(((((-1.0)*r22*sj15*x867))+((x868*x869))+(((-1.0)*cj17*r20*x868))+(((-1.0)*cj17*r21*x866))+(((-1.0)*r20*sj17*x866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x870.value)*((((cj16*r22))+((sj16*x869))+(((-1.0)*cj17*r20*x867)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*sj15*x867))+((x868*x869))+(((-1.0)*cj17*r20*x868))+(((-1.0)*cj17*r21*x866))+(((-1.0)*r20*sj17*x866))))+IKsqr(((x870.value)*((((cj16*r22))+((sj16*x869))+(((-1.0)*cj17*r20*x867))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r22*sj15*x867))+((x868*x869))+(((-1.0)*cj17*r20*x868))+(((-1.0)*cj17*r21*x866))+(((-1.0)*r20*sj17*x866))), ((x870.value)*((((cj16*r22))+((sj16*x869))+(((-1.0)*cj17*r20*x867))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x871=IKcos(j13);
IkReal x872=(cj14*x871);
IkReal x873=((1.0)*cj16);
IkReal x874=(cj17*sj16);
IkReal x875=((1.0)*sj16*sj17);
IkReal x876=IKsin(j13);
IkReal x877=((1.0)*x876);
IkReal x878=(sj14*x876);
IkReal x879=(cj17*sj15);
IkReal x880=(sj15*sj17);
IkReal x881=((1.0)*cj15*sj16);
IkReal x882=(cj15*cj16*sj17);
IkReal x883=((1.0)*cj15*cj16*cj17);
IkReal x884=((1.0)*x871);
IkReal x885=((1.0)*cj15*cj17);
IkReal x886=((1.0)*cj15*sj17);
IkReal x887=((1.0)*sj15*sj16);
IkReal x888=(cj16*sj15*sj17);
IkReal x889=((1.0)*cj16*cj17*sj15);
IkReal x890=((0.01822)*cj17);
IkReal x891=((0.3549)*cj17);
IkReal x892=((0.3549)*sj17);
IkReal x893=((0.01822)*sj17);
IkReal x894=((0.0136)*sj16);
IkReal x895=((0.0136)*cj16*cj17);
IkReal x896=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x874))+(((-1.0)*r21*x875))+(((-1.0)*r22*x873))+x872);
evalcond[1]=((((-1.0)*r02*x873))+((r00*x874))+(((-1.0)*cj14*x877))+(((-1.0)*r01*x875)));
evalcond[2]=(((r01*x879))+(((-1.0)*r00*x883))+((r01*x882))+((r00*x880))+x878+(((-1.0)*r02*x881)));
evalcond[3]=((((-1.0)*sj14*x884))+((r21*x879))+((r20*x880))+(((-1.0)*r20*x883))+((r21*x882))+(((-1.0)*r22*x881)));
evalcond[4]=(((r21*x888))+(((-1.0)*x877))+(((-1.0)*r20*x889))+(((-1.0)*r21*x885))+(((-1.0)*r22*x887))+(((-1.0)*r20*x886)));
evalcond[5]=((((-1.0)*x884))+(((-1.0)*r01*x885))+(((-1.0)*r02*x887))+(((-1.0)*r00*x886))+((r01*x888))+(((-1.0)*r00*x889)));
evalcond[6]=((((0.0005)*x872))+((r21*x893))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x892))+(((-1.0)*r20*x890))+(((0.3466)*x876))+(((-1.0)*r21*x891))+(((0.0159)*sj14*x871))+((r21*x896))+(((-1.0)*r20*x895))+(((-1.0)*r22*x894)));
evalcond[7]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x895))+(((-1.0)*r00*x890))+(((-1.0)*r01*x891))+((r01*x893))+(((-1.0)*r02*x894))+(((-0.0159)*x878))+((r01*x896))+(((-0.0005)*cj14*x876))+(((-1.0)*r00*x892))+(((0.3466)*x871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x897=(cj17*sj16);
IkReal x898=(sj16*sj17);
CheckValue<IkReal> x899=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x899.valid){
continue;
}
CheckValue<IkReal> x900 = IKatan2WithCheck(IkReal(((((-1.0)*(1.0)*cj16*r02))+(((-1.0)*r01*x898))+((r00*x897)))),IkReal((((r21*x898))+((cj16*r22))+(((-1.0)*r20*x897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x900.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x899.value)))+(x900.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x901=IKcos(j13);
IkReal x902=(cj14*x901);
IkReal x903=((1.0)*cj16);
IkReal x904=(cj17*sj16);
IkReal x905=((1.0)*sj16*sj17);
IkReal x906=IKsin(j13);
IkReal x907=((1.0)*x906);
IkReal x908=(sj14*x906);
IkReal x909=(cj17*sj15);
IkReal x910=(sj15*sj17);
IkReal x911=((1.0)*cj15*sj16);
IkReal x912=(cj15*cj16*sj17);
IkReal x913=((1.0)*cj15*cj16*cj17);
IkReal x914=((1.0)*x901);
IkReal x915=((1.0)*cj15*cj17);
IkReal x916=((1.0)*cj15*sj17);
IkReal x917=((1.0)*sj15*sj16);
IkReal x918=(cj16*sj15*sj17);
IkReal x919=((1.0)*cj16*cj17*sj15);
IkReal x920=((0.01822)*cj17);
IkReal x921=((0.3549)*cj17);
IkReal x922=((0.3549)*sj17);
IkReal x923=((0.01822)*sj17);
IkReal x924=((0.0136)*sj16);
IkReal x925=((0.0136)*cj16*cj17);
IkReal x926=((0.0136)*cj16*sj17);
evalcond[0]=(x902+(((-1.0)*r22*x903))+((r20*x904))+(((-1.0)*r21*x905)));
evalcond[1]=((((-1.0)*r02*x903))+((r00*x904))+(((-1.0)*r01*x905))+(((-1.0)*cj14*x907)));
evalcond[2]=(((r01*x912))+(((-1.0)*r00*x913))+(((-1.0)*r02*x911))+((r01*x909))+x908+((r00*x910)));
evalcond[3]=((((-1.0)*sj14*x914))+(((-1.0)*r20*x913))+((r20*x910))+(((-1.0)*r22*x911))+((r21*x912))+((r21*x909)));
evalcond[4]=((((-1.0)*r20*x916))+(((-1.0)*r22*x917))+(((-1.0)*r20*x919))+(((-1.0)*x907))+(((-1.0)*r21*x915))+((r21*x918)));
evalcond[5]=((((-1.0)*x914))+(((-1.0)*r00*x919))+((r01*x918))+(((-1.0)*r02*x917))+(((-1.0)*r01*x915))+(((-1.0)*r00*x916)));
evalcond[6]=((((0.3466)*x906))+((r21*x923))+(((-1.0)*r20*x920))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x921))+(((-1.0)*r22*x924))+(((-1.0)*r20*x922))+(((0.0159)*sj14*x901))+(((-1.0)*r20*x925))+(((0.0005)*x902))+((r21*x926)));
evalcond[7]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x921))+((r01*x923))+(((0.3466)*x901))+(((-0.0005)*cj14*x906))+(((-1.0)*r00*x920))+((r01*x926))+(((-1.0)*r02*x924))+(((-1.0)*r00*x922))+(((-1.0)*r00*x925))+(((-0.0159)*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x927=((1.0)*r12);
IkReal x928=(r11*sj17);
IkReal x929=(cj15*cj16);
if( IKabs(((((-1.0)*cj16*x927))+(((-1.0)*sj16*x928))+((sj16*((cj17*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj15*sj16*x927))+((r10*sj15*sj17))+((cj17*r11*sj15))+(((-1.0)*cj17*r10*x929))+((x928*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x927))+(((-1.0)*sj16*x928))+((sj16*((cj17*r10))))))+IKsqr(((((-1.0)*cj15*sj16*x927))+((r10*sj15*sj17))+((cj17*r11*sj15))+(((-1.0)*cj17*r10*x929))+((x928*x929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*cj16*x927))+(((-1.0)*sj16*x928))+((sj16*((cj17*r10))))), ((((-1.0)*cj15*sj16*x927))+((r10*sj15*sj17))+((cj17*r11*sj15))+(((-1.0)*cj17*r10*x929))+((x928*x929))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x930=((1.0)*r12);
IkReal x931=(cj17*r10);
IkReal x932=IKsin(j14);
IkReal x933=(r11*sj17);
IkReal x934=(cj17*r11);
IkReal x935=(r10*sj17);
IkReal x936=IKcos(j14);
IkReal x937=(cj15*cj16);
IkReal x938=((0.0136)*cj16);
evalcond[0]=((((-1.0)*x932))+(((-1.0)*sj16*x933))+(((-1.0)*cj16*x930))+((sj16*x931)));
evalcond[1]=((((-1.0)*cj15*sj16*x930))+(((-1.0)*x936))+((x933*x937))+(((-1.0)*cj17*r10*x937))+((sj15*x935))+((sj15*x934)));
evalcond[2]=((-0.0104)+(((-1.0)*(1.0)*py))+(((-1.0)*(0.0136)*r12*sj16))+(((-0.3549)*x934))+(((-0.01822)*x931))+((x933*x938))+(((-0.0005)*x932))+(((0.0159)*x936))+(((-0.3549)*x935))+(((-1.0)*x931*x938))+(((0.01822)*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x939=(sj16*sj17);
IkReal x940=((1.0)*cj17*sj16);
j13eval[0]=cj14;
j13eval[1]=IKsign(cj14);
j13eval[2]=((IKabs((((cj16*r22))+((r21*x939))+(((-1.0)*r20*x940)))))+(IKabs(((((-1.0)*r00*x940))+((r01*x939))+((cj16*r02))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[2];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=sj14;
j13eval[1]=cj14;
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x941=(sj16*sj17);
IkReal x942=((1.0)*cj17*sj16);
if( IKabs(((((-1.0)*r00*x942))+((r01*x941))+((cj16*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x941))+((cj16*r22))+(((-1.0)*r20*x942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x942))+((r01*x941))+((cj16*r02))))+IKsqr((((r21*x941))+((cj16*r22))+(((-1.0)*r20*x942))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r00*x942))+((r01*x941))+((cj16*r02))), (((r21*x941))+((cj16*r22))+(((-1.0)*r20*x942))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x943=IKcos(j13);
IkReal x944=((1.0)*cj16);
IkReal x945=(cj17*sj16);
IkReal x946=((1.0)*sj16*sj17);
IkReal x947=IKsin(j13);
IkReal x948=((1.0)*cj15*cj17);
IkReal x949=((1.0)*cj15*sj17);
IkReal x950=((1.0)*sj15*sj16);
IkReal x951=(cj16*sj15*sj17);
IkReal x952=((1.0)*cj16*cj17*sj15);
IkReal x953=((0.01822)*cj17);
IkReal x954=((0.3549)*cj17);
IkReal x955=((0.3549)*sj17);
IkReal x956=((0.01822)*sj17);
IkReal x957=((0.0136)*sj16);
IkReal x958=((0.0136)*cj16*cj17);
IkReal x959=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r21*x946))+(((-1.0)*r22*x944))+((r20*x945))+x943);
evalcond[1]=(((r00*x945))+(((-1.0)*r02*x944))+(((-1.0)*r01*x946))+x947);
evalcond[2]=((((-1.0)*r02*x950))+(((-1.0)*r00*x952))+((r01*x951))+(((-1.0)*r00*x949))+(((-1.0)*r01*x948))+x943);
evalcond[3]=((((-1.0)*r22*x950))+((r21*x951))+(((-1.0)*r20*x952))+(((-1.0)*r21*x948))+(((-1.0)*r20*x949))+(((-1.0)*x947)));
evalcond[4]=((((-1.0)*r21*x954))+(((-1.0)*r20*x958))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x955))+(((-1.0)*r22*x957))+(((0.0005)*x943))+(((0.3466)*x947))+(((-1.0)*r20*x953))+((r21*x959))+((r21*x956)));
evalcond[5]=((-0.03)+(((-1.0)*(1.0)*px))+(((-0.3466)*x943))+(((0.0005)*x947))+((r01*x959))+((r01*x956))+(((-1.0)*r02*x957))+(((-1.0)*r00*x958))+(((-1.0)*r00*x953))+(((-1.0)*r00*x955))+(((-1.0)*r01*x954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x960=((1.0)*cj16);
IkReal x961=(cj17*sj16);
IkReal x962=((1.0)*sj16*sj17);
if( IKabs(((((-1.0)*r02*x960))+((r00*x961))+(((-1.0)*r01*x962)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x962))+((r20*x961))+(((-1.0)*r22*x960)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x960))+((r00*x961))+(((-1.0)*r01*x962))))+IKsqr(((((-1.0)*r21*x962))+((r20*x961))+(((-1.0)*r22*x960))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r02*x960))+((r00*x961))+(((-1.0)*r01*x962))), ((((-1.0)*r21*x962))+((r20*x961))+(((-1.0)*r22*x960))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x963=((1.0)*cj16);
IkReal x964=(cj17*sj16);
IkReal x965=IKcos(j13);
IkReal x966=((1.0)*sj16*sj17);
IkReal x967=IKsin(j13);
IkReal x968=((-1.0)*x967);
IkReal x969=((1.0)*cj15*cj17);
IkReal x970=((1.0)*cj15*sj17);
IkReal x971=((1.0)*sj15*sj16);
IkReal x972=(cj16*sj15*sj17);
IkReal x973=((1.0)*cj16*cj17*sj15);
IkReal x974=((0.01822)*cj17);
IkReal x975=((0.3549)*cj17);
IkReal x976=((0.3549)*sj17);
IkReal x977=((0.01822)*sj17);
IkReal x978=((0.0136)*sj16);
IkReal x979=((0.0136)*cj16*cj17);
IkReal x980=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r22*x963))+(((-1.0)*x965))+(((-1.0)*r21*x966))+((r20*x964)));
evalcond[1]=((((-1.0)*r01*x966))+(((-1.0)*r02*x963))+((r00*x964))+x968);
evalcond[2]=(((r01*x972))+(((-1.0)*r00*x970))+(((-1.0)*r00*x973))+x965+(((-1.0)*r01*x969))+(((-1.0)*r02*x971)));
evalcond[3]=((((-1.0)*r20*x973))+(((-1.0)*r21*x969))+((r21*x972))+(((-1.0)*r22*x971))+x968+(((-1.0)*r20*x970)));
evalcond[4]=((((-1.0)*r20*x976))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x979))+(((0.3466)*x967))+(((-1.0)*r21*x975))+(((-1.0)*r22*x978))+(((-0.0005)*x965))+((r21*x980))+((r21*x977))+(((-1.0)*r20*x974)));
evalcond[5]=((-0.03)+(((-1.0)*r00*x979))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x974))+(((-0.0005)*x967))+(((-1.0)*r00*x976))+((r01*x980))+(((-1.0)*r02*x978))+((r01*x977))+(((-1.0)*r01*x975))+(((-0.3466)*x965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x981=(cj17*r01);
IkReal x982=(r00*sj17);
IkReal x983=((1.0)*cj15);
IkReal x984=(r02*sj16);
IkReal x985=(cj16*r01*sj17);
IkReal x986=(cj16*cj17*r00);
if( IKabs(((((-1.0)*x983*x984))+(((-1.0)*x983*x986))+((cj15*x985))+((sj15*x981))+((sj15*x982)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*x982))+((sj15*x984))+((sj15*x986))+(((-1.0)*sj15*x985))+((cj15*x981)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x983*x984))+(((-1.0)*x983*x986))+((cj15*x985))+((sj15*x981))+((sj15*x982))))+IKsqr((((cj15*x982))+((sj15*x984))+((sj15*x986))+(((-1.0)*sj15*x985))+((cj15*x981))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*x983*x984))+(((-1.0)*x983*x986))+((cj15*x985))+((sj15*x981))+((sj15*x982))), (((cj15*x982))+((sj15*x984))+((sj15*x986))+(((-1.0)*sj15*x985))+((cj15*x981))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x987=(cj17*sj15);
IkReal x988=(sj15*sj17);
IkReal x989=IKcos(j13);
IkReal x990=((1.0)*cj15*sj16);
IkReal x991=(cj15*cj16*sj17);
IkReal x992=((1.0)*cj15*cj16*cj17);
IkReal x993=((1.0)*cj15*cj17);
IkReal x994=((1.0)*cj15*sj17);
IkReal x995=((1.0)*sj15*sj16);
IkReal x996=(cj16*sj15*sj17);
IkReal x997=((1.0)*cj16*cj17*sj15);
IkReal x998=IKsin(j13);
IkReal x999=((-1.0)*x998);
IkReal x1000=((0.01822)*cj17);
IkReal x1001=((0.3549)*cj17);
IkReal x1002=((0.3549)*sj17);
IkReal x1003=((0.01822)*sj17);
IkReal x1004=((0.0136)*sj16);
IkReal x1005=((0.0136)*cj16*cj17);
IkReal x1006=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x988))+((r21*x987))+(((-1.0)*r22*x990))+(((-1.0)*x989))+(((-1.0)*r20*x992))+((r21*x991)));
evalcond[1]=((((-1.0)*r00*x994))+(((-1.0)*r01*x993))+(((-1.0)*r00*x997))+(((-1.0)*r02*x995))+x989+((r01*x996)));
evalcond[2]=(((r01*x987))+(((-1.0)*r02*x990))+((r01*x991))+(((-1.0)*r00*x992))+((r00*x988))+x999);
evalcond[3]=((((-1.0)*r20*x997))+(((-1.0)*r20*x994))+(((-1.0)*r22*x995))+((r21*x996))+x999+(((-1.0)*r21*x993)));
evalcond[4]=((((-1.0)*r20*x1000))+(((-1.0)*r21*x1001))+(((-1.0)*(1.0)*pz))+((r21*x1003))+(((0.0159)*x989))+(((-1.0)*r20*x1005))+((r21*x1006))+(((0.3466)*x998))+(((-1.0)*r22*x1004))+(((-1.0)*r20*x1002)));
evalcond[5]=((-0.03)+(((-0.3466)*x989))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1005))+(((-1.0)*r02*x1004))+((r01*x1006))+(((-1.0)*r01*x1001))+((r01*x1003))+(((-1.0)*r00*x1002))+(((-1.0)*r00*x1000))+(((0.0159)*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1007=(r02*sj16);
IkReal x1008=((1.0)*sj15);
IkReal x1009=(cj17*r01);
IkReal x1010=(r00*sj17);
IkReal x1011=(cj16*cj17*r00);
IkReal x1012=(cj16*r01*sj17);
if( IKabs(((((-1.0)*cj15*x1012))+(((-1.0)*x1008*x1010))+((cj15*x1007))+((cj15*x1011))+(((-1.0)*x1008*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1008*x1012))+((cj15*x1009))+((cj15*x1010))+((sj15*x1007))+((sj15*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*x1012))+(((-1.0)*x1008*x1010))+((cj15*x1007))+((cj15*x1011))+(((-1.0)*x1008*x1009))))+IKsqr(((((-1.0)*x1008*x1012))+((cj15*x1009))+((cj15*x1010))+((sj15*x1007))+((sj15*x1011))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*cj15*x1012))+(((-1.0)*x1008*x1010))+((cj15*x1007))+((cj15*x1011))+(((-1.0)*x1008*x1009))), ((((-1.0)*x1008*x1012))+((cj15*x1009))+((cj15*x1010))+((sj15*x1007))+((sj15*x1011))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[6];
IkReal x1013=IKcos(j13);
IkReal x1014=(cj17*sj15);
IkReal x1015=(sj15*sj17);
IkReal x1016=((1.0)*cj15*sj16);
IkReal x1017=(cj15*cj16*sj17);
IkReal x1018=((1.0)*cj15*cj16*cj17);
IkReal x1019=IKsin(j13);
IkReal x1020=((1.0)*cj15*cj17);
IkReal x1021=((1.0)*cj15*sj17);
IkReal x1022=((1.0)*sj15*sj16);
IkReal x1023=(cj16*sj15*sj17);
IkReal x1024=((1.0)*cj16*cj17*sj15);
IkReal x1025=((0.01822)*cj17);
IkReal x1026=((0.3549)*cj17);
IkReal x1027=((0.3549)*sj17);
IkReal x1028=((0.01822)*sj17);
IkReal x1029=((0.0136)*sj16);
IkReal x1030=((0.0136)*cj16*cj17);
IkReal x1031=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x1015))+x1013+((r21*x1017))+(((-1.0)*r20*x1018))+(((-1.0)*r22*x1016))+((r21*x1014)));
evalcond[1]=(((r01*x1014))+(((-1.0)*r00*x1018))+x1019+(((-1.0)*r02*x1016))+((r01*x1017))+((r00*x1015)));
evalcond[2]=((((-1.0)*r02*x1022))+(((-1.0)*r00*x1024))+((r01*x1023))+x1013+(((-1.0)*r00*x1021))+(((-1.0)*r01*x1020)));
evalcond[3]=((((-1.0)*x1019))+(((-1.0)*r20*x1024))+(((-1.0)*r21*x1020))+(((-1.0)*r20*x1021))+((r21*x1023))+(((-1.0)*r22*x1022)));
evalcond[4]=((((-1.0)*r20*x1030))+((r21*x1028))+(((-1.0)*(1.0)*pz))+(((-1.0)*r22*x1029))+(((-1.0)*r21*x1026))+(((-1.0)*r20*x1027))+((r21*x1031))+(((0.3466)*x1019))+(((-1.0)*r20*x1025))+(((-0.0159)*x1013)));
evalcond[5]=((-0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1025))+(((-1.0)*r01*x1026))+(((-1.0)*r00*x1027))+(((-1.0)*r02*x1029))+((r01*x1031))+(((-0.3466)*x1013))+((r01*x1028))+(((-0.0159)*x1019))+(((-1.0)*r00*x1030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1032=((1.0)*sj16);
IkReal x1033=(cj15*cj16);
CheckValue<IkReal> x1034=IKPowWithIntegerCheck(sj14,-1);
if(!x1034.valid){
continue;
}
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(cj14,-1);
if(!x1035.valid){
continue;
}
if( IKabs(((x1034.value)*(((((-1.0)*cj17*r00*x1033))+((cj17*r01*sj15))+(((-1.0)*cj15*r02*x1032))+((r01*sj17*x1033))+((r00*sj15*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1035.value)*((((cj16*r22))+(((-1.0)*cj17*r20*x1032))+((r21*sj16*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1034.value)*(((((-1.0)*cj17*r00*x1033))+((cj17*r01*sj15))+(((-1.0)*cj15*r02*x1032))+((r01*sj17*x1033))+((r00*sj15*sj17))))))+IKsqr(((x1035.value)*((((cj16*r22))+(((-1.0)*cj17*r20*x1032))+((r21*sj16*sj17))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1034.value)*(((((-1.0)*cj17*r00*x1033))+((cj17*r01*sj15))+(((-1.0)*cj15*r02*x1032))+((r01*sj17*x1033))+((r00*sj15*sj17))))), ((x1035.value)*((((cj16*r22))+(((-1.0)*cj17*r20*x1032))+((r21*sj16*sj17))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x1036=IKcos(j13);
IkReal x1037=(cj14*x1036);
IkReal x1038=((1.0)*cj16);
IkReal x1039=(cj17*sj16);
IkReal x1040=((1.0)*sj16*sj17);
IkReal x1041=IKsin(j13);
IkReal x1042=(cj14*x1041);
IkReal x1043=((1.0)*cj15*cj17);
IkReal x1044=((1.0)*cj15*sj17);
IkReal x1045=((1.0)*sj15*sj16);
IkReal x1046=(cj16*sj15*sj17);
IkReal x1047=((1.0)*cj16*cj17*sj15);
IkReal x1048=(cj17*sj15);
IkReal x1049=(sj15*sj17);
IkReal x1050=((1.0)*cj15*sj16);
IkReal x1051=(cj15*cj16*sj17);
IkReal x1052=((1.0)*cj15*cj16*cj17);
IkReal x1053=((1.0)*x1041);
IkReal x1054=((0.01822)*cj17);
IkReal x1055=((0.3549)*cj17);
IkReal x1056=((0.3549)*sj17);
IkReal x1057=((0.01822)*sj17);
IkReal x1058=((0.0136)*sj16);
IkReal x1059=((0.0159)*sj14);
IkReal x1060=((0.0136)*cj16*cj17);
IkReal x1061=((0.0136)*cj16*sj17);
evalcond[0]=(((r20*x1039))+(((-1.0)*r22*x1038))+(((-1.0)*r21*x1040))+x1037);
evalcond[1]=((((-1.0)*r01*x1040))+x1042+(((-1.0)*r02*x1038))+((r00*x1039)));
evalcond[2]=(x1036+(((-1.0)*r00*x1047))+(((-1.0)*r00*x1044))+((r01*x1046))+(((-1.0)*r01*x1043))+(((-1.0)*r02*x1045)));
evalcond[3]=((((-1.0)*r20*x1052))+(((-1.0)*sj14*x1036))+((r20*x1049))+(((-1.0)*r22*x1050))+((r21*x1048))+((r21*x1051)));
evalcond[4]=(((r00*x1049))+((r01*x1048))+((r01*x1051))+(((-1.0)*r00*x1052))+(((-1.0)*sj14*x1053))+(((-1.0)*r02*x1050)));
evalcond[5]=((((-1.0)*r21*x1043))+(((-1.0)*r20*x1047))+(((-1.0)*r22*x1045))+(((-1.0)*x1053))+(((-1.0)*r20*x1044))+((r21*x1046)));
evalcond[6]=(((x1036*x1059))+(((-1.0)*r20*x1054))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x1055))+((r21*x1061))+(((0.3466)*x1041))+(((-1.0)*r20*x1056))+((r21*x1057))+(((0.0005)*x1037))+(((-1.0)*r22*x1058))+(((-1.0)*r20*x1060)));
evalcond[7]=((-0.03)+(((-1.0)*r00*x1060))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1055))+(((0.0005)*x1042))+((r01*x1057))+(((-0.3466)*x1036))+(((-1.0)*r00*x1056))+(((-1.0)*r00*x1054))+(((-1.0)*r02*x1058))+((x1041*x1059))+((r01*x1061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1062=(cj17*r00);
IkReal x1063=(cj16*sj15);
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(cj14,-1);
if(!x1064.valid){
continue;
}
if( IKabs(((x1064.value)*(((((-1.0)*sj16*x1062))+((sj16*((r01*sj17))))+((cj16*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*sj17*x1063))+((cj15*r00*sj17))+((r02*sj15*sj16))+((cj15*cj17*r01))+((x1062*x1063)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1064.value)*(((((-1.0)*sj16*x1062))+((sj16*((r01*sj17))))+((cj16*r02))))))+IKsqr(((((-1.0)*r01*sj17*x1063))+((cj15*r00*sj17))+((r02*sj15*sj16))+((cj15*cj17*r01))+((x1062*x1063))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((x1064.value)*(((((-1.0)*sj16*x1062))+((sj16*((r01*sj17))))+((cj16*r02))))), ((((-1.0)*r01*sj17*x1063))+((cj15*r00*sj17))+((r02*sj15*sj16))+((cj15*cj17*r01))+((x1062*x1063))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x1065=IKcos(j13);
IkReal x1066=(cj14*x1065);
IkReal x1067=((1.0)*cj16);
IkReal x1068=(cj17*sj16);
IkReal x1069=((1.0)*sj16*sj17);
IkReal x1070=IKsin(j13);
IkReal x1071=(cj14*x1070);
IkReal x1072=((1.0)*cj15*cj17);
IkReal x1073=((1.0)*cj15*sj17);
IkReal x1074=((1.0)*sj15*sj16);
IkReal x1075=(cj16*sj15*sj17);
IkReal x1076=((1.0)*cj16*cj17*sj15);
IkReal x1077=(cj17*sj15);
IkReal x1078=(sj15*sj17);
IkReal x1079=((1.0)*cj15*sj16);
IkReal x1080=(cj15*cj16*sj17);
IkReal x1081=((1.0)*cj15*cj16*cj17);
IkReal x1082=((1.0)*x1070);
IkReal x1083=((0.01822)*cj17);
IkReal x1084=((0.3549)*cj17);
IkReal x1085=((0.3549)*sj17);
IkReal x1086=((0.01822)*sj17);
IkReal x1087=((0.0136)*sj16);
IkReal x1088=((0.0159)*sj14);
IkReal x1089=((0.0136)*cj16*cj17);
IkReal x1090=((0.0136)*cj16*sj17);
evalcond[0]=(x1066+(((-1.0)*r22*x1067))+((r20*x1068))+(((-1.0)*r21*x1069)));
evalcond[1]=(((r00*x1068))+x1071+(((-1.0)*r02*x1067))+(((-1.0)*r01*x1069)));
evalcond[2]=(x1065+(((-1.0)*r00*x1073))+(((-1.0)*r01*x1072))+(((-1.0)*r00*x1076))+((r01*x1075))+(((-1.0)*r02*x1074)));
evalcond[3]=(((r21*x1080))+((r20*x1078))+(((-1.0)*sj14*x1065))+(((-1.0)*r20*x1081))+(((-1.0)*r22*x1079))+((r21*x1077)));
evalcond[4]=((((-1.0)*sj14*x1082))+(((-1.0)*r02*x1079))+((r01*x1080))+((r00*x1078))+(((-1.0)*r00*x1081))+((r01*x1077)));
evalcond[5]=((((-1.0)*r20*x1073))+(((-1.0)*x1082))+((r21*x1075))+(((-1.0)*r20*x1076))+(((-1.0)*r22*x1074))+(((-1.0)*r21*x1072)));
evalcond[6]=((((-1.0)*r22*x1087))+(((-1.0)*(1.0)*pz))+(((0.0005)*x1066))+(((-1.0)*r20*x1089))+((x1065*x1088))+(((-1.0)*r21*x1084))+((r21*x1090))+(((-1.0)*r20*x1083))+(((0.3466)*x1070))+(((-1.0)*r20*x1085))+((r21*x1086)));
evalcond[7]=((-0.03)+(((-1.0)*r00*x1085))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1083))+((x1070*x1088))+(((0.0005)*x1071))+(((-1.0)*r01*x1084))+(((-0.3466)*x1065))+(((-1.0)*r00*x1089))+((r01*x1090))+((r01*x1086))+(((-1.0)*r02*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1091=(sj16*sj17);
IkReal x1092=((1.0)*cj17*sj16);
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(IKsign(cj14),-1);
if(!x1093.valid){
continue;
}
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal((((r01*x1091))+(((-1.0)*r00*x1092))+((cj16*r02)))),IkReal(((((-1.0)*r20*x1092))+((cj16*r22))+((r21*x1091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1093.value)))+(x1094.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[8];
IkReal x1095=IKcos(j13);
IkReal x1096=(cj14*x1095);
IkReal x1097=((1.0)*cj16);
IkReal x1098=(cj17*sj16);
IkReal x1099=((1.0)*sj16*sj17);
IkReal x1100=IKsin(j13);
IkReal x1101=(cj14*x1100);
IkReal x1102=((1.0)*cj15*cj17);
IkReal x1103=((1.0)*cj15*sj17);
IkReal x1104=((1.0)*sj15*sj16);
IkReal x1105=(cj16*sj15*sj17);
IkReal x1106=((1.0)*cj16*cj17*sj15);
IkReal x1107=(cj17*sj15);
IkReal x1108=(sj15*sj17);
IkReal x1109=((1.0)*cj15*sj16);
IkReal x1110=(cj15*cj16*sj17);
IkReal x1111=((1.0)*cj15*cj16*cj17);
IkReal x1112=((1.0)*x1100);
IkReal x1113=((0.01822)*cj17);
IkReal x1114=((0.3549)*cj17);
IkReal x1115=((0.3549)*sj17);
IkReal x1116=((0.01822)*sj17);
IkReal x1117=((0.0136)*sj16);
IkReal x1118=((0.0159)*sj14);
IkReal x1119=((0.0136)*cj16*cj17);
IkReal x1120=((0.0136)*cj16*sj17);
evalcond[0]=(x1096+((r20*x1098))+(((-1.0)*r21*x1099))+(((-1.0)*r22*x1097)));
evalcond[1]=(((r00*x1098))+x1101+(((-1.0)*r02*x1097))+(((-1.0)*r01*x1099)));
evalcond[2]=((((-1.0)*r00*x1106))+(((-1.0)*r01*x1102))+(((-1.0)*r00*x1103))+((r01*x1105))+x1095+(((-1.0)*r02*x1104)));
evalcond[3]=(((r21*x1110))+(((-1.0)*r20*x1111))+(((-1.0)*sj14*x1095))+(((-1.0)*r22*x1109))+((r21*x1107))+((r20*x1108)));
evalcond[4]=(((r01*x1107))+(((-1.0)*r02*x1109))+(((-1.0)*r00*x1111))+(((-1.0)*sj14*x1112))+((r00*x1108))+((r01*x1110)));
evalcond[5]=((((-1.0)*r20*x1103))+((r21*x1105))+(((-1.0)*r21*x1102))+(((-1.0)*x1112))+(((-1.0)*r22*x1104))+(((-1.0)*r20*x1106)));
evalcond[6]=((((-1.0)*r20*x1119))+(((-1.0)*r20*x1115))+(((-1.0)*(1.0)*pz))+((x1095*x1118))+((r21*x1116))+(((-1.0)*r20*x1113))+(((-1.0)*r22*x1117))+(((0.0005)*x1096))+(((-1.0)*r21*x1114))+(((0.3466)*x1100))+((r21*x1120)));
evalcond[7]=((-0.03)+((x1100*x1118))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1114))+(((-1.0)*r00*x1113))+((r01*x1116))+(((-1.0)*r02*x1117))+(((-1.0)*r00*x1119))+(((-0.3466)*x1095))+((r01*x1120))+(((0.0005)*x1101))+(((-1.0)*r00*x1115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1121=((1.0)*cj15*cj17);
IkReal x1122=((1.0)*cj15*sj17);
IkReal x1123=((1.0)*sj15*sj16);
IkReal x1124=(cj16*sj15*sj17);
IkReal x1125=((1.0)*cj16*cj17*sj15);
CheckValue<IkReal> x1126=IKPowWithIntegerCheck(sj12,-1);
if(!x1126.valid){
continue;
}
if( IKabs(((((-1.0)*r22*x1123))+(((-1.0)*r20*x1122))+(((-1.0)*r21*x1121))+(((-1.0)*r20*x1125))+((r21*x1124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1126.value)*((((r01*x1124))+(((-1.0)*r01*x1121))+(((-1.0)*r00*x1125))+(((-1.0)*r00*x1122))+(((-1.0)*r02*x1123)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1123))+(((-1.0)*r20*x1122))+(((-1.0)*r21*x1121))+(((-1.0)*r20*x1125))+((r21*x1124))))+IKsqr(((x1126.value)*((((r01*x1124))+(((-1.0)*r01*x1121))+(((-1.0)*r00*x1125))+(((-1.0)*r00*x1122))+(((-1.0)*r02*x1123))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r22*x1123))+(((-1.0)*r20*x1122))+(((-1.0)*r21*x1121))+(((-1.0)*r20*x1125))+((r21*x1124))), ((x1126.value)*((((r01*x1124))+(((-1.0)*r01*x1121))+(((-1.0)*r00*x1125))+(((-1.0)*r00*x1122))+(((-1.0)*r02*x1123))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x1127=((1.0)*cj15*cj17);
IkReal x1128=((1.0)*cj15*sj17);
IkReal x1129=((1.0)*sj15*sj16);
IkReal x1130=(cj16*sj15*sj17);
IkReal x1131=x1125;
IkReal x1132=IKcos(j13);
evalcond[0]=((((-1.0)*r22*x1129))+(((-1.0)*(1.0)*(IKsin(j13))))+(((-1.0)*r20*x1128))+(((-1.0)*r20*x1131))+((r21*x1130))+(((-1.0)*r21*x1127)));
evalcond[1]=((((-1.0)*r10*x1131))+(((-1.0)*r12*x1129))+((cj12*x1132))+(((-1.0)*r11*x1127))+(((-1.0)*r10*x1128))+((r11*x1130)));
evalcond[2]=(((r01*x1130))+(((-1.0)*r00*x1131))+(((-1.0)*r00*x1128))+(((-1.0)*r01*x1127))+(((-1.0)*sj12*x1132))+(((-1.0)*r02*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
IkReal x1133=(r21*sj17);
IkReal x1134=((1.0)*sj16);
IkReal x1135=(cj15*cj16);
j14eval[0]=cj13;
j14eval[1]=((IKabs(((((-1.0)*cj17*r20*x1135))+((r20*sj15*sj17))+(((-1.0)*cj15*r22*x1134))+((x1133*x1135))+((cj17*r21*sj15)))))+(IKabs(((((-1.0)*cj17*r20*x1134))+((cj16*r22))+((sj16*x1133))))));
j14eval[2]=IKsign(cj13);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj12;
j14eval[1]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1136=((1.0)*cj17);
IkReal x1137=(cj15*cj16);
if( IKabs((((cj16*r12))+(((-1.0)*r10*sj16*x1136))+((sj16*((r11*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj15*x1136))+((cj17*r10*x1137))+(((-1.0)*r11*sj17*x1137))+((cj15*r12*sj16))+(((-1.0)*(1.0)*r10*sj15*sj17)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj16*r12))+(((-1.0)*r10*sj16*x1136))+((sj16*((r11*sj17))))))+IKsqr(((((-1.0)*r11*sj15*x1136))+((cj17*r10*x1137))+(((-1.0)*r11*sj17*x1137))+((cj15*r12*sj16))+(((-1.0)*(1.0)*r10*sj15*sj17))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj16*r12))+(((-1.0)*r10*sj16*x1136))+((sj16*((r11*sj17))))), ((((-1.0)*r11*sj15*x1136))+((cj17*r10*x1137))+(((-1.0)*r11*sj17*x1137))+((cj15*r12*sj16))+(((-1.0)*(1.0)*r10*sj15*sj17))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1138=IKsin(j14);
IkReal x1139=((1.0)*cj16);
IkReal x1140=(cj17*sj16);
IkReal x1141=((1.0)*sj16*sj17);
IkReal x1142=IKcos(j14);
IkReal x1143=(cj13*x1142);
IkReal x1144=(sj13*x1142);
IkReal x1145=(cj17*sj15);
IkReal x1146=(sj15*sj17);
IkReal x1147=((1.0)*cj15*sj16);
IkReal x1148=(cj15*cj16*sj17);
IkReal x1149=((1.0)*cj15*cj16*cj17);
IkReal x1150=(sj13*x1138);
IkReal x1151=(cj13*x1138);
IkReal x1152=((0.01822)*cj17);
IkReal x1153=((0.3549)*cj17);
IkReal x1154=((0.3549)*sj17);
IkReal x1155=((0.01822)*sj17);
IkReal x1156=((0.0136)*sj16);
IkReal x1157=((0.0136)*cj16*cj17);
IkReal x1158=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r11*x1141))+(((-1.0)*r12*x1139))+((r10*x1140))+x1138);
evalcond[1]=(((r20*x1140))+x1143+(((-1.0)*r21*x1141))+(((-1.0)*r22*x1139)));
evalcond[2]=((((-1.0)*x1144))+((r00*x1140))+(((-1.0)*r01*x1141))+(((-1.0)*r02*x1139)));
evalcond[3]=((((-1.0)*r10*x1149))+(((-1.0)*r12*x1147))+((r11*x1145))+x1142+((r10*x1146))+((r11*x1148)));
evalcond[4]=(((r00*x1146))+x1150+(((-1.0)*r02*x1147))+((r01*x1145))+((r01*x1148))+(((-1.0)*r00*x1149)));
evalcond[5]=(((r20*x1146))+((r21*x1148))+(((-1.0)*x1151))+(((-1.0)*r22*x1147))+((r21*x1145))+(((-1.0)*r20*x1149)));
evalcond[6]=((0.0104)+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1152))+((r11*x1155))+(((-1.0)*r12*x1156))+(((0.0005)*x1138))+(((-1.0)*r10*x1157))+(((-0.0159)*x1142))+(((-1.0)*r10*x1154))+(((-1.0)*r11*x1153))+((r11*x1158)));
evalcond[7]=((((-1.0)*r20*x1152))+(((-1.0)*r20*x1154))+(((0.0159)*x1151))+((r21*x1155))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x1153))+(((-1.0)*r22*x1156))+(((-1.0)*r20*x1157))+((r21*x1158))+(((0.0005)*x1143))+(((0.3466)*sj13)));
evalcond[8]=((0.03)+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1152))+(((0.3466)*cj13))+(((-1.0)*r01*x1153))+((r01*x1155))+(((-0.0005)*x1144))+(((-1.0)*r00*x1157))+((r01*x1158))+(((-1.0)*r00*x1154))+(((-1.0)*r02*x1156))+(((-0.0159)*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1159=((1.0)*r12);
IkReal x1160=(r11*sj17);
IkReal x1161=(cj15*cj16);
if( IKabs(((((-1.0)*cj16*x1159))+((sj16*((cj17*r10))))+(((-1.0)*sj16*x1160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj15*sj17))+((cj17*r11*sj15))+((x1160*x1161))+(((-1.0)*cj17*r10*x1161))+(((-1.0)*cj15*sj16*x1159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj16*x1159))+((sj16*((cj17*r10))))+(((-1.0)*sj16*x1160))))+IKsqr((((r10*sj15*sj17))+((cj17*r11*sj15))+((x1160*x1161))+(((-1.0)*cj17*r10*x1161))+(((-1.0)*cj15*sj16*x1159))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*cj16*x1159))+((sj16*((cj17*r10))))+(((-1.0)*sj16*x1160))), (((r10*sj15*sj17))+((cj17*r11*sj15))+((x1160*x1161))+(((-1.0)*cj17*r10*x1161))+(((-1.0)*cj15*sj16*x1159))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1162=IKcos(j14);
IkReal x1163=(cj13*x1162);
IkReal x1164=((1.0)*cj16);
IkReal x1165=(cj17*sj16);
IkReal x1166=((1.0)*sj16*sj17);
IkReal x1167=IKsin(j14);
IkReal x1168=((1.0)*x1167);
IkReal x1169=(sj13*x1162);
IkReal x1170=(cj17*sj15);
IkReal x1171=(sj15*sj17);
IkReal x1172=((1.0)*cj15*sj16);
IkReal x1173=(cj15*cj16*sj17);
IkReal x1174=((1.0)*cj15*cj16*cj17);
IkReal x1175=((0.01822)*cj17);
IkReal x1176=((0.3549)*cj17);
IkReal x1177=((0.3549)*sj17);
IkReal x1178=((0.01822)*sj17);
IkReal x1179=((0.0136)*sj16);
IkReal x1180=((0.0136)*cj16*cj17);
IkReal x1181=((0.0136)*cj16*sj17);
IkReal x1182=((0.0159)*x1167);
evalcond[0]=(((r20*x1165))+x1163+(((-1.0)*r21*x1166))+(((-1.0)*r22*x1164)));
evalcond[1]=(((r10*x1165))+(((-1.0)*x1168))+(((-1.0)*r11*x1166))+(((-1.0)*r12*x1164)));
evalcond[2]=((((-1.0)*r01*x1166))+x1169+((r00*x1165))+(((-1.0)*r02*x1164)));
evalcond[3]=((((-1.0)*r12*x1172))+((r11*x1170))+((r10*x1171))+(((-1.0)*r10*x1174))+(((-1.0)*x1162))+((r11*x1173)));
evalcond[4]=((((-1.0)*r22*x1172))+((r21*x1173))+(((-1.0)*cj13*x1168))+(((-1.0)*r20*x1174))+((r20*x1171))+((r21*x1170)));
evalcond[5]=(((r01*x1170))+((r01*x1173))+(((-1.0)*sj13*x1168))+(((-1.0)*r00*x1174))+(((-1.0)*r02*x1172))+((r00*x1171)));
evalcond[6]=((-0.0104)+(((-1.0)*r10*x1177))+((r11*x1181))+((r11*x1178))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x1176))+(((0.0159)*x1162))+(((-1.0)*r10*x1180))+(((-1.0)*r12*x1179))+(((-1.0)*r10*x1175))+(((-0.0005)*x1167)));
evalcond[7]=((((-1.0)*r20*x1180))+(((-1.0)*(1.0)*pz))+((r21*x1178))+(((-1.0)*r20*x1177))+(((-1.0)*r21*x1176))+((cj13*x1182))+(((-1.0)*r22*x1179))+(((-1.0)*r20*x1175))+(((0.0005)*x1163))+((r21*x1181))+(((0.3466)*sj13)));
evalcond[8]=((-0.03)+(((-1.0)*(1.0)*px))+((r01*x1181))+(((-1.0)*r00*x1180))+(((-1.0)*(0.3466)*cj13))+(((0.0005)*x1169))+((r01*x1178))+(((-1.0)*r00*x1175))+(((-1.0)*r00*x1177))+((sj13*x1182))+(((-1.0)*r01*x1176))+(((-1.0)*r02*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1183=(cj12*cj16);
IkReal x1184=(cj16*sj12);
IkReal x1185=(cj12*sj16*sj17);
IkReal x1186=(sj12*sj16*sj17);
IkReal x1187=(cj17*r00);
IkReal x1188=((1.0)*cj12*sj16);
IkReal x1189=(cj17*r10);
if( IKabs((((r02*x1183))+((r01*x1185))+((r12*x1184))+((r11*x1186))+(((-1.0)*sj12*sj16*x1189))+(((-1.0)*x1187*x1188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1188*x1189))+(((-1.0)*r01*x1186))+((r11*x1185))+(((-1.0)*r02*x1184))+((r12*x1183))+((sj12*sj16*x1187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1183))+((r01*x1185))+((r12*x1184))+((r11*x1186))+(((-1.0)*sj12*sj16*x1189))+(((-1.0)*x1187*x1188))))+IKsqr(((((-1.0)*x1188*x1189))+(((-1.0)*r01*x1186))+((r11*x1185))+(((-1.0)*r02*x1184))+((r12*x1183))+((sj12*sj16*x1187))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r02*x1183))+((r01*x1185))+((r12*x1184))+((r11*x1186))+(((-1.0)*sj12*sj16*x1189))+(((-1.0)*x1187*x1188))), ((((-1.0)*x1188*x1189))+(((-1.0)*r01*x1186))+((r11*x1185))+(((-1.0)*r02*x1184))+((r12*x1183))+((sj12*sj16*x1187))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1190=IKcos(j14);
IkReal x1191=(cj12*x1190);
IkReal x1192=IKsin(j14);
IkReal x1193=(sj12*x1192);
IkReal x1194=(x1193+x1191);
IkReal x1195=((1.0)*cj16);
IkReal x1196=(cj17*sj16);
IkReal x1197=((1.0)*sj16*sj17);
IkReal x1198=(cj12*x1192);
IkReal x1199=(sj12*x1190);
IkReal x1200=(cj17*sj15);
IkReal x1201=(sj15*sj17);
IkReal x1202=((1.0)*cj15*sj16);
IkReal x1203=(cj15*cj16*sj17);
IkReal x1204=((1.0)*cj15*cj16*cj17);
IkReal x1205=((0.01822)*cj17);
IkReal x1206=((0.3549)*cj17);
IkReal x1207=((0.3549)*sj17);
IkReal x1208=((0.01822)*sj17);
IkReal x1209=((0.0136)*sj16);
IkReal x1210=((0.0136)*cj16*cj17);
IkReal x1211=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r12*x1195))+((r10*x1196))+x1194+(((-1.0)*r11*x1197)));
evalcond[1]=(((r00*x1196))+(((-1.0)*r02*x1195))+x1198+(((-1.0)*x1199))+(((-1.0)*r01*x1197)));
evalcond[2]=(((r01*x1200))+((r01*x1203))+(((-1.0)*r02*x1202))+(((-1.0)*r00*x1204))+((r00*x1201))+x1194);
evalcond[3]=(((r11*x1203))+((r10*x1201))+((r11*x1200))+(((-1.0)*r12*x1202))+(((-1.0)*r10*x1204))+x1199+(((-1.0)*x1198)));
evalcond[4]=((((-0.0159)*x1193))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1210))+(((0.0005)*x1198))+(((-0.0159)*x1191))+((r01*x1211))+(((-0.0005)*x1199))+(((-1.0)*r00*x1207))+(((-1.0)*r02*x1209))+(((-1.0)*r01*x1206))+((r01*x1208))+(((0.03)*sj12))+(((0.0104)*cj12))+(((-1.0)*r00*x1205)));
evalcond[5]=((((0.0005)*x1193))+(((-1.0)*(1.0)*py))+(((-1.0)*r12*x1209))+(((-0.0159)*x1199))+(((-1.0)*r10*x1207))+(((-1.0)*(0.03)*cj12))+((r11*x1208))+(((-1.0)*r10*x1210))+((r11*x1211))+(((0.0159)*x1198))+(((-1.0)*r10*x1205))+(((0.0005)*x1191))+(((-1.0)*r11*x1206))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1212=(cj16*r02);
IkReal x1213=(cj16*r12);
IkReal x1214=(cj12*sj16);
IkReal x1215=(r01*sj17);
IkReal x1216=(r11*sj17);
IkReal x1217=(sj12*sj16);
IkReal x1218=(cj17*r00);
IkReal x1219=((1.0)*cj12*sj16);
IkReal x1220=(cj17*r10);
IkReal x1221=((1.0)*sj12*sj16);
if( IKabs(((((-1.0)*x1220*x1221))+((x1214*x1215))+((sj12*x1213))+((cj12*x1212))+((x1216*x1217))+(((-1.0)*x1218*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj12*x1212))+(((-1.0)*x1218*x1221))+(((-1.0)*x1216*x1219))+((x1214*x1220))+((x1215*x1217))+(((-1.0)*cj12*x1213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1220*x1221))+((x1214*x1215))+((sj12*x1213))+((cj12*x1212))+((x1216*x1217))+(((-1.0)*x1218*x1219))))+IKsqr((((sj12*x1212))+(((-1.0)*x1218*x1221))+(((-1.0)*x1216*x1219))+((x1214*x1220))+((x1215*x1217))+(((-1.0)*cj12*x1213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*x1220*x1221))+((x1214*x1215))+((sj12*x1213))+((cj12*x1212))+((x1216*x1217))+(((-1.0)*x1218*x1219))), (((sj12*x1212))+(((-1.0)*x1218*x1221))+(((-1.0)*x1216*x1219))+((x1214*x1220))+((x1215*x1217))+(((-1.0)*cj12*x1213))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1222=IKsin(j14);
IkReal x1223=(cj12*x1222);
IkReal x1224=IKcos(j14);
IkReal x1225=(sj12*x1224);
IkReal x1226=(x1223+x1225);
IkReal x1227=((1.0)*cj16);
IkReal x1228=(cj17*sj16);
IkReal x1229=((1.0)*sj16*sj17);
IkReal x1230=(sj12*x1222);
IkReal x1231=(cj12*x1224);
IkReal x1232=(cj17*sj15);
IkReal x1233=(sj15*sj17);
IkReal x1234=((1.0)*cj15*sj16);
IkReal x1235=(cj15*cj16*sj17);
IkReal x1236=((1.0)*cj15*cj16*cj17);
IkReal x1237=((0.01822)*cj17);
IkReal x1238=((0.3549)*cj17);
IkReal x1239=((0.3549)*sj17);
IkReal x1240=((0.01822)*sj17);
IkReal x1241=((0.0136)*sj16);
IkReal x1242=((0.0136)*cj16*cj17);
IkReal x1243=((0.0136)*cj16*sj17);
evalcond[0]=(((r00*x1228))+(((-1.0)*r01*x1229))+(((-1.0)*r02*x1227))+x1226);
evalcond[1]=((((-1.0)*r12*x1227))+(((-1.0)*r11*x1229))+x1230+((r10*x1228))+(((-1.0)*x1231)));
evalcond[2]=((((-1.0)*r12*x1234))+((r11*x1232))+(((-1.0)*r10*x1236))+x1226+((r11*x1235))+((r10*x1233)));
evalcond[3]=(((r01*x1235))+x1231+(((-1.0)*x1230))+(((-1.0)*r00*x1236))+(((-1.0)*r02*x1234))+((r00*x1233))+((r01*x1232)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.0005)*x1225))+(((-0.0159)*x1231))+(((-1.0)*r01*x1238))+(((-1.0)*r00*x1242))+(((-1.0)*r00*x1239))+((r01*x1243))+((r01*x1240))+(((0.03)*sj12))+(((0.0104)*cj12))+(((-1.0)*r02*x1241))+(((-1.0)*r00*x1237))+(((0.0005)*x1223))+(((0.0159)*x1230)));
evalcond[5]=((((-1.0)*(1.0)*py))+(((0.0005)*x1230))+((r11*x1240))+(((-1.0)*r12*x1241))+(((-1.0)*r10*x1239))+(((-1.0)*(0.03)*cj12))+(((-0.0005)*x1231))+((r11*x1243))+(((-0.0159)*x1225))+(((-1.0)*r11*x1238))+(((-1.0)*r10*x1237))+(((-0.0159)*x1223))+(((0.0104)*sj12))+(((-1.0)*r10*x1242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1244=((1.0)*sj16);
IkReal x1245=(cj15*cj16);
IkReal x1246=(r21*sj17);
if( IKabs((((r20*sj15*sj17))+((x1245*x1246))+(((-1.0)*cj17*r20*x1245))+((cj17*r21*sj15))+(((-1.0)*cj15*r22*x1244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj17*r20*x1244))+((sj16*x1246))+((cj16*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj15*sj17))+((x1245*x1246))+(((-1.0)*cj17*r20*x1245))+((cj17*r21*sj15))+(((-1.0)*cj15*r22*x1244))))+IKsqr(((((-1.0)*cj17*r20*x1244))+((sj16*x1246))+((cj16*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r20*sj15*sj17))+((x1245*x1246))+(((-1.0)*cj17*r20*x1245))+((cj17*r21*sj15))+(((-1.0)*cj15*r22*x1244))), ((((-1.0)*cj17*r20*x1244))+((sj16*x1246))+((cj16*r22))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1247=IKcos(j14);
IkReal x1248=((1.0)*cj16);
IkReal x1249=(cj17*sj16);
IkReal x1250=((1.0)*sj16*sj17);
IkReal x1251=IKsin(j14);
IkReal x1252=(sj12*x1251);
IkReal x1253=(cj12*x1251);
IkReal x1254=(cj17*sj15);
IkReal x1255=(sj15*sj17);
IkReal x1256=((1.0)*cj15*sj16);
IkReal x1257=(cj15*cj16*sj17);
IkReal x1258=((1.0)*cj15*cj16*cj17);
IkReal x1259=(cj12*x1247);
IkReal x1260=(sj12*x1247);
IkReal x1261=((0.01822)*cj17);
IkReal x1262=((0.3549)*cj17);
IkReal x1263=((0.3549)*sj17);
IkReal x1264=((0.01822)*sj17);
IkReal x1265=((0.0136)*sj16);
IkReal x1266=((0.0136)*cj16*cj17);
IkReal x1267=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r22*x1248))+((r20*x1249))+(((-1.0)*r21*x1250))+x1247);
evalcond[1]=(x1252+(((-1.0)*r12*x1248))+((r10*x1249))+(((-1.0)*r11*x1250)));
evalcond[2]=((((-1.0)*r01*x1250))+x1253+(((-1.0)*r02*x1248))+((r00*x1249)));
evalcond[3]=(((r21*x1254))+((r20*x1255))+(((-1.0)*r20*x1258))+(((-1.0)*r22*x1256))+((r21*x1257))+(((-1.0)*x1251)));
evalcond[4]=((((-1.0)*r02*x1256))+(((-1.0)*r00*x1258))+x1259+((r01*x1257))+((r00*x1255))+((r01*x1254)));
evalcond[5]=(((r11*x1254))+((r10*x1255))+(((-1.0)*r12*x1256))+x1260+((r11*x1257))+(((-1.0)*r10*x1258)));
evalcond[6]=((((-1.0)*r20*x1266))+(((-1.0)*r20*x1263))+(((-1.0)*(1.0)*pz))+(((0.0005)*x1247))+(((-1.0)*r22*x1265))+(((0.0159)*x1251))+((r21*x1264))+(((-1.0)*r20*x1261))+((r21*x1267))+(((-1.0)*r21*x1262)));
evalcond[7]=((((0.0005)*x1253))+(((-1.0)*(1.0)*px))+(((-0.0159)*x1259))+(((-1.0)*r00*x1261))+(((0.3766)*sj12))+(((-1.0)*r01*x1262))+(((-1.0)*r00*x1266))+(((-1.0)*r02*x1265))+((r01*x1264))+(((0.0104)*cj12))+((r01*x1267))+(((-1.0)*r00*x1263)));
evalcond[8]=((((-1.0)*r10*x1261))+(((-1.0)*r11*x1262))+(((-1.0)*(1.0)*py))+(((-1.0)*(0.3766)*cj12))+((r11*x1267))+(((-1.0)*r10*x1266))+((r11*x1264))+(((-1.0)*r10*x1263))+(((-0.0159)*x1260))+(((0.0104)*sj12))+(((0.0005)*x1252))+(((-1.0)*r12*x1265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1268=((1.0)*sj15);
IkReal x1269=(cj17*r20);
IkReal x1270=(r21*sj17);
if( IKabs((((cj15*r22*sj16))+(((-1.0)*cj17*r21*x1268))+(((-1.0)*r20*sj17*x1268))+(((-1.0)*cj15*cj16*x1270))+((cj15*cj16*x1269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x1270))+(((-1.0)*cj16*r22))+((sj16*x1269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r22*sj16))+(((-1.0)*cj17*r21*x1268))+(((-1.0)*r20*sj17*x1268))+(((-1.0)*cj15*cj16*x1270))+((cj15*cj16*x1269))))+IKsqr(((((-1.0)*sj16*x1270))+(((-1.0)*cj16*r22))+((sj16*x1269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj15*r22*sj16))+(((-1.0)*cj17*r21*x1268))+(((-1.0)*r20*sj17*x1268))+(((-1.0)*cj15*cj16*x1270))+((cj15*cj16*x1269))), ((((-1.0)*sj16*x1270))+(((-1.0)*cj16*r22))+((sj16*x1269))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1271=((1.0)*cj16);
IkReal x1272=(cj17*sj16);
IkReal x1273=IKcos(j14);
IkReal x1274=((1.0)*sj16*sj17);
IkReal x1275=IKsin(j14);
IkReal x1276=(sj12*x1275);
IkReal x1277=(cj12*x1275);
IkReal x1278=(cj17*sj15);
IkReal x1279=(sj15*sj17);
IkReal x1280=((1.0)*cj15*sj16);
IkReal x1281=(cj15*cj16*sj17);
IkReal x1282=((1.0)*cj15*cj16*cj17);
IkReal x1283=(cj12*x1273);
IkReal x1284=(sj12*x1273);
IkReal x1285=((0.01822)*cj17);
IkReal x1286=((0.3549)*cj17);
IkReal x1287=((0.3549)*sj17);
IkReal x1288=((0.01822)*sj17);
IkReal x1289=((0.0136)*sj16);
IkReal x1290=((0.0136)*cj16*cj17);
IkReal x1291=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r22*x1271))+(((-1.0)*x1273))+((r20*x1272))+(((-1.0)*r21*x1274)));
evalcond[1]=(((r10*x1272))+(((-1.0)*r11*x1274))+(((-1.0)*r12*x1271))+x1276);
evalcond[2]=(x1277+(((-1.0)*r01*x1274))+(((-1.0)*r02*x1271))+((r00*x1272)));
evalcond[3]=((((-1.0)*r20*x1282))+((r20*x1279))+((r21*x1278))+((r21*x1281))+x1275+(((-1.0)*r22*x1280)));
evalcond[4]=(((r00*x1279))+(((-1.0)*r00*x1282))+x1283+((r01*x1278))+((r01*x1281))+(((-1.0)*r02*x1280)));
evalcond[5]=((((-1.0)*r12*x1280))+((r11*x1281))+x1284+(((-1.0)*r10*x1282))+((r10*x1279))+((r11*x1278)));
evalcond[6]=((((-1.0)*(1.0)*pz))+(((-0.0159)*x1275))+(((-1.0)*r20*x1285))+((r21*x1291))+(((-0.0005)*x1273))+(((-1.0)*r20*x1290))+(((-1.0)*r20*x1287))+((r21*x1288))+(((-1.0)*r21*x1286))+(((-1.0)*r22*x1289)));
evalcond[7]=((((-1.0)*r00*x1287))+(((-1.0)*(1.0)*px))+(((-1.0)*(0.3166)*sj12))+(((-0.0159)*x1283))+((r01*x1288))+((r01*x1291))+(((-1.0)*r00*x1285))+(((-1.0)*r02*x1289))+(((0.0005)*x1277))+(((-1.0)*r00*x1290))+(((0.0104)*cj12))+(((-1.0)*r01*x1286)));
evalcond[8]=((((0.3166)*cj12))+(((-0.0159)*x1284))+(((0.0005)*x1276))+((r11*x1288))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1287))+(((-1.0)*r12*x1289))+(((-1.0)*r10*x1285))+(((-1.0)*r10*x1290))+((r11*x1291))+(((-1.0)*r11*x1286))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(cj13,-1);
if(!x1299.valid){
continue;
}
IkReal x1292=x1299.value;
IkReal x1293=(sj16*sj17);
IkReal x1294=(cj16*r22);
IkReal x1295=(sj12*sj13);
IkReal x1296=((1.0)*cj17*sj16);
IkReal x1297=(r21*x1293);
IkReal x1298=(r20*x1296);
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(cj12,-1);
if(!x1300.valid){
continue;
}
if( IKabs((x1292*(x1300.value)*(((((-1.0)*x1295*x1298))+((x1294*x1295))+((cj13*cj16*r02))+((x1295*x1297))+(((-1.0)*cj13*r00*x1296))+((cj13*r01*x1293)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1292*(((((-1.0)*x1298))+x1294+x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1292*(x1300.value)*(((((-1.0)*x1295*x1298))+((x1294*x1295))+((cj13*cj16*r02))+((x1295*x1297))+(((-1.0)*cj13*r00*x1296))+((cj13*r01*x1293))))))+IKsqr((x1292*(((((-1.0)*x1298))+x1294+x1297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x1292*(x1300.value)*(((((-1.0)*x1295*x1298))+((x1294*x1295))+((cj13*cj16*r02))+((x1295*x1297))+(((-1.0)*cj13*r00*x1296))+((cj13*r01*x1293))))), (x1292*(((((-1.0)*x1298))+x1294+x1297))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1301=IKcos(j14);
IkReal x1302=(cj13*x1301);
IkReal x1303=((1.0)*cj16);
IkReal x1304=(cj17*sj16);
IkReal x1305=((1.0)*sj16*sj17);
IkReal x1306=IKsin(j14);
IkReal x1307=(sj12*x1306);
IkReal x1308=(cj12*x1301);
IkReal x1309=(sj13*x1308);
IkReal x1310=(cj12*x1306);
IkReal x1311=(sj12*sj13*x1301);
IkReal x1312=(cj17*sj15);
IkReal x1313=(sj15*sj17);
IkReal x1314=(cj13*x1306);
IkReal x1315=((1.0)*cj15*sj16);
IkReal x1316=(cj15*cj16*sj17);
IkReal x1317=((1.0)*cj15*cj16*cj17);
IkReal x1318=(sj13*x1307);
IkReal x1319=(sj12*x1301);
IkReal x1320=(cj12*sj13*x1306);
IkReal x1321=((0.01822)*cj17);
IkReal x1322=((0.3549)*cj17);
IkReal x1323=((0.3549)*sj17);
IkReal x1324=((0.01822)*sj17);
IkReal x1325=((0.0136)*sj16);
IkReal x1326=((0.0136)*cj16*cj17);
IkReal x1327=((0.0136)*cj16*sj17);
IkReal x1328=((0.3466)*cj13);
evalcond[0]=(x1302+((r20*x1304))+(((-1.0)*r22*x1303))+(((-1.0)*r21*x1305)));
evalcond[1]=(((r10*x1304))+x1309+x1307+(((-1.0)*r12*x1303))+(((-1.0)*r11*x1305)));
evalcond[2]=(((r00*x1304))+(((-1.0)*x1311))+(((-1.0)*r01*x1305))+(((-1.0)*r02*x1303))+x1310);
evalcond[3]=((((-1.0)*r22*x1315))+((r20*x1313))+(((-1.0)*r20*x1317))+(((-1.0)*x1314))+((r21*x1316))+((r21*x1312)));
evalcond[4]=((((-1.0)*r02*x1315))+x1308+(((-1.0)*r00*x1317))+((r00*x1313))+((r01*x1312))+x1318+((r01*x1316)));
evalcond[5]=((((-1.0)*r10*x1317))+(((-1.0)*x1320))+((r11*x1316))+(((-1.0)*r12*x1315))+((r11*x1312))+((r10*x1313))+x1319);
evalcond[6]=((((0.0005)*x1302))+(((-1.0)*r21*x1322))+(((-1.0)*r20*x1323))+(((-1.0)*r20*x1321))+(((-1.0)*(1.0)*pz))+((r21*x1327))+(((-1.0)*r22*x1325))+(((0.0159)*x1314))+((r21*x1324))+(((-1.0)*r20*x1326))+(((0.3466)*sj13)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((-1.0)*r02*x1325))+(((0.0005)*x1310))+(((-1.0)*r00*x1321))+((r01*x1324))+(((-1.0)*r01*x1322))+(((-1.0)*r00*x1326))+((r01*x1327))+(((-0.0159)*x1318))+(((-0.0005)*x1311))+((sj12*x1328))+(((0.03)*sj12))+(((0.0104)*cj12))+(((-0.0159)*x1308))+(((-1.0)*r00*x1323)));
evalcond[8]=((((-1.0)*r10*x1326))+(((0.0005)*x1309))+(((-1.0)*(1.0)*py))+(((0.0159)*x1320))+(((0.0005)*x1307))+(((-1.0)*r11*x1322))+(((-0.0159)*x1319))+(((-1.0)*r10*x1323))+(((-1.0)*(0.03)*cj12))+((r11*x1327))+(((-1.0)*r12*x1325))+(((-1.0)*r10*x1321))+((r11*x1324))+(((-1.0)*cj12*x1328))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1329=(cj12*cj16);
IkReal x1330=(cj16*sj12);
IkReal x1331=(cj12*sj16*sj17);
IkReal x1332=(sj12*sj16*sj17);
IkReal x1333=(cj17*r00);
IkReal x1334=((1.0)*cj12*sj16);
IkReal x1335=(cj17*r10);
CheckValue<IkReal> x1336=IKPowWithIntegerCheck(sj13,-1);
if(!x1336.valid){
continue;
}
if( IKabs((((r11*x1332))+(((-1.0)*sj12*sj16*x1335))+((r02*x1329))+(((-1.0)*x1333*x1334))+((r01*x1331))+((r12*x1330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1336.value)*((((sj12*sj16*x1333))+((r11*x1331))+(((-1.0)*r01*x1332))+(((-1.0)*x1334*x1335))+(((-1.0)*r02*x1330))+((r12*x1329)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1332))+(((-1.0)*sj12*sj16*x1335))+((r02*x1329))+(((-1.0)*x1333*x1334))+((r01*x1331))+((r12*x1330))))+IKsqr(((x1336.value)*((((sj12*sj16*x1333))+((r11*x1331))+(((-1.0)*r01*x1332))+(((-1.0)*x1334*x1335))+(((-1.0)*r02*x1330))+((r12*x1329))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r11*x1332))+(((-1.0)*sj12*sj16*x1335))+((r02*x1329))+(((-1.0)*x1333*x1334))+((r01*x1331))+((r12*x1330))), ((x1336.value)*((((sj12*sj16*x1333))+((r11*x1331))+(((-1.0)*r01*x1332))+(((-1.0)*x1334*x1335))+(((-1.0)*r02*x1330))+((r12*x1329))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1337=IKcos(j14);
IkReal x1338=(cj13*x1337);
IkReal x1339=((1.0)*cj16);
IkReal x1340=(cj17*sj16);
IkReal x1341=((1.0)*sj16*sj17);
IkReal x1342=IKsin(j14);
IkReal x1343=(sj12*x1342);
IkReal x1344=(cj12*x1337);
IkReal x1345=(sj13*x1344);
IkReal x1346=(cj12*x1342);
IkReal x1347=(sj12*sj13*x1337);
IkReal x1348=(cj17*sj15);
IkReal x1349=(sj15*sj17);
IkReal x1350=(cj13*x1342);
IkReal x1351=((1.0)*cj15*sj16);
IkReal x1352=(cj15*cj16*sj17);
IkReal x1353=((1.0)*cj15*cj16*cj17);
IkReal x1354=(sj13*x1343);
IkReal x1355=(sj12*x1337);
IkReal x1356=(cj12*sj13*x1342);
IkReal x1357=((0.01822)*cj17);
IkReal x1358=((0.3549)*cj17);
IkReal x1359=((0.3549)*sj17);
IkReal x1360=((0.01822)*sj17);
IkReal x1361=((0.0136)*sj16);
IkReal x1362=((0.0136)*cj16*cj17);
IkReal x1363=((0.0136)*cj16*sj17);
IkReal x1364=((0.3466)*cj13);
evalcond[0]=(((r20*x1340))+x1338+(((-1.0)*r21*x1341))+(((-1.0)*r22*x1339)));
evalcond[1]=((((-1.0)*r12*x1339))+(((-1.0)*r11*x1341))+((r10*x1340))+x1343+x1345);
evalcond[2]=((((-1.0)*r02*x1339))+((r00*x1340))+(((-1.0)*r01*x1341))+(((-1.0)*x1347))+x1346);
evalcond[3]=((((-1.0)*r22*x1351))+(((-1.0)*x1350))+((r21*x1352))+((r21*x1348))+(((-1.0)*r20*x1353))+((r20*x1349)));
evalcond[4]=(((r00*x1349))+(((-1.0)*r02*x1351))+((r01*x1348))+((r01*x1352))+(((-1.0)*r00*x1353))+x1354+x1344);
evalcond[5]=((((-1.0)*r12*x1351))+(((-1.0)*r10*x1353))+((r10*x1349))+((r11*x1348))+(((-1.0)*x1356))+x1355+((r11*x1352)));
evalcond[6]=((((-1.0)*r21*x1358))+(((-1.0)*r20*x1357))+(((0.0159)*x1350))+(((-1.0)*(1.0)*pz))+((r21*x1360))+(((0.0005)*x1338))+(((-1.0)*r20*x1359))+(((-1.0)*r20*x1362))+(((-1.0)*r22*x1361))+(((0.3466)*sj13))+((r21*x1363)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((-0.0159)*x1344))+((r01*x1360))+((r01*x1363))+(((-1.0)*r00*x1357))+(((-1.0)*r00*x1359))+((sj12*x1364))+(((0.03)*sj12))+(((0.0005)*x1346))+(((-1.0)*r00*x1362))+(((0.0104)*cj12))+(((-1.0)*r02*x1361))+(((-1.0)*r01*x1358))+(((-0.0159)*x1354))+(((-0.0005)*x1347)));
evalcond[8]=(((r11*x1360))+(((-1.0)*(1.0)*py))+(((-0.0159)*x1355))+(((-1.0)*r11*x1358))+(((-1.0)*r10*x1357))+(((-1.0)*r10*x1362))+(((-1.0)*cj12*x1364))+(((-1.0)*r10*x1359))+(((0.0159)*x1356))+(((-1.0)*(0.03)*cj12))+(((0.0005)*x1345))+(((0.0005)*x1343))+(((-1.0)*r12*x1361))+(((0.0104)*sj12))+((r11*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1365=((1.0)*sj16);
IkReal x1366=(cj15*cj16);
IkReal x1367=(r21*sj17);
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r22*x1365))+((r20*sj15*sj17))+(((-1.0)*cj17*r20*x1366))+((cj17*r21*sj15))+((x1366*x1367)))),IkReal((((sj16*x1367))+(((-1.0)*cj17*r20*x1365))+((cj16*r22)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x1369.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1370=IKcos(j14);
IkReal x1371=(cj13*x1370);
IkReal x1372=((1.0)*cj16);
IkReal x1373=(cj17*sj16);
IkReal x1374=((1.0)*sj16*sj17);
IkReal x1375=IKsin(j14);
IkReal x1376=(sj12*x1375);
IkReal x1377=(cj12*x1370);
IkReal x1378=(sj13*x1377);
IkReal x1379=(cj12*x1375);
IkReal x1380=(sj12*sj13*x1370);
IkReal x1381=(cj17*sj15);
IkReal x1382=(sj15*sj17);
IkReal x1383=(cj13*x1375);
IkReal x1384=((1.0)*cj15*sj16);
IkReal x1385=(cj15*cj16*sj17);
IkReal x1386=((1.0)*cj15*cj16*cj17);
IkReal x1387=(sj13*x1376);
IkReal x1388=(sj12*x1370);
IkReal x1389=(cj12*sj13*x1375);
IkReal x1390=((0.01822)*cj17);
IkReal x1391=((0.3549)*cj17);
IkReal x1392=((0.3549)*sj17);
IkReal x1393=((0.01822)*sj17);
IkReal x1394=((0.0136)*sj16);
IkReal x1395=((0.0136)*cj16*cj17);
IkReal x1396=((0.0136)*cj16*sj17);
IkReal x1397=((0.3466)*cj13);
evalcond[0]=(x1371+((r20*x1373))+(((-1.0)*r21*x1374))+(((-1.0)*r22*x1372)));
evalcond[1]=(((r10*x1373))+x1378+x1376+(((-1.0)*r12*x1372))+(((-1.0)*r11*x1374)));
evalcond[2]=(x1379+((r00*x1373))+(((-1.0)*x1380))+(((-1.0)*r01*x1374))+(((-1.0)*r02*x1372)));
evalcond[3]=(((r21*x1381))+(((-1.0)*x1383))+((r21*x1385))+(((-1.0)*r22*x1384))+(((-1.0)*r20*x1386))+((r20*x1382)));
evalcond[4]=(((r01*x1381))+x1377+((r01*x1385))+x1387+(((-1.0)*r02*x1384))+((r00*x1382))+(((-1.0)*r00*x1386)));
evalcond[5]=((((-1.0)*r10*x1386))+(((-1.0)*x1389))+((r11*x1385))+x1388+(((-1.0)*r12*x1384))+((r10*x1382))+((r11*x1381)));
evalcond[6]=((((0.0005)*x1371))+(((-1.0)*(1.0)*pz))+((r21*x1396))+(((0.0159)*x1383))+(((-1.0)*r20*x1395))+(((-1.0)*r20*x1390))+(((-1.0)*r21*x1391))+((r21*x1393))+(((-1.0)*r20*x1392))+(((0.3466)*sj13))+(((-1.0)*r22*x1394)));
evalcond[7]=(((r01*x1393))+(((-1.0)*r00*x1395))+(((-1.0)*(1.0)*px))+((sj12*x1397))+(((-1.0)*r00*x1390))+(((-1.0)*r00*x1392))+(((-0.0005)*x1380))+((r01*x1396))+(((-0.0159)*x1387))+(((0.0005)*x1379))+(((-1.0)*r01*x1391))+(((0.03)*sj12))+(((-1.0)*r02*x1394))+(((0.0104)*cj12))+(((-0.0159)*x1377)));
evalcond[8]=((((-1.0)*r12*x1394))+(((0.0159)*x1389))+(((-0.0159)*x1388))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1390))+(((-1.0)*(0.03)*cj12))+(((-1.0)*cj12*x1397))+(((-1.0)*r10*x1395))+(((0.0005)*x1376))+(((-1.0)*r11*x1391))+((r11*x1393))+(((-1.0)*r10*x1392))+(((0.0005)*x1378))+(((0.0104)*sj12))+((r11*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1398=(cj15*cj17);
IkReal x1399=((1.0)*r20);
IkReal x1400=(cj15*sj17);
IkReal x1401=(sj15*sj16);
IkReal x1402=(cj16*sj15*sj17);
IkReal x1403=(cj16*cj17*sj15);
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(cj12,-1);
if(!x1404.valid){
continue;
}
if( IKabs(((((-1.0)*r22*x1401))+(((-1.0)*x1399*x1400))+((r21*x1402))+(((-1.0)*x1399*x1403))+(((-1.0)*r21*x1398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1404.value)*(((((-1.0)*r11*x1402))+((r10*x1400))+((r12*x1401))+((r10*x1403))+((r11*x1398)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1401))+(((-1.0)*x1399*x1400))+((r21*x1402))+(((-1.0)*x1399*x1403))+(((-1.0)*r21*x1398))))+IKsqr(((x1404.value)*(((((-1.0)*r11*x1402))+((r10*x1400))+((r12*x1401))+((r10*x1403))+((r11*x1398))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j13array[0]=IKatan2(((((-1.0)*r22*x1401))+(((-1.0)*x1399*x1400))+((r21*x1402))+(((-1.0)*x1399*x1403))+(((-1.0)*r21*x1398))), ((x1404.value)*(((((-1.0)*r11*x1402))+((r10*x1400))+((r12*x1401))+((r10*x1403))+((r11*x1398))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x1405=((1.0)*cj15*cj17);
IkReal x1406=((1.0)*cj15*sj17);
IkReal x1407=((1.0)*sj15*sj16);
IkReal x1408=(cj16*sj15*sj17);
IkReal x1409=((1.0)*cj16*cj17*sj15);
IkReal x1410=IKcos(j13);
evalcond[0]=((((-1.0)*(1.0)*(IKsin(j13))))+(((-1.0)*r20*x1409))+(((-1.0)*r21*x1405))+(((-1.0)*r22*x1407))+(((-1.0)*r20*x1406))+((r21*x1408)));
evalcond[1]=(((cj12*x1410))+(((-1.0)*r10*x1406))+(((-1.0)*r11*x1405))+(((-1.0)*r10*x1409))+((r11*x1408))+(((-1.0)*r12*x1407)));
evalcond[2]=((((-1.0)*r01*x1405))+(((-1.0)*r02*x1407))+(((-1.0)*r00*x1406))+((r01*x1408))+(((-1.0)*r00*x1409))+(((-1.0)*sj12*x1410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
IkReal x1411=(r21*sj17);
IkReal x1412=((1.0)*sj16);
IkReal x1413=(cj15*cj16);
j14eval[0]=cj13;
j14eval[1]=((IKabs(((((-1.0)*cj15*r22*x1412))+((r20*sj15*sj17))+(((-1.0)*cj17*r20*x1413))+((x1411*x1413))+((cj17*r21*sj15)))))+(IKabs((((cj16*r22))+(((-1.0)*cj17*r20*x1412))+((sj16*x1411))))));
j14eval[2]=IKsign(cj13);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
j14eval[0]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj12;
j14eval[1]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1414=((1.0)*cj17);
IkReal x1415=(cj15*cj16);
if( IKabs((((cj16*r12))+((sj16*((r11*sj17))))+(((-1.0)*r10*sj16*x1414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj17*x1415))+((cj17*r10*x1415))+((cj15*r12*sj16))+(((-1.0)*(1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x1414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj16*r12))+((sj16*((r11*sj17))))+(((-1.0)*r10*sj16*x1414))))+IKsqr(((((-1.0)*r11*sj17*x1415))+((cj17*r10*x1415))+((cj15*r12*sj16))+(((-1.0)*(1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x1414))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj16*r12))+((sj16*((r11*sj17))))+(((-1.0)*r10*sj16*x1414))), ((((-1.0)*r11*sj17*x1415))+((cj17*r10*x1415))+((cj15*r12*sj16))+(((-1.0)*(1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x1414))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1416=IKsin(j14);
IkReal x1417=((1.0)*cj16);
IkReal x1418=(cj17*sj16);
IkReal x1419=((1.0)*sj16*sj17);
IkReal x1420=IKcos(j14);
IkReal x1421=(cj13*x1420);
IkReal x1422=(sj13*x1420);
IkReal x1423=(cj17*sj15);
IkReal x1424=(sj15*sj17);
IkReal x1425=((1.0)*cj15*sj16);
IkReal x1426=(cj15*cj16*sj17);
IkReal x1427=((1.0)*cj15*cj16*cj17);
IkReal x1428=(sj13*x1416);
IkReal x1429=(cj13*x1416);
IkReal x1430=((0.01822)*cj17);
IkReal x1431=((0.3549)*cj17);
IkReal x1432=((0.3549)*sj17);
IkReal x1433=((0.01822)*sj17);
IkReal x1434=((0.0136)*sj16);
IkReal x1435=((0.0136)*cj16*cj17);
IkReal x1436=((0.0136)*cj16*sj17);
evalcond[0]=(((r10*x1418))+(((-1.0)*r11*x1419))+(((-1.0)*r12*x1417))+x1416);
evalcond[1]=(((r20*x1418))+x1421+(((-1.0)*r22*x1417))+(((-1.0)*r21*x1419)));
evalcond[2]=(((r00*x1418))+(((-1.0)*r02*x1417))+(((-1.0)*r01*x1419))+(((-1.0)*x1422)));
evalcond[3]=(x1420+(((-1.0)*r12*x1425))+((r11*x1426))+((r11*x1423))+((r10*x1424))+(((-1.0)*r10*x1427)));
evalcond[4]=(x1428+(((-1.0)*r00*x1427))+((r01*x1423))+((r00*x1424))+((r01*x1426))+(((-1.0)*r02*x1425)));
evalcond[5]=((((-1.0)*r20*x1427))+((r20*x1424))+(((-1.0)*x1429))+((r21*x1423))+((r21*x1426))+(((-1.0)*r22*x1425)));
evalcond[6]=((0.0104)+(((-1.0)*r11*x1431))+(((-1.0)*(1.0)*py))+(((-1.0)*r10*x1432))+(((-1.0)*r10*x1435))+(((-1.0)*r10*x1430))+(((-0.0159)*x1420))+(((-1.0)*r12*x1434))+((r11*x1436))+((r11*x1433))+(((0.0005)*x1416)));
evalcond[7]=(((r21*x1433))+(((-1.0)*r20*x1432))+(((0.0159)*x1429))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x1431))+(((-1.0)*r20*x1430))+(((-1.0)*r20*x1435))+(((-1.0)*r22*x1434))+(((0.0005)*x1421))+((r21*x1436))+(((0.3466)*sj13)));
evalcond[8]=((0.03)+(((-1.0)*r00*x1432))+(((-1.0)*(1.0)*px))+(((0.3466)*cj13))+(((-1.0)*r00*x1430))+(((-0.0005)*x1422))+(((-0.0159)*x1428))+(((-1.0)*r00*x1435))+((r01*x1436))+((r01*x1433))+(((-1.0)*r01*x1431))+(((-1.0)*r02*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1437=((1.0)*r12);
IkReal x1438=(r11*sj17);
IkReal x1439=(cj15*cj16);
if( IKabs(((((-1.0)*sj16*x1438))+(((-1.0)*cj16*x1437))+((sj16*((cj17*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj15*sj17))+((cj17*r11*sj15))+((x1438*x1439))+(((-1.0)*cj15*sj16*x1437))+(((-1.0)*cj17*r10*x1439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj16*x1438))+(((-1.0)*cj16*x1437))+((sj16*((cj17*r10))))))+IKsqr((((r10*sj15*sj17))+((cj17*r11*sj15))+((x1438*x1439))+(((-1.0)*cj15*sj16*x1437))+(((-1.0)*cj17*r10*x1439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*sj16*x1438))+(((-1.0)*cj16*x1437))+((sj16*((cj17*r10))))), (((r10*sj15*sj17))+((cj17*r11*sj15))+((x1438*x1439))+(((-1.0)*cj15*sj16*x1437))+(((-1.0)*cj17*r10*x1439))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1440=IKcos(j14);
IkReal x1441=(cj13*x1440);
IkReal x1442=((1.0)*cj16);
IkReal x1443=(cj17*sj16);
IkReal x1444=((1.0)*sj16*sj17);
IkReal x1445=IKsin(j14);
IkReal x1446=((1.0)*x1445);
IkReal x1447=(sj13*x1440);
IkReal x1448=(cj17*sj15);
IkReal x1449=(sj15*sj17);
IkReal x1450=((1.0)*cj15*sj16);
IkReal x1451=(cj15*cj16*sj17);
IkReal x1452=((1.0)*cj15*cj16*cj17);
IkReal x1453=((0.01822)*cj17);
IkReal x1454=((0.3549)*cj17);
IkReal x1455=((0.3549)*sj17);
IkReal x1456=((0.01822)*sj17);
IkReal x1457=((0.0136)*sj16);
IkReal x1458=((0.0136)*cj16*cj17);
IkReal x1459=((0.0136)*cj16*sj17);
IkReal x1460=((0.0159)*x1445);
evalcond[0]=(((r20*x1443))+(((-1.0)*r21*x1444))+x1441+(((-1.0)*r22*x1442)));
evalcond[1]=(((r10*x1443))+(((-1.0)*x1446))+(((-1.0)*r12*x1442))+(((-1.0)*r11*x1444)));
evalcond[2]=((((-1.0)*r02*x1442))+(((-1.0)*r01*x1444))+((r00*x1443))+x1447);
evalcond[3]=(((r11*x1451))+((r11*x1448))+(((-1.0)*x1440))+(((-1.0)*r10*x1452))+(((-1.0)*r12*x1450))+((r10*x1449)));
evalcond[4]=((((-1.0)*cj13*x1446))+((r21*x1451))+(((-1.0)*r22*x1450))+((r21*x1448))+(((-1.0)*r20*x1452))+((r20*x1449)));
evalcond[5]=(((r01*x1451))+(((-1.0)*r00*x1452))+(((-1.0)*sj13*x1446))+((r00*x1449))+(((-1.0)*r02*x1450))+((r01*x1448)));
evalcond[6]=((-0.0104)+((r11*x1459))+(((-1.0)*r10*x1455))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x1454))+(((-1.0)*r10*x1458))+(((-0.0005)*x1445))+((r11*x1456))+(((0.0159)*x1440))+(((-1.0)*r12*x1457))+(((-1.0)*r10*x1453)));
evalcond[7]=(((cj13*x1460))+((r21*x1459))+(((-1.0)*r20*x1458))+(((-1.0)*r22*x1457))+(((-1.0)*(1.0)*pz))+(((-1.0)*r21*x1454))+(((-1.0)*r20*x1453))+((r21*x1456))+(((0.0005)*x1441))+(((-1.0)*r20*x1455))+(((0.3466)*sj13)));
evalcond[8]=((-0.03)+(((-1.0)*(1.0)*px))+(((0.0005)*x1447))+(((-1.0)*r00*x1455))+(((-1.0)*(0.3466)*cj13))+(((-1.0)*r00*x1458))+(((-1.0)*r01*x1454))+(((-1.0)*r00*x1453))+((sj13*x1460))+((r01*x1456))+((r01*x1459))+(((-1.0)*r02*x1457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1461=(cj12*cj16);
IkReal x1462=(cj16*sj12);
IkReal x1463=(cj12*sj16*sj17);
IkReal x1464=(sj12*sj16*sj17);
IkReal x1465=(cj17*r00);
IkReal x1466=((1.0)*cj12*sj16);
IkReal x1467=(cj17*r10);
if( IKabs((((r12*x1462))+((r11*x1464))+((r01*x1463))+(((-1.0)*sj12*sj16*x1467))+(((-1.0)*x1465*x1466))+((r02*x1461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj12*sj16*x1465))+(((-1.0)*r01*x1464))+((r11*x1463))+((r12*x1461))+(((-1.0)*r02*x1462))+(((-1.0)*x1466*x1467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1462))+((r11*x1464))+((r01*x1463))+(((-1.0)*sj12*sj16*x1467))+(((-1.0)*x1465*x1466))+((r02*x1461))))+IKsqr((((sj12*sj16*x1465))+(((-1.0)*r01*x1464))+((r11*x1463))+((r12*x1461))+(((-1.0)*r02*x1462))+(((-1.0)*x1466*x1467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r12*x1462))+((r11*x1464))+((r01*x1463))+(((-1.0)*sj12*sj16*x1467))+(((-1.0)*x1465*x1466))+((r02*x1461))), (((sj12*sj16*x1465))+(((-1.0)*r01*x1464))+((r11*x1463))+((r12*x1461))+(((-1.0)*r02*x1462))+(((-1.0)*x1466*x1467))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1468=IKcos(j14);
IkReal x1469=(cj12*x1468);
IkReal x1470=IKsin(j14);
IkReal x1471=(sj12*x1470);
IkReal x1472=(x1469+x1471);
IkReal x1473=((1.0)*cj16);
IkReal x1474=(cj17*sj16);
IkReal x1475=((1.0)*sj16*sj17);
IkReal x1476=(cj12*x1470);
IkReal x1477=(sj12*x1468);
IkReal x1478=(cj17*sj15);
IkReal x1479=(sj15*sj17);
IkReal x1480=((1.0)*cj15*sj16);
IkReal x1481=(cj15*cj16*sj17);
IkReal x1482=((1.0)*cj15*cj16*cj17);
IkReal x1483=((0.01822)*cj17);
IkReal x1484=((0.3549)*cj17);
IkReal x1485=((0.3549)*sj17);
IkReal x1486=((0.01822)*sj17);
IkReal x1487=((0.0136)*sj16);
IkReal x1488=((0.0136)*cj16*cj17);
IkReal x1489=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r11*x1475))+((r10*x1474))+x1472+(((-1.0)*r12*x1473)));
evalcond[1]=(((r00*x1474))+(((-1.0)*r01*x1475))+(((-1.0)*r02*x1473))+(((-1.0)*x1477))+x1476);
evalcond[2]=(((r00*x1479))+(((-1.0)*r02*x1480))+((r01*x1478))+(((-1.0)*r00*x1482))+x1472+((r01*x1481)));
evalcond[3]=((((-1.0)*r10*x1482))+((r11*x1478))+((r11*x1481))+(((-1.0)*x1476))+x1477+(((-1.0)*r12*x1480))+((r10*x1479)));
evalcond[4]=((((-1.0)*r00*x1485))+(((-1.0)*(1.0)*px))+(((-1.0)*r01*x1484))+(((-1.0)*r00*x1488))+((r01*x1489))+(((-1.0)*r02*x1487))+(((-0.0005)*x1477))+((r01*x1486))+(((-0.0159)*x1469))+(((0.0005)*x1476))+(((-1.0)*r00*x1483))+(((0.03)*sj12))+(((0.0104)*cj12))+(((-0.0159)*x1471)));
evalcond[5]=((((-1.0)*r10*x1483))+(((-1.0)*(1.0)*py))+((r11*x1486))+(((-1.0)*r11*x1484))+(((0.0005)*x1469))+(((-1.0)*(0.03)*cj12))+(((0.0159)*x1476))+(((-1.0)*r10*x1488))+(((0.0005)*x1471))+(((-1.0)*r10*x1485))+((r11*x1489))+(((-1.0)*r12*x1487))+(((-0.0159)*x1477))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1490=(cj16*r02);
IkReal x1491=(cj16*r12);
IkReal x1492=(cj12*sj16);
IkReal x1493=(r01*sj17);
IkReal x1494=(r11*sj17);
IkReal x1495=(sj12*sj16);
IkReal x1496=(cj17*r00);
IkReal x1497=((1.0)*cj12*sj16);
IkReal x1498=(cj17*r10);
IkReal x1499=((1.0)*sj12*sj16);
if( IKabs((((x1492*x1493))+((x1494*x1495))+((sj12*x1491))+(((-1.0)*x1498*x1499))+((cj12*x1490))+(((-1.0)*x1496*x1497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj12*x1491))+((x1493*x1495))+((sj12*x1490))+(((-1.0)*x1496*x1499))+((x1492*x1498))+(((-1.0)*x1494*x1497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1492*x1493))+((x1494*x1495))+((sj12*x1491))+(((-1.0)*x1498*x1499))+((cj12*x1490))+(((-1.0)*x1496*x1497))))+IKsqr(((((-1.0)*cj12*x1491))+((x1493*x1495))+((sj12*x1490))+(((-1.0)*x1496*x1499))+((x1492*x1498))+(((-1.0)*x1494*x1497))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((x1492*x1493))+((x1494*x1495))+((sj12*x1491))+(((-1.0)*x1498*x1499))+((cj12*x1490))+(((-1.0)*x1496*x1497))), ((((-1.0)*cj12*x1491))+((x1493*x1495))+((sj12*x1490))+(((-1.0)*x1496*x1499))+((x1492*x1498))+(((-1.0)*x1494*x1497))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1500=IKsin(j14);
IkReal x1501=(cj12*x1500);
IkReal x1502=IKcos(j14);
IkReal x1503=(sj12*x1502);
IkReal x1504=(x1501+x1503);
IkReal x1505=((1.0)*cj16);
IkReal x1506=(cj17*sj16);
IkReal x1507=((1.0)*sj16*sj17);
IkReal x1508=(sj12*x1500);
IkReal x1509=(cj12*x1502);
IkReal x1510=(cj17*sj15);
IkReal x1511=(sj15*sj17);
IkReal x1512=((1.0)*cj15*sj16);
IkReal x1513=(cj15*cj16*sj17);
IkReal x1514=((1.0)*cj15*cj16*cj17);
IkReal x1515=((0.01822)*cj17);
IkReal x1516=((0.3549)*cj17);
IkReal x1517=((0.3549)*sj17);
IkReal x1518=((0.01822)*sj17);
IkReal x1519=((0.0136)*sj16);
IkReal x1520=((0.0136)*cj16*cj17);
IkReal x1521=((0.0136)*cj16*sj17);
evalcond[0]=(((r00*x1506))+(((-1.0)*r01*x1507))+x1504+(((-1.0)*r02*x1505)));
evalcond[1]=((((-1.0)*r11*x1507))+((r10*x1506))+(((-1.0)*x1509))+x1508+(((-1.0)*r12*x1505)));
evalcond[2]=((((-1.0)*r10*x1514))+((r11*x1513))+((r11*x1510))+((r10*x1511))+x1504+(((-1.0)*r12*x1512)));
evalcond[3]=(((r00*x1511))+(((-1.0)*r00*x1514))+(((-1.0)*x1508))+(((-1.0)*r02*x1512))+x1509+((r01*x1513))+((r01*x1510)));
evalcond[4]=((((-1.0)*(1.0)*px))+(((0.0159)*x1508))+(((-0.0159)*x1509))+(((-1.0)*r00*x1515))+(((-1.0)*r00*x1517))+((r01*x1521))+(((-1.0)*r01*x1516))+(((0.03)*sj12))+(((0.0005)*x1503))+(((0.0005)*x1501))+(((0.0104)*cj12))+((r01*x1518))+(((-1.0)*r00*x1520))+(((-1.0)*r02*x1519)));
evalcond[5]=((((-1.0)*r10*x1517))+(((-0.0159)*x1503))+(((-1.0)*(1.0)*py))+(((-1.0)*r11*x1516))+(((-1.0)*r12*x1519))+(((0.0005)*x1508))+(((-0.0159)*x1501))+((r11*x1518))+(((-1.0)*(0.03)*cj12))+(((-0.0005)*x1509))+((r11*x1521))+(((-1.0)*r10*x1520))+(((-1.0)*r10*x1515))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1522=((1.0)*sj16);
IkReal x1523=(cj15*cj16);
IkReal x1524=(r21*sj17);
if( IKabs(((((-1.0)*cj15*r22*x1522))+((x1523*x1524))+((r20*sj15*sj17))+((cj17*r21*sj15))+(((-1.0)*cj17*r20*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj17*r20*x1522))+((cj16*r22))+((sj16*x1524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj15*r22*x1522))+((x1523*x1524))+((r20*sj15*sj17))+((cj17*r21*sj15))+(((-1.0)*cj17*r20*x1523))))+IKsqr(((((-1.0)*cj17*r20*x1522))+((cj16*r22))+((sj16*x1524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*cj15*r22*x1522))+((x1523*x1524))+((r20*sj15*sj17))+((cj17*r21*sj15))+(((-1.0)*cj17*r20*x1523))), ((((-1.0)*cj17*r20*x1522))+((cj16*r22))+((sj16*x1524))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1525=IKcos(j14);
IkReal x1526=((1.0)*cj16);
IkReal x1527=(cj17*sj16);
IkReal x1528=((1.0)*sj16*sj17);
IkReal x1529=IKsin(j14);
IkReal x1530=(sj12*x1529);
IkReal x1531=(cj12*x1529);
IkReal x1532=(cj17*sj15);
IkReal x1533=(sj15*sj17);
IkReal x1534=((1.0)*cj15*sj16);
IkReal x1535=(cj15*cj16*sj17);
IkReal x1536=((1.0)*cj15*cj16*cj17);
IkReal x1537=(cj12*x1525);
IkReal x1538=(sj12*x1525);
IkReal x1539=((0.01822)*cj17);
IkReal x1540=((0.3549)*cj17);
IkReal x1541=((0.3549)*sj17);
IkReal x1542=((0.01822)*sj17);
IkReal x1543=((0.0136)*sj16);
IkReal x1544=((0.0136)*cj16*cj17);
IkReal x1545=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*r21*x1528))+(((-1.0)*r22*x1526))+x1525+((r20*x1527)));
evalcond[1]=((((-1.0)*r11*x1528))+((r10*x1527))+(((-1.0)*r12*x1526))+x1530);
evalcond[2]=((((-1.0)*r02*x1526))+x1531+((r00*x1527))+(((-1.0)*r01*x1528)));
evalcond[3]=((((-1.0)*x1529))+((r21*x1535))+((r20*x1533))+(((-1.0)*r20*x1536))+(((-1.0)*r22*x1534))+((r21*x1532)));
evalcond[4]=(((r01*x1535))+(((-1.0)*r00*x1536))+(((-1.0)*r02*x1534))+x1537+((r00*x1533))+((r01*x1532)));
evalcond[5]=(((r11*x1535))+((r10*x1533))+x1538+(((-1.0)*r12*x1534))+(((-1.0)*r10*x1536))+((r11*x1532)));
evalcond[6]=((((-1.0)*r22*x1543))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1544))+(((0.0159)*x1529))+(((-1.0)*r20*x1541))+((r21*x1545))+((r21*x1542))+(((0.0005)*x1525))+(((-1.0)*r20*x1539))+(((-1.0)*r21*x1540)));
evalcond[7]=((((-1.0)*(1.0)*px))+(((0.3766)*sj12))+(((-1.0)*r00*x1539))+(((-1.0)*r01*x1540))+(((0.0005)*x1531))+(((-1.0)*r00*x1544))+(((-1.0)*r02*x1543))+(((0.0104)*cj12))+((r01*x1542))+((r01*x1545))+(((-0.0159)*x1537))+(((-1.0)*r00*x1541)));
evalcond[8]=((((-1.0)*(1.0)*py))+((r11*x1542))+(((-1.0)*(0.3766)*cj12))+(((-1.0)*r10*x1541))+((r11*x1545))+(((-0.0159)*x1538))+(((-1.0)*r12*x1543))+(((-1.0)*r10*x1539))+(((-1.0)*r11*x1540))+(((-1.0)*r10*x1544))+(((0.0005)*x1530))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1546=((1.0)*sj15);
IkReal x1547=(cj17*r20);
IkReal x1548=(r21*sj17);
if( IKabs(((((-1.0)*cj17*r21*x1546))+((cj15*r22*sj16))+((cj15*cj16*x1547))+(((-1.0)*cj15*cj16*x1548))+(((-1.0)*r20*sj17*x1546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj16*x1547))+(((-1.0)*cj16*r22))+(((-1.0)*sj16*x1548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj17*r21*x1546))+((cj15*r22*sj16))+((cj15*cj16*x1547))+(((-1.0)*cj15*cj16*x1548))+(((-1.0)*r20*sj17*x1546))))+IKsqr((((sj16*x1547))+(((-1.0)*cj16*r22))+(((-1.0)*sj16*x1548))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*cj17*r21*x1546))+((cj15*r22*sj16))+((cj15*cj16*x1547))+(((-1.0)*cj15*cj16*x1548))+(((-1.0)*r20*sj17*x1546))), (((sj16*x1547))+(((-1.0)*cj16*r22))+(((-1.0)*sj16*x1548))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1549=((1.0)*cj16);
IkReal x1550=(cj17*sj16);
IkReal x1551=IKcos(j14);
IkReal x1552=((1.0)*sj16*sj17);
IkReal x1553=IKsin(j14);
IkReal x1554=(sj12*x1553);
IkReal x1555=(cj12*x1553);
IkReal x1556=(cj17*sj15);
IkReal x1557=(sj15*sj17);
IkReal x1558=((1.0)*cj15*sj16);
IkReal x1559=(cj15*cj16*sj17);
IkReal x1560=((1.0)*cj15*cj16*cj17);
IkReal x1561=(cj12*x1551);
IkReal x1562=(sj12*x1551);
IkReal x1563=((0.01822)*cj17);
IkReal x1564=((0.3549)*cj17);
IkReal x1565=((0.3549)*sj17);
IkReal x1566=((0.01822)*sj17);
IkReal x1567=((0.0136)*sj16);
IkReal x1568=((0.0136)*cj16*cj17);
IkReal x1569=((0.0136)*cj16*sj17);
evalcond[0]=((((-1.0)*x1551))+(((-1.0)*r21*x1552))+((r20*x1550))+(((-1.0)*r22*x1549)));
evalcond[1]=((((-1.0)*r11*x1552))+((r10*x1550))+x1554+(((-1.0)*r12*x1549)));
evalcond[2]=((((-1.0)*r01*x1552))+(((-1.0)*r02*x1549))+x1555+((r00*x1550)));
evalcond[3]=((((-1.0)*r20*x1560))+((r21*x1556))+((r21*x1559))+x1553+(((-1.0)*r22*x1558))+((r20*x1557)));
evalcond[4]=((((-1.0)*r02*x1558))+((r00*x1557))+(((-1.0)*r00*x1560))+x1561+((r01*x1559))+((r01*x1556)));
evalcond[5]=(((r11*x1559))+((r11*x1556))+(((-1.0)*r12*x1558))+(((-1.0)*r10*x1560))+x1562+((r10*x1557)));
evalcond[6]=((((-1.0)*r21*x1564))+(((-1.0)*r20*x1563))+(((-1.0)*r20*x1565))+(((-0.0159)*x1553))+((r21*x1569))+(((-1.0)*(1.0)*pz))+(((-1.0)*r22*x1567))+(((-1.0)*r20*x1568))+((r21*x1566))+(((-0.0005)*x1551)));
evalcond[7]=((((-1.0)*r00*x1568))+(((-1.0)*(1.0)*px))+(((-1.0)*(0.3166)*sj12))+((r01*x1566))+(((0.0005)*x1555))+(((-1.0)*r00*x1563))+(((-0.0159)*x1561))+(((-1.0)*r00*x1565))+(((-1.0)*r01*x1564))+(((0.0104)*cj12))+(((-1.0)*r02*x1567))+((r01*x1569)));
evalcond[8]=((((0.3166)*cj12))+(((-1.0)*r10*x1565))+(((-1.0)*(1.0)*py))+(((-0.0159)*x1562))+(((0.0005)*x1554))+(((-1.0)*r11*x1564))+(((-1.0)*r10*x1568))+((r11*x1569))+((r11*x1566))+(((-1.0)*r10*x1563))+(((0.0104)*sj12))+(((-1.0)*r12*x1567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(cj13,-1);
if(!x1577.valid){
continue;
}
IkReal x1570=x1577.value;
IkReal x1571=(sj16*sj17);
IkReal x1572=(cj16*r22);
IkReal x1573=(sj12*sj13);
IkReal x1574=((1.0)*cj17*sj16);
IkReal x1575=(r21*x1571);
IkReal x1576=(r20*x1574);
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(cj12,-1);
if(!x1578.valid){
continue;
}
if( IKabs((x1570*(x1578.value)*(((((-1.0)*x1573*x1576))+((x1572*x1573))+((x1573*x1575))+(((-1.0)*cj13*r00*x1574))+((cj13*cj16*r02))+((cj13*r01*x1571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1570*(((((-1.0)*x1576))+x1575+x1572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1570*(x1578.value)*(((((-1.0)*x1573*x1576))+((x1572*x1573))+((x1573*x1575))+(((-1.0)*cj13*r00*x1574))+((cj13*cj16*r02))+((cj13*r01*x1571))))))+IKsqr((x1570*(((((-1.0)*x1576))+x1575+x1572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x1570*(x1578.value)*(((((-1.0)*x1573*x1576))+((x1572*x1573))+((x1573*x1575))+(((-1.0)*cj13*r00*x1574))+((cj13*cj16*r02))+((cj13*r01*x1571))))), (x1570*(((((-1.0)*x1576))+x1575+x1572))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1579=IKcos(j14);
IkReal x1580=(cj13*x1579);
IkReal x1581=((1.0)*cj16);
IkReal x1582=(cj17*sj16);
IkReal x1583=((1.0)*sj16*sj17);
IkReal x1584=IKsin(j14);
IkReal x1585=(sj12*x1584);
IkReal x1586=(cj12*x1579);
IkReal x1587=(sj13*x1586);
IkReal x1588=(cj12*x1584);
IkReal x1589=(sj12*sj13*x1579);
IkReal x1590=(cj17*sj15);
IkReal x1591=(sj15*sj17);
IkReal x1592=(cj13*x1584);
IkReal x1593=((1.0)*cj15*sj16);
IkReal x1594=(cj15*cj16*sj17);
IkReal x1595=((1.0)*cj15*cj16*cj17);
IkReal x1596=(sj13*x1585);
IkReal x1597=(sj12*x1579);
IkReal x1598=(cj12*sj13*x1584);
IkReal x1599=((0.01822)*cj17);
IkReal x1600=((0.3549)*cj17);
IkReal x1601=((0.3549)*sj17);
IkReal x1602=((0.01822)*sj17);
IkReal x1603=((0.0136)*sj16);
IkReal x1604=((0.0136)*cj16*cj17);
IkReal x1605=((0.0136)*cj16*sj17);
IkReal x1606=((0.3466)*cj13);
evalcond[0]=(x1580+((r20*x1582))+(((-1.0)*r22*x1581))+(((-1.0)*r21*x1583)));
evalcond[1]=((((-1.0)*r11*x1583))+x1585+x1587+(((-1.0)*r12*x1581))+((r10*x1582)));
evalcond[2]=((((-1.0)*r01*x1583))+x1588+(((-1.0)*x1589))+(((-1.0)*r02*x1581))+((r00*x1582)));
evalcond[3]=((((-1.0)*r22*x1593))+(((-1.0)*r20*x1595))+((r20*x1591))+((r21*x1594))+(((-1.0)*x1592))+((r21*x1590)));
evalcond[4]=(x1586+x1596+((r01*x1590))+((r00*x1591))+((r01*x1594))+(((-1.0)*r00*x1595))+(((-1.0)*r02*x1593)));
evalcond[5]=((((-1.0)*x1598))+(((-1.0)*r10*x1595))+x1597+((r11*x1590))+((r11*x1594))+((r10*x1591))+(((-1.0)*r12*x1593)));
evalcond[6]=((((-1.0)*r21*x1600))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1599))+(((-1.0)*r20*x1601))+(((0.0005)*x1580))+(((-1.0)*r22*x1603))+(((-1.0)*r20*x1604))+((r21*x1602))+(((0.0159)*x1592))+((r21*x1605))+(((0.3466)*sj13)));
evalcond[7]=((((-1.0)*(1.0)*px))+((sj12*x1606))+((r01*x1605))+((r01*x1602))+(((-0.0159)*x1586))+(((-0.0005)*x1589))+(((-1.0)*r01*x1600))+(((-1.0)*r00*x1601))+(((0.0005)*x1588))+(((-1.0)*r00*x1604))+(((-0.0159)*x1596))+(((0.03)*sj12))+(((-1.0)*r00*x1599))+(((0.0104)*cj12))+(((-1.0)*r02*x1603)));
evalcond[8]=((((-1.0)*r10*x1601))+((r11*x1605))+(((-1.0)*r10*x1604))+(((-1.0)*(1.0)*py))+((r11*x1602))+(((-0.0159)*x1597))+(((0.0005)*x1585))+(((-1.0)*cj12*x1606))+(((-1.0)*(0.03)*cj12))+(((0.0005)*x1587))+(((0.0159)*x1598))+(((-1.0)*r12*x1603))+(((-1.0)*r10*x1599))+(((-1.0)*r11*x1600))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1607=(cj12*cj16);
IkReal x1608=(cj16*sj12);
IkReal x1609=(cj12*sj16*sj17);
IkReal x1610=(sj12*sj16*sj17);
IkReal x1611=(cj17*r00);
IkReal x1612=((1.0)*cj12*sj16);
IkReal x1613=(cj17*r10);
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(sj13,-1);
if(!x1614.valid){
continue;
}
if( IKabs((((r12*x1608))+(((-1.0)*x1611*x1612))+((r11*x1610))+(((-1.0)*sj12*sj16*x1613))+((r02*x1607))+((r01*x1609)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1614.value)*(((((-1.0)*r02*x1608))+((r11*x1609))+(((-1.0)*x1612*x1613))+((r12*x1607))+((sj12*sj16*x1611))+(((-1.0)*r01*x1610)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1608))+(((-1.0)*x1611*x1612))+((r11*x1610))+(((-1.0)*sj12*sj16*x1613))+((r02*x1607))+((r01*x1609))))+IKsqr(((x1614.value)*(((((-1.0)*r02*x1608))+((r11*x1609))+(((-1.0)*x1612*x1613))+((r12*x1607))+((sj12*sj16*x1611))+(((-1.0)*r01*x1610))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r12*x1608))+(((-1.0)*x1611*x1612))+((r11*x1610))+(((-1.0)*sj12*sj16*x1613))+((r02*x1607))+((r01*x1609))), ((x1614.value)*(((((-1.0)*r02*x1608))+((r11*x1609))+(((-1.0)*x1612*x1613))+((r12*x1607))+((sj12*sj16*x1611))+(((-1.0)*r01*x1610))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1615=IKcos(j14);
IkReal x1616=(cj13*x1615);
IkReal x1617=((1.0)*cj16);
IkReal x1618=(cj17*sj16);
IkReal x1619=((1.0)*sj16*sj17);
IkReal x1620=IKsin(j14);
IkReal x1621=(sj12*x1620);
IkReal x1622=(cj12*x1615);
IkReal x1623=(sj13*x1622);
IkReal x1624=(cj12*x1620);
IkReal x1625=(sj12*sj13*x1615);
IkReal x1626=(cj17*sj15);
IkReal x1627=(sj15*sj17);
IkReal x1628=(cj13*x1620);
IkReal x1629=((1.0)*cj15*sj16);
IkReal x1630=(cj15*cj16*sj17);
IkReal x1631=((1.0)*cj15*cj16*cj17);
IkReal x1632=(sj13*x1621);
IkReal x1633=(sj12*x1615);
IkReal x1634=(cj12*sj13*x1620);
IkReal x1635=((0.01822)*cj17);
IkReal x1636=((0.3549)*cj17);
IkReal x1637=((0.3549)*sj17);
IkReal x1638=((0.01822)*sj17);
IkReal x1639=((0.0136)*sj16);
IkReal x1640=((0.0136)*cj16*cj17);
IkReal x1641=((0.0136)*cj16*sj17);
IkReal x1642=((0.3466)*cj13);
evalcond[0]=(((r20*x1618))+x1616+(((-1.0)*r21*x1619))+(((-1.0)*r22*x1617)));
evalcond[1]=((((-1.0)*r11*x1619))+((r10*x1618))+x1621+x1623+(((-1.0)*r12*x1617)));
evalcond[2]=(((r00*x1618))+(((-1.0)*r01*x1619))+(((-1.0)*x1625))+x1624+(((-1.0)*r02*x1617)));
evalcond[3]=(((r21*x1630))+((r20*x1627))+(((-1.0)*r20*x1631))+(((-1.0)*r22*x1629))+((r21*x1626))+(((-1.0)*x1628)));
evalcond[4]=(((r00*x1627))+(((-1.0)*r00*x1631))+(((-1.0)*r02*x1629))+x1622+x1632+((r01*x1630))+((r01*x1626)));
evalcond[5]=((((-1.0)*x1634))+((r10*x1627))+((r11*x1630))+x1633+(((-1.0)*r12*x1629))+(((-1.0)*r10*x1631))+((r11*x1626)));
evalcond[6]=((((-1.0)*r22*x1639))+(((0.0159)*x1628))+(((-1.0)*(1.0)*pz))+(((-1.0)*r20*x1635))+((r21*x1641))+(((-1.0)*r20*x1640))+(((-1.0)*r21*x1636))+(((-1.0)*r20*x1637))+(((0.0005)*x1616))+((r21*x1638))+(((0.3466)*sj13)));
evalcond[7]=((((-0.0005)*x1625))+(((-1.0)*(1.0)*px))+(((-1.0)*r02*x1639))+((sj12*x1642))+(((-1.0)*r00*x1635))+(((-1.0)*r01*x1636))+(((-0.0159)*x1632))+(((0.0005)*x1624))+((r01*x1641))+((r01*x1638))+(((-1.0)*r00*x1640))+(((0.03)*sj12))+(((-0.0159)*x1622))+(((0.0104)*cj12))+(((-1.0)*r00*x1637)));
evalcond[8]=((((0.0005)*x1621))+(((-1.0)*(1.0)*py))+(((0.0005)*x1623))+(((0.0159)*x1634))+(((-1.0)*r10*x1640))+(((-1.0)*cj12*x1642))+(((-1.0)*(0.03)*cj12))+(((-1.0)*r11*x1636))+(((-1.0)*r10*x1637))+((r11*x1641))+(((-1.0)*r10*x1635))+(((-1.0)*r12*x1639))+(((-0.0159)*x1633))+(((0.0104)*sj12))+((r11*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1643=((1.0)*sj16);
IkReal x1644=(cj15*cj16);
IkReal x1645=(r21*sj17);
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x1646.valid){
continue;
}
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*r20*x1644))+((r20*sj15*sj17))+((x1644*x1645))+((cj17*r21*sj15))+(((-1.0)*cj15*r22*x1643)))),IkReal((((cj16*r22))+(((-1.0)*cj17*r20*x1643))+((sj16*x1645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1646.value)))+(x1647.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1648=IKcos(j14);
IkReal x1649=(cj13*x1648);
IkReal x1650=((1.0)*cj16);
IkReal x1651=(cj17*sj16);
IkReal x1652=((1.0)*sj16*sj17);
IkReal x1653=IKsin(j14);
IkReal x1654=(sj12*x1653);
IkReal x1655=(cj12*x1648);
IkReal x1656=(sj13*x1655);
IkReal x1657=(cj12*x1653);
IkReal x1658=(sj12*sj13*x1648);
IkReal x1659=(cj17*sj15);
IkReal x1660=(sj15*sj17);
IkReal x1661=(cj13*x1653);
IkReal x1662=((1.0)*cj15*sj16);
IkReal x1663=(cj15*cj16*sj17);
IkReal x1664=((1.0)*cj15*cj16*cj17);
IkReal x1665=(sj13*x1654);
IkReal x1666=(sj12*x1648);
IkReal x1667=(cj12*sj13*x1653);
IkReal x1668=((0.01822)*cj17);
IkReal x1669=((0.3549)*cj17);
IkReal x1670=((0.3549)*sj17);
IkReal x1671=((0.01822)*sj17);
IkReal x1672=((0.0136)*sj16);
IkReal x1673=((0.0136)*cj16*cj17);
IkReal x1674=((0.0136)*cj16*sj17);
IkReal x1675=((0.3466)*cj13);
evalcond[0]=(((r20*x1651))+(((-1.0)*r21*x1652))+(((-1.0)*r22*x1650))+x1649);
evalcond[1]=((((-1.0)*r11*x1652))+(((-1.0)*r12*x1650))+x1656+x1654+((r10*x1651)));
evalcond[2]=((((-1.0)*x1658))+(((-1.0)*r01*x1652))+((r00*x1651))+x1657+(((-1.0)*r02*x1650)));
evalcond[3]=((((-1.0)*r20*x1664))+(((-1.0)*r22*x1662))+((r21*x1663))+((r21*x1659))+(((-1.0)*x1661))+((r20*x1660)));
evalcond[4]=((((-1.0)*r02*x1662))+((r01*x1659))+(((-1.0)*r00*x1664))+((r00*x1660))+x1655+((r01*x1663))+x1665);
evalcond[5]=((((-1.0)*r12*x1662))+(((-1.0)*r10*x1664))+((r11*x1663))+(((-1.0)*x1667))+((r11*x1659))+x1666+((r10*x1660)));
evalcond[6]=((((-1.0)*r22*x1672))+(((-1.0)*(1.0)*pz))+((r21*x1674))+(((0.0005)*x1649))+(((-1.0)*r20*x1670))+(((-1.0)*r21*x1669))+(((0.0159)*x1661))+(((-1.0)*r20*x1673))+(((-1.0)*r20*x1668))+((r21*x1671))+(((0.3466)*sj13)));
evalcond[7]=((((0.0005)*x1657))+(((-1.0)*(1.0)*px))+(((-1.0)*r00*x1670))+(((-0.0159)*x1655))+(((-1.0)*r01*x1669))+((r01*x1671))+(((-1.0)*r02*x1672))+(((-1.0)*r00*x1673))+(((0.03)*sj12))+(((-0.0159)*x1665))+(((0.0104)*cj12))+((r01*x1674))+(((-0.0005)*x1658))+(((-1.0)*r00*x1668))+((sj12*x1675)));
evalcond[8]=((((-0.0159)*x1666))+(((-1.0)*r10*x1673))+(((0.0005)*x1656))+(((-1.0)*(1.0)*py))+(((0.0159)*x1667))+(((0.0005)*x1654))+(((-1.0)*cj12*x1675))+(((-1.0)*r12*x1672))+(((-1.0)*(0.03)*cj12))+(((-1.0)*r10*x1668))+(((-1.0)*r10*x1670))+(((-1.0)*r11*x1669))+((r11*x1671))+((r11*x1674))+(((0.0104)*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - bender (1f26fd0523f2f95fdf5a472af42f27c2)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
